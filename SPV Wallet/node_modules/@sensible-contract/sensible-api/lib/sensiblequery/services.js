"use strict";
/**
 * AUTO_GENERATED Do not change this file directly, use config.ts file instead
 *
 * @version 5
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNftSellUtxo = exports.getNftOwnersCodehashGenesis = exports.getNftInfoAll = exports.getNftHistoryCodehashGenesisAddress = exports.getNftGenesisInfoCodehashGenesis = exports.getNftDetailCodehashGenesisAddress = exports.getNftCodehashInfoCodehash = exports.getNftCodehashAll = exports.getNftAuctionUtxoDetailCodehashNftid = exports.getMempoolInfo = exports.getHeightHeightTxTxidOuts = exports.getHeightHeightTxTxidOutIndex = exports.getHeightHeightTxTxidIns = exports.getHeightHeightTxTxidInIndex = exports.getHeightHeightTxTxid = exports.getHeightHeightRawtxTxid = exports.getHeightHeightBlockTxs = exports.getHeightHeightBlock = exports.getGetrawmempool = exports.getFtUtxoDataCodehashGenesisAddress = exports.getFtUtxoCodehashGenesisAddress = exports.getFtTransferTimesCodehashGenesis = exports.getFtSummaryDataAddress = exports.getFtSummaryAddress = exports.getFtOwnersCodehashGenesis = exports.getFtInfoAll = exports.getFtIncomeHistoryCodehashGenesisAddress = exports.getFtHistoryCodehashGenesisAddress = exports.getFtGenesisInfoCodehashGenesis = exports.getFtCodehashInfoCodehash = exports.getFtCodehashAll = exports.getFtBalanceCodehashGenesisAddress = exports.getContractSwapDataCodehashGenesis = exports.getContractSwapAggregateCodehashGenesis = exports.getContractSwapAggregateAmountCodehashGenesis = exports.getContractHistoryCodehashGenesisAddress = exports.getContractHistoryCodehashGenesis = exports.getBlocks = exports.getBlockchainInfo = exports.getBlockTxsBlkid = exports.getBlockIdBlkid = exports.getAddressAddressUtxoData = exports.getAddressAddressUtxo = exports.getAddressAddressHistoryTx = exports.getAddressAddressHistory = exports.getAddressAddressContractHistoryTx = exports.getAddressAddressContractHistory = exports.getAddressAddressBalance = exports.get = exports.template = void 0;
exports._CONSTANT0 = exports.postPushtxs = exports.postPushtx = exports.getTxTxidOuts = exports.getTxTxidOutIndexSpent = exports.getTxTxidOutIndex = exports.getTxTxidIns = exports.getTxTxidInIndex = exports.getTxTxid = exports.getTokenInfo = exports.getRelayTxid = exports.getRawtxTxid = exports.getNftUtxoListCodehashGenesis = exports.getNftUtxoDetailCodehashGenesisToken_index = exports.getNftUtxoDataCodehashGenesisAddress = exports.getNftUtxoCodehashGenesisAddress = exports.getNftTransferTimesCodehashGenesisTokenid = exports.getNftSummaryAddress = exports.getNftSellUtxoDetailCodehashGenesisToken_index = exports.getNftSellUtxoCodehashGenesis = exports.getNftSellUtxoByAddressAddress = void 0;
const httpRequest_1 = require("./httpRequest");
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const __DEV__ = process.env.NODE_ENV !== "production";
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function overrideConfig(config, configOverride) {
    return Object.assign(Object.assign(Object.assign({}, config), configOverride), { headers: Object.assign(Object.assign({}, config === null || config === void 0 ? void 0 : config.headers), configOverride === null || configOverride === void 0 ? void 0 : configOverride.headers) });
}
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function template(path, obj = {}) {
    Object.keys(obj).forEach((key) => {
        const re = new RegExp(`{${key}}`, "i");
        path = path.replace(re, obj[key]);
    });
    return path;
}
exports.template = template;
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function objToForm(requestBody) {
    const formData = new FormData();
    Object.entries(requestBody).forEach(([key, value]) => {
        value && formData.append(key, value);
    });
    return formData;
}
/**
 * Welcome message
 */
const get = (configOverride) => {
    return httpRequest_1.Http.getRequest(exports.get.key, undefined, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.get = get;
/** Key is end point string without base url */
exports.get.key = "/";
/**
 * 通过地址address获取balance
 */
const getAddressAddressBalance = (
/**
 * Address
 */
address, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getAddressAddressBalance.key, { address }), undefined, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getAddressAddressBalance = getAddressAddressBalance;
/** Key is end point string without base url */
exports.getAddressAddressBalance.key = "/address/{address}/balance";
/**
 * 通过地址address获取合约相关tx历史列表，返回详细输入/输出
 */
const getAddressAddressContractHistory = (
/**
 * Address
 */
address, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getAddressAddressContractHistory.key, { address }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getAddressAddressContractHistory = getAddressAddressContractHistory;
/** Key is end point string without base url */
exports.getAddressAddressContractHistory.key = "/address/{address}/contract-history";
/**
 * 通过地址address获取合约相关tx历史列表，返回tx概要
 */
const getAddressAddressContractHistoryTx = (
/**
 * Address
 */
address, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getAddressAddressContractHistoryTx.key, { address }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getAddressAddressContractHistoryTx = getAddressAddressContractHistoryTx;
/** Key is end point string without base url */
exports.getAddressAddressContractHistoryTx.key =
    "/address/{address}/contract-history/tx";
/**
 * 通过地址address获取相关tx历史列表，返回详细输入/输出
 */
const getAddressAddressHistory = (
/**
 * Address
 */
address, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getAddressAddressHistory.key, { address }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getAddressAddressHistory = getAddressAddressHistory;
/** Key is end point string without base url */
exports.getAddressAddressHistory.key = "/address/{address}/history";
/**
 * 通过地址address获取相关tx历史列表，返回tx概要
 */
const getAddressAddressHistoryTx = (
/**
 * Address
 */
address, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getAddressAddressHistoryTx.key, { address }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getAddressAddressHistoryTx = getAddressAddressHistoryTx;
/** Key is end point string without base url */
exports.getAddressAddressHistoryTx.key = "/address/{address}/history/tx";
/**
 * 通过地址address获取相关常规utxo列表
 */
const getAddressAddressUtxo = (
/**
 * Address
 */
address, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getAddressAddressUtxo.key, { address }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getAddressAddressUtxo = getAddressAddressUtxo;
/** Key is end point string without base url */
exports.getAddressAddressUtxo.key = "/address/{address}/utxo";
/**
 * 通过地址address获取相关常规utxo列表，和数量信息
 */
const getAddressAddressUtxoData = (
/**
 * Address
 */
address, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getAddressAddressUtxoData.key, { address }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getAddressAddressUtxoData = getAddressAddressUtxoData;
/** Key is end point string without base url */
exports.getAddressAddressUtxoData.key = "/address/{address}/utxo-data";
/**
 * 通过区块blkid获取区块概述
 */
const getBlockIdBlkid = (
/**
 * BlockId
 */
blkid, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getBlockIdBlkid.key, { blkid }), undefined, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getBlockIdBlkid = getBlockIdBlkid;
/** Key is end point string without base url */
exports.getBlockIdBlkid.key = "/block/id/{blkid}";
/**
 * 通过区块blkid获取区块包含的Tx概述列表
 */
const getBlockTxsBlkid = (
/**
 * Block ID
 */
blkid, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getBlockTxsBlkid.key, { blkid }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getBlockTxsBlkid = getBlockTxsBlkid;
/** Key is end point string without base url */
exports.getBlockTxsBlkid.key = "/block/txs/{blkid}";
/**
 * 获取最新区块位置、同步状态等信息
 */
const getBlockchainInfo = (configOverride) => {
    return httpRequest_1.Http.getRequest(exports.getBlockchainInfo.key, undefined, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getBlockchainInfo = getBlockchainInfo;
/** Key is end point string without base url */
exports.getBlockchainInfo.key = "/blockchain/info";
/**
 * 获取指定高度范围内的区块概述列表
 */
const getBlocks = (queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(exports.getBlocks.key, queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getBlocks = getBlocks;
/** Key is end point string without base url */
exports.getBlocks.key = "/blocks";
/**
 * 通过溯源genesis获取任何地址相关tx历史列表，返回详细输入/输出
 */
const getContractHistoryCodehashGenesis = (
/**
 * Code Hash160
 */
codehash, 
/**
 * Genesis ID
 */
genesis, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getContractHistoryCodehashGenesis.key, { codehash, genesis }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getContractHistoryCodehashGenesis = getContractHistoryCodehashGenesis;
/** Key is end point string without base url */
exports.getContractHistoryCodehashGenesis.key =
    "/contract/history/{codehash}/{genesis}";
/**
 * 通过溯源genesis获取某地址相关tx历史列表，返回详细输入/输出
 */
const getContractHistoryCodehashGenesisAddress = (
/**
 * Code Hash160
 */
codehash, 
/**
 * Genesis ID
 */
genesis, 
/**
 * Address
 */
address, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getContractHistoryCodehashGenesisAddress.key, {
        codehash,
        genesis,
        address,
    }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getContractHistoryCodehashGenesisAddress = getContractHistoryCodehashGenesisAddress;
/** Key is end point string without base url */
exports.getContractHistoryCodehashGenesisAddress.key =
    "/contract/history/{codehash}/{genesis}/{address}";
/**
 * 查询Swap合约在区块中的聚合Amount数据，以合约CodeHash+GenesisID来确认一种Swap
 */
const getContractSwapAggregateAmountCodehashGenesis = (
/**
 * Code Hash160
 */
codehash, 
/**
 * Genesis ID
 */
genesis, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getContractSwapAggregateAmountCodehashGenesis.key, {
        codehash,
        genesis,
    }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getContractSwapAggregateAmountCodehashGenesis = getContractSwapAggregateAmountCodehashGenesis;
/** Key is end point string without base url */
exports.getContractSwapAggregateAmountCodehashGenesis.key =
    "/contract/swap-aggregate-amount/{codehash}/{genesis}";
/**
 * 查询Swap合约在区块中的聚合价格数据，以合约CodeHash+GenesisID来确认一种Swap
 */
const getContractSwapAggregateCodehashGenesis = (
/**
 * Code Hash160
 */
codehash, 
/**
 * Genesis ID
 */
genesis, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getContractSwapAggregateCodehashGenesis.key, {
        codehash,
        genesis,
    }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getContractSwapAggregateCodehashGenesis = getContractSwapAggregateCodehashGenesis;
/** Key is end point string without base url */
exports.getContractSwapAggregateCodehashGenesis.key =
    "/contract/swap-aggregate/{codehash}/{genesis}";
/**
 * 查询Swap合约在区块中的每次交易数据，以合约CodeHash+GenesisID来确认一种Swap
 */
const getContractSwapDataCodehashGenesis = (
/**
 * Code Hash160
 */
codehash, 
/**
 * Genesis ID
 */
genesis, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getContractSwapDataCodehashGenesis.key, { codehash, genesis }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getContractSwapDataCodehashGenesis = getContractSwapDataCodehashGenesis;
/** Key is end point string without base url */
exports.getContractSwapDataCodehashGenesis.key =
    "/contract/swap-data/{codehash}/{genesis}";
/**
 * 查询某人持有的某FT Token的余额，同时返回UTXO数量
 */
const getFtBalanceCodehashGenesisAddress = (
/**
 * Code Hash160
 */
codehash, 
/**
 * Genesis ID
 */
genesis, 
/**
 * Address
 */
address, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getFtBalanceCodehashGenesisAddress.key, {
        codehash,
        genesis,
        address,
    }), undefined, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getFtBalanceCodehashGenesisAddress = getFtBalanceCodehashGenesisAddress;
/** Key is end point string without base url */
exports.getFtBalanceCodehashGenesisAddress.key =
    "/ft/balance/{codehash}/{genesis}/{address}";
/**
 * 查询所有FT codehash简述
 */
const getFtCodehashAll = (configOverride) => {
    return httpRequest_1.Http.getRequest(exports.getFtCodehashAll.key, undefined, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getFtCodehashAll = getFtCodehashAll;
/** Key is end point string without base url */
exports.getFtCodehashAll.key = "/ft/codehash/all";
/**
 * 查询使用某codehash的FT Token简述
 */
const getFtCodehashInfoCodehash = (
/**
 * Code Hash160
 */
codehash, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getFtCodehashInfoCodehash.key, { codehash }), undefined, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getFtCodehashInfoCodehash = getFtCodehashInfoCodehash;
/** Key is end point string without base url */
exports.getFtCodehashInfoCodehash.key = "/ft/codehash-info/{codehash}";
/**
 * 查询使用某codehash+genesis的FT Token简述
 */
const getFtGenesisInfoCodehashGenesis = (
/**
 * Code Hash160
 */
codehash, 
/**
 * Genesis ID
 */
genesis, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getFtGenesisInfoCodehashGenesis.key, { codehash, genesis }), undefined, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getFtGenesisInfoCodehashGenesis = getFtGenesisInfoCodehashGenesis;
/** Key is end point string without base url */
exports.getFtGenesisInfoCodehashGenesis.key = "/ft/genesis-info/{codehash}/{genesis}";
/**
 * 通过FT合约CodeHash+溯源genesis获取地址相关tx历史列表，返回详细输入/输出
 */
const getFtHistoryCodehashGenesisAddress = (
/**
 * Code Hash160
 */
codehash, 
/**
 * Genesis ID
 */
genesis, 
/**
 * Address
 */
address, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getFtHistoryCodehashGenesisAddress.key, {
        codehash,
        genesis,
        address,
    }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getFtHistoryCodehashGenesisAddress = getFtHistoryCodehashGenesisAddress;
/** Key is end point string without base url */
exports.getFtHistoryCodehashGenesisAddress.key =
    "/ft/history/{codehash}/{genesis}/{address}";
/**
 * 通过FT合约CodeHash+溯源genesis获取地址相关tx历史列表，返回详细输出历史，并附带输入来源
 */
const getFtIncomeHistoryCodehashGenesisAddress = (
/**
 * Code Hash160
 */
codehash, 
/**
 * Genesis ID
 */
genesis, 
/**
 * Address
 */
address, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getFtIncomeHistoryCodehashGenesisAddress.key, {
        codehash,
        genesis,
        address,
    }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getFtIncomeHistoryCodehashGenesisAddress = getFtIncomeHistoryCodehashGenesisAddress;
/** Key is end point string without base url */
exports.getFtIncomeHistoryCodehashGenesisAddress.key =
    "/ft/income-history/{codehash}/{genesis}/{address}";
/**
 * 查询所有FT Token简述
 */
const getFtInfoAll = (configOverride) => {
    return httpRequest_1.Http.getRequest(exports.getFtInfoAll.key, undefined, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getFtInfoAll = getFtInfoAll;
/** Key is end point string without base url */
exports.getFtInfoAll.key = "/ft/info/all";
/**
 * 查询FT Token的持有人。获得每个地址的token余额
 */
const getFtOwnersCodehashGenesis = (
/**
 * Code Hash160
 */
codehash, 
/**
 * Genesis ID
 */
genesis, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getFtOwnersCodehashGenesis.key, { codehash, genesis }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getFtOwnersCodehashGenesis = getFtOwnersCodehashGenesis;
/** Key is end point string without base url */
exports.getFtOwnersCodehashGenesis.key = "/ft/owners/{codehash}/{genesis}";
/**
 * 查询某人持有的FT Token列表。获得每个token的余额
 */
const getFtSummaryAddress = (
/**
 * Address
 */
address, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getFtSummaryAddress.key, { address }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getFtSummaryAddress = getFtSummaryAddress;
/** Key is end point string without base url */
exports.getFtSummaryAddress.key = "/ft/summary/{address}";
/**
 * 查询某人持有的FT Token列表。获得每个token的余额。并返回token总量
 */
const getFtSummaryDataAddress = (
/**
 * Address
 */
address, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getFtSummaryDataAddress.key, { address }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getFtSummaryDataAddress = getFtSummaryDataAddress;
/** Key is end point string without base url */
exports.getFtSummaryDataAddress.key = "/ft/summary-data/{address}";
/**
 * 查询FT Token在区块中的转移数量，以合约CodeHash+GenesisID来确认一种FT
 */
const getFtTransferTimesCodehashGenesis = (
/**
 * Code Hash160
 */
codehash, 
/**
 * Genesis ID
 */
genesis, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getFtTransferTimesCodehashGenesis.key, { codehash, genesis }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getFtTransferTimesCodehashGenesis = getFtTransferTimesCodehashGenesis;
/** Key is end point string without base url */
exports.getFtTransferTimesCodehashGenesis.key =
    "/ft/transfer-times/{codehash}/{genesis}";
/**
 * 通过FT合约CodeHash+溯源genesis获取某地址的utxo列表
 */
const getFtUtxoCodehashGenesisAddress = (
/**
 * Code Hash160
 */
codehash, 
/**
 * Genesis ID
 */
genesis, 
/**
 * Address
 */
address, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getFtUtxoCodehashGenesisAddress.key, {
        codehash,
        genesis,
        address,
    }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getFtUtxoCodehashGenesisAddress = getFtUtxoCodehashGenesisAddress;
/** Key is end point string without base url */
exports.getFtUtxoCodehashGenesisAddress.key = "/ft/utxo/{codehash}/{genesis}/{address}";
/**
 * 通过FT合约CodeHash+溯源genesis获取某地址的utxo列表，和数量信息
 */
const getFtUtxoDataCodehashGenesisAddress = (
/**
 * Code Hash160
 */
codehash, 
/**
 * Genesis ID
 */
genesis, 
/**
 * Address
 */
address, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getFtUtxoDataCodehashGenesisAddress.key, {
        codehash,
        genesis,
        address,
    }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getFtUtxoDataCodehashGenesisAddress = getFtUtxoDataCodehashGenesisAddress;
/** Key is end point string without base url */
exports.getFtUtxoDataCodehashGenesisAddress.key =
    "/ft/utxo-data/{codehash}/{genesis}/{address}";
/**
 * GetRawMempool, get txid list in mempool
 */
const getGetrawmempool = (configOverride) => {
    return httpRequest_1.Http.getRequest(exports.getGetrawmempool.key, undefined, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getGetrawmempool = getGetrawmempool;
/** Key is end point string without base url */
exports.getGetrawmempool.key = "/getrawmempool";
/**
 * 通过区块height获取区块概述
 */
const getHeightHeightBlock = (
/**
 * Block Height
 */
height, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getHeightHeightBlock.key, { height }), undefined, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getHeightHeightBlock = getHeightHeightBlock;
/** Key is end point string without base url */
exports.getHeightHeightBlock.key = "/height/{height}/block";
/**
 * 通过区块height获取区块包含的Tx概述列表
 */
const getHeightHeightBlockTxs = (
/**
 * Block Height
 */
height, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getHeightHeightBlockTxs.key, { height }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getHeightHeightBlockTxs = getHeightHeightBlockTxs;
/** Key is end point string without base url */
exports.getHeightHeightBlockTxs.key = "/height/{height}/block/txs";
/**
 * 通过交易txid和交易被打包的区块高度height获取交易原数据rawtx
 */
const getHeightHeightRawtxTxid = (
/**
 * Block Height
 */
height, 
/**
 * TxId
 */
txid, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getHeightHeightRawtxTxid.key, { height, txid }), undefined, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getHeightHeightRawtxTxid = getHeightHeightRawtxTxid;
/** Key is end point string without base url */
exports.getHeightHeightRawtxTxid.key = "/height/{height}/rawtx/{txid}";
/**
 * 通过交易txid和交易被打包的区块高度height获取交易概述
 */
const getHeightHeightTxTxid = (
/**
 * Block Height
 */
height, 
/**
 * TxId
 */
txid, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getHeightHeightTxTxid.key, { height, txid }), undefined, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getHeightHeightTxTxid = getHeightHeightTxTxid;
/** Key is end point string without base url */
exports.getHeightHeightTxTxid.key = "/height/{height}/tx/{txid}";
/**
 * 通过交易txid和index和交易被打包的区块高度height获取指定交易输入信息
 */
const getHeightHeightTxTxidInIndex = (
/**
 * Block Height
 */
height, 
/**
 * TxId
 */
txid, 
/**
 * input index
 */
index, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getHeightHeightTxTxidInIndex.key, { height, txid, index }), undefined, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getHeightHeightTxTxidInIndex = getHeightHeightTxTxidInIndex;
/** Key is end point string without base url */
exports.getHeightHeightTxTxidInIndex.key = "/height/{height}/tx/{txid}/in/{index}";
/**
 * 通过交易txid和交易被打包的区块高度height获取交易所有输入信息列表
 */
const getHeightHeightTxTxidIns = (
/**
 * Block Height
 */
height, 
/**
 * TxId
 */
txid, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getHeightHeightTxTxidIns.key, { height, txid }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getHeightHeightTxTxidIns = getHeightHeightTxTxidIns;
/** Key is end point string without base url */
exports.getHeightHeightTxTxidIns.key = "/height/{height}/tx/{txid}/ins";
/**
 * 通过交易txid和index和交易被打包的区块高度height获取指定交易输出信息
 */
const getHeightHeightTxTxidOutIndex = (
/**
 * Block Height
 */
height, 
/**
 * TxId
 */
txid, 
/**
 * output index
 */
index, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getHeightHeightTxTxidOutIndex.key, { height, txid, index }), undefined, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getHeightHeightTxTxidOutIndex = getHeightHeightTxTxidOutIndex;
/** Key is end point string without base url */
exports.getHeightHeightTxTxidOutIndex.key = "/height/{height}/tx/{txid}/out/{index}";
/**
 * 通过交易txid和交易被打包的区块高度height获取交易所有输出信息列表
 */
const getHeightHeightTxTxidOuts = (
/**
 * Block Height
 */
height, 
/**
 * TxId
 */
txid, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getHeightHeightTxTxidOuts.key, { height, txid }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getHeightHeightTxTxidOuts = getHeightHeightTxTxidOuts;
/** Key is end point string without base url */
exports.getHeightHeightTxTxidOuts.key = "/height/{height}/tx/{txid}/outs";
/**
 * 获取mempool信息
 */
const getMempoolInfo = (configOverride) => {
    return httpRequest_1.Http.getRequest(exports.getMempoolInfo.key, undefined, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getMempoolInfo = getMempoolInfo;
/** Key is end point string without base url */
exports.getMempoolInfo.key = "/mempool/info";
/**
 * 通过拍卖的CodeHash和NFT ID获取具体NFTAuction合约utxo
 */
const getNftAuctionUtxoDetailCodehashNftid = (
/**
 * Auction Code Hash160
 */
codehash, 
/**
 * NFT ID
 */
nftid, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getNftAuctionUtxoDetailCodehashNftid.key, { codehash, nftid }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getNftAuctionUtxoDetailCodehashNftid = getNftAuctionUtxoDetailCodehashNftid;
/** Key is end point string without base url */
exports.getNftAuctionUtxoDetailCodehashNftid.key =
    "/nft/auction/utxo-detail/{codehash}/{nftid}";
/**
 * 查询所有NFT CodeHash简述
 */
const getNftCodehashAll = (configOverride) => {
    return httpRequest_1.Http.getRequest(exports.getNftCodehashAll.key, undefined, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getNftCodehashAll = getNftCodehashAll;
/** Key is end point string without base url */
exports.getNftCodehashAll.key = "/nft/codehash/all";
/**
 * 查询使用某codehash的NFT Token简述
 */
const getNftCodehashInfoCodehash = (
/**
 * Code Hash160
 */
codehash, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getNftCodehashInfoCodehash.key, { codehash }), undefined, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getNftCodehashInfoCodehash = getNftCodehashInfoCodehash;
/** Key is end point string without base url */
exports.getNftCodehashInfoCodehash.key = "/nft/codehash-info/{codehash}";
/**
 * 查询某人持有的某NFT Token的所持有的NFT数量
 */
const getNftDetailCodehashGenesisAddress = (
/**
 * Code Hash160
 */
codehash, 
/**
 * Genesis ID
 */
genesis, 
/**
 * Address
 */
address, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getNftDetailCodehashGenesisAddress.key, {
        codehash,
        genesis,
        address,
    }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getNftDetailCodehashGenesisAddress = getNftDetailCodehashGenesisAddress;
/** Key is end point string without base url */
exports.getNftDetailCodehashGenesisAddress.key =
    "/nft/detail/{codehash}/{genesis}/{address}";
/**
 * 查询使用某codehash+genesis的NFT Token简述
 */
const getNftGenesisInfoCodehashGenesis = (
/**
 * Code Hash160
 */
codehash, 
/**
 * Genesis ID
 */
genesis, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getNftGenesisInfoCodehashGenesis.key, { codehash, genesis }), undefined, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getNftGenesisInfoCodehashGenesis = getNftGenesisInfoCodehashGenesis;
/** Key is end point string without base url */
exports.getNftGenesisInfoCodehashGenesis.key = "/nft/genesis-info/{codehash}/{genesis}";
/**
 * 通过NFT合约CodeHash+溯源genesis获取地址相关tx历史列表，返回详细输入/输出
 */
const getNftHistoryCodehashGenesisAddress = (
/**
 * Code Hash160
 */
codehash, 
/**
 * Genesis ID
 */
genesis, 
/**
 * Address
 */
address, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getNftHistoryCodehashGenesisAddress.key, {
        codehash,
        genesis,
        address,
    }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getNftHistoryCodehashGenesisAddress = getNftHistoryCodehashGenesisAddress;
/** Key is end point string without base url */
exports.getNftHistoryCodehashGenesisAddress.key =
    "/nft/history/{codehash}/{genesis}/{address}";
/**
 * 查询所有NFT Token简述
 */
const getNftInfoAll = (configOverride) => {
    return httpRequest_1.Http.getRequest(exports.getNftInfoAll.key, undefined, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getNftInfoAll = getNftInfoAll;
/** Key is end point string without base url */
exports.getNftInfoAll.key = "/nft/info/all";
/**
 * 查询NFT Token的持有人。获得每个人持有的NFT数量
 */
const getNftOwnersCodehashGenesis = (
/**
 * Code Hash160
 */
codehash, 
/**
 * Genesis ID
 */
genesis, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getNftOwnersCodehashGenesis.key, { codehash, genesis }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getNftOwnersCodehashGenesis = getNftOwnersCodehashGenesis;
/** Key is end point string without base url */
exports.getNftOwnersCodehashGenesis.key = "/nft/owners/{codehash}/{genesis}";
/**
 * 获取NFTSell合约的utxo列表
 */
const getNftSellUtxo = (queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(exports.getNftSellUtxo.key, queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getNftSellUtxo = getNftSellUtxo;
/** Key is end point string without base url */
exports.getNftSellUtxo.key = "/nft/sell/utxo";
/**
 * 通过出售人地址获取NFTSell合约utxo列表
 */
const getNftSellUtxoByAddressAddress = (
/**
 * Address
 */
address, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getNftSellUtxoByAddressAddress.key, { address }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getNftSellUtxoByAddressAddress = getNftSellUtxoByAddressAddress;
/** Key is end point string without base url */
exports.getNftSellUtxoByAddressAddress.key = "/nft/sell/utxo-by-address/{address}";
/**
 * 通过NFT的CodeHash+溯源genesis获取NFTSell合约utxo列表
 */
const getNftSellUtxoCodehashGenesis = (
/**
 * Code Hash160
 */
codehash, 
/**
 * Genesis ID
 */
genesis, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getNftSellUtxoCodehashGenesis.key, { codehash, genesis }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getNftSellUtxoCodehashGenesis = getNftSellUtxoCodehashGenesis;
/** Key is end point string without base url */
exports.getNftSellUtxoCodehashGenesis.key = "/nft/sell/utxo/{codehash}/{genesis}";
/**
 * 通过NFT的CodeHash+溯源genesis和NFT Token Index获取具体NFTSell合约utxo
 */
const getNftSellUtxoDetailCodehashGenesisToken_index = (
/**
 * Code Hash160
 */
codehash, 
/**
 * Genesis ID
 */
genesis, 
/**
 * Token Index
 */
token_index, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getNftSellUtxoDetailCodehashGenesisToken_index.key, {
        codehash,
        genesis,
        token_index,
    }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getNftSellUtxoDetailCodehashGenesisToken_index = getNftSellUtxoDetailCodehashGenesisToken_index;
/** Key is end point string without base url */
exports.getNftSellUtxoDetailCodehashGenesisToken_index.key =
    "/nft/sell/utxo-detail/{codehash}/{genesis}/{token_index}";
/**
 * 查询某人持有的所有NFT Token列表。获得持有的nft数量计数
 */
const getNftSummaryAddress = (
/**
 * Address
 */
address, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getNftSummaryAddress.key, { address }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getNftSummaryAddress = getNftSummaryAddress;
/** Key is end point string without base url */
exports.getNftSummaryAddress.key = "/nft/summary/{address}";
/**
 * 查询NFT Token在区块中的转移次数，以合约CodeHash+GenesisID，和tokenId来确认一种NFT。
 */
const getNftTransferTimesCodehashGenesisTokenid = (
/**
 * Code Hash160
 */
codehash, 
/**
 * Genesis ID
 */
genesis, 
/**
 * Token ID
 */
tokenid, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getNftTransferTimesCodehashGenesisTokenid.key, {
        codehash,
        genesis,
        tokenid,
    }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getNftTransferTimesCodehashGenesisTokenid = getNftTransferTimesCodehashGenesisTokenid;
/** Key is end point string without base url */
exports.getNftTransferTimesCodehashGenesisTokenid.key =
    "/nft/transfer-times/{codehash}/{genesis}/{tokenid}";
/**
 * 通过NFT合约CodeHash+溯源genesis获取某地址的utxo列表
 */
const getNftUtxoCodehashGenesisAddress = (
/**
 * Code Hash160
 */
codehash, 
/**
 * Genesis ID
 */
genesis, 
/**
 * Address
 */
address, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getNftUtxoCodehashGenesisAddress.key, {
        codehash,
        genesis,
        address,
    }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getNftUtxoCodehashGenesisAddress = getNftUtxoCodehashGenesisAddress;
/** Key is end point string without base url */
exports.getNftUtxoCodehashGenesisAddress.key =
    "/nft/utxo/{codehash}/{genesis}/{address}";
/**
 * 通过NFT合约CodeHash+溯源genesis获取某地址的utxo列表，和数量信息
 */
const getNftUtxoDataCodehashGenesisAddress = (
/**
 * Code Hash160
 */
codehash, 
/**
 * Genesis ID
 */
genesis, 
/**
 * Address
 */
address, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getNftUtxoDataCodehashGenesisAddress.key, {
        codehash,
        genesis,
        address,
    }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getNftUtxoDataCodehashGenesisAddress = getNftUtxoDataCodehashGenesisAddress;
/** Key is end point string without base url */
exports.getNftUtxoDataCodehashGenesisAddress.key =
    "/nft/utxo-data/{codehash}/{genesis}/{address}";
/**
 * 通过NFT合约CodeHash+溯源genesis获取某tokenId的utxo
 */
const getNftUtxoDetailCodehashGenesisToken_index = (
/**
 * Code Hash160
 */
codehash, 
/**
 * Genesis ID
 */
genesis, 
/**
 * Token Index
 */
token_index, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getNftUtxoDetailCodehashGenesisToken_index.key, {
        codehash,
        genesis,
        token_index,
    }), undefined, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getNftUtxoDetailCodehashGenesisToken_index = getNftUtxoDetailCodehashGenesisToken_index;
/** Key is end point string without base url */
exports.getNftUtxoDetailCodehashGenesisToken_index.key =
    "/nft/utxo-detail/{codehash}/{genesis}/{token_index}";
/**
 * 通过NFT合约CodeHash+溯源genesis按tokenIndex顺序获取所有的utxo列表，附带总量信息
 */
const getNftUtxoListCodehashGenesis = (
/**
 * Code Hash160
 */
codehash, 
/**
 * Genesis ID
 */
genesis, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getNftUtxoListCodehashGenesis.key, { codehash, genesis }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getNftUtxoListCodehashGenesis = getNftUtxoListCodehashGenesis;
/** Key is end point string without base url */
exports.getNftUtxoListCodehashGenesis.key = "/nft/utxo-list/{codehash}/{genesis}";
/**
 * 通过交易txid获取交易原数据rawtx
 */
const getRawtxTxid = (
/**
 * TxId
 */
txid, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getRawtxTxid.key, { txid }), undefined, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getRawtxTxid = getRawtxTxid;
/** Key is end point string without base url */
exports.getRawtxTxid.key = "/rawtx/{txid}";
/**
 * 将交易txid重新发送到woc
 */
const getRelayTxid = (
/**
 * TxId
 */
txid, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getRelayTxid.key, { txid }), undefined, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getRelayTxid = getRelayTxid;
/** Key is end point string without base url */
exports.getRelayTxid.key = "/relay/{txid}";
/**
 * 查询Token简述
 */
const getTokenInfo = (configOverride) => {
    return httpRequest_1.Http.getRequest(exports.getTokenInfo.key, undefined, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getTokenInfo = getTokenInfo;
/** Key is end point string without base url */
exports.getTokenInfo.key = "/token/info";
/**
 * 通过交易txid获取交易概述
 */
const getTxTxid = (
/**
 * TxId
 */
txid, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getTxTxid.key, { txid }), undefined, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getTxTxid = getTxTxid;
/** Key is end point string without base url */
exports.getTxTxid.key = "/tx/{txid}";
/**
 * 通过交易txid和index获取指定交易输入信息
 */
const getTxTxidInIndex = (
/**
 * TxId
 */
txid, 
/**
 * input index
 */
index, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getTxTxidInIndex.key, { txid, index }), undefined, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getTxTxidInIndex = getTxTxidInIndex;
/** Key is end point string without base url */
exports.getTxTxidInIndex.key = "/tx/{txid}/in/{index}";
/**
 * 通过交易txid获取交易所有输入信息列表
 */
const getTxTxidIns = (
/**
 * TxId
 */
txid, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getTxTxidIns.key, { txid }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getTxTxidIns = getTxTxidIns;
/** Key is end point string without base url */
exports.getTxTxidIns.key = "/tx/{txid}/ins";
/**
 * 通过交易txid和index获取指定交易输出信息
 */
const getTxTxidOutIndex = (
/**
 * TxId
 */
txid, 
/**
 * output index
 */
index, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getTxTxidOutIndex.key, { txid, index }), undefined, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getTxTxidOutIndex = getTxTxidOutIndex;
/** Key is end point string without base url */
exports.getTxTxidOutIndex.key = "/tx/{txid}/out/{index}";
/**
 * 通过交易txid和index获取指定交易输出是否被花费状态
 */
const getTxTxidOutIndexSpent = (
/**
 * TxId
 */
txid, 
/**
 * output index
 */
index, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getTxTxidOutIndexSpent.key, { txid, index }), undefined, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getTxTxidOutIndexSpent = getTxTxidOutIndexSpent;
/** Key is end point string without base url */
exports.getTxTxidOutIndexSpent.key = "/tx/{txid}/out/{index}/spent";
/**
 * 通过交易txid获取交易所有输出信息列表
 */
const getTxTxidOuts = (
/**
 * TxId
 */
txid, queryParams, configOverride) => {
    return httpRequest_1.Http.getRequest(template(exports.getTxTxidOuts.key, { txid }), queryParams, undefined, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.getTxTxidOuts = getTxTxidOuts;
/** Key is end point string without base url */
exports.getTxTxidOuts.key = "/tx/{txid}/outs";
/**
 * Push Tx
 */
const postPushtx = (requestBody, configOverride) => {
    return httpRequest_1.Http.postRequest(exports.postPushtx.key, undefined, requestBody, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.postPushtx = postPushtx;
/** Key is end point string without base url */
exports.postPushtx.key = "/pushtx";
/**
 * Push Tx list
 */
const postPushtxs = (requestBody, configOverride) => {
    return httpRequest_1.Http.postRequest(exports.postPushtxs.key, undefined, requestBody, undefined, overrideConfig(exports._CONSTANT0, configOverride));
};
exports.postPushtxs = postPushtxs;
/** Key is end point string without base url */
exports.postPushtxs.key = "/pushtxs";
exports._CONSTANT0 = {
    headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
    },
};
