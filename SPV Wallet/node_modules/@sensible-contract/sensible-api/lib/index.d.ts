import { Axios } from "axios";
export declare type Balance = {
    balance: number;
    pendingBalance: number;
    utxoCount: number;
};
export declare type Utxo = {
    txId: string;
    outputIndex: number;
    satoshis: number;
    address: string;
};
export declare type TokenBalance = {
    balance: string;
    pendingBalance: string;
    utxoCount: number;
    decimal: number;
};
export declare type TokenUtxo = {
    txId: string;
    outputIndex: number;
    tokenAmount: string;
    tokenAddress: string;
};
export declare type Token = {
    codehash: string;
    genesis: string;
    sensibleId: string;
    name: string;
    symbol: string;
    decimal: number;
    balance: string;
    pendingBalance: string;
};
export declare type NftUtxo = {
    txId: string;
    outputIndex: number;
    tokenIndex: string;
    tokenAddress: string;
};
export declare type NftSellUtxo = {
    codehash: string;
    genesis: string;
    tokenIndex: string;
    txId: string;
    outputIndex: number;
    sellerAddress: string;
    satoshisPrice: number;
};
export declare class SensibleApi {
    axios: Axios;
    constructor(apiPrefix?: string);
    authorize(options: {
        authorization: string;
    }): void;
    getBalance(address: string): Promise<Balance>;
    getUtxos(address: string, queryParams?: {
        cursor: number;
        size: number;
    }): Promise<Utxo[]>;
    /**
     * Use getRawTx instead
     * @deprecated
     * @returns
     */
    getRawTxData(txid: string): Promise<string>;
    broadcast(txHex: string): Promise<string>;
    getTokenUtxos(codehash: string, genesis: string, address: string, queryParams?: {
        cursor: number;
        size: number;
    }): Promise<TokenUtxo[]>;
    getTokenBalance(codehash: string, genesis: string, address: string): Promise<TokenBalance>;
    getTokenList(address: string, queryParams?: {
        cursor: number;
        size: number;
    }): Promise<{
        cursor: number;
        list: Token[];
        total: number;
    }>;
    getNftUtxos(codehash: string, genesis: string, address: string, queryParams?: {
        cursor: number;
        size: number;
    }): Promise<NftUtxo[]>;
    getNftDetail(codehash: string, genesis: string, address: string, queryParams?: {
        cursor: number;
        size: number;
    }): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelNFTOwnerResp>;
    getBlockChainInfo(): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelBlockchainInfoResp>;
    getMempool(): Promise<string[]>;
    getMempoolInfo(): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelMempoolInfoResp>;
    pushTx(txHex: string): Promise<string>;
    pushTxs(txHexs: string[]): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & string[]>;
    getAddressBalance(address: string): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelBalanceResp>;
    getAddressUtxos(address: string, queryParams?: {
        cursor: number;
        size: number;
    }): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelTxStandardOutResp[]>;
    getAddressUtxoDatas(address: string, queryParams?: {
        cursor: number;
        size: number;
    }): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelAddressUTXOResp>;
    getBlockInfo(blockId: string): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelBlockInfoResp>;
    getBlocks(queryParams: {
        start: number;
        end: number;
    }): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelBlockInfoResp[]>;
    getBlockInfoByHeight(height: number): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelBlockInfoResp>;
    getTxsByBlockId(blockId: string, queryParams?: {
        cursor: number;
        size: number;
    }): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelTxInfoResp[]>;
    getTxsByHeight(height: number, queryParams?: {
        cursor: number;
        size: number;
    }): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelTxInfoResp[]>;
    getRawTxInHeight(txid: string, height: number): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & string>;
    getTxInHeight(txid: string, height: number): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelTxInfoResp>;
    getTxIns(txid: string, queryParams?: {
        cursor: number;
        size: number;
    }): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelTxInResp[]>;
    getTxInsByHeight(txid: string, height: number, queryParams?: {
        cursor: number;
        size: number;
    }): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelTxInResp[]>;
    getRawTx(txid: string): Promise<string>;
    getTx(txid: string): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelTxInfoResp>;
    getSwapAggregateAmount(codehash: string, genesis: string, queryParams: {
        start: number;
        end: number;
        interval: number;
    }): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelContractSwapAggregateAmountResp[]>;
    getSwapAggregate(codehash: string, genesis: string, queryParams: {
        start: number;
        end: number;
        interval: number;
    }): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelContractSwapAggregateResp[]>;
    getSwapDatas(codehash: string, genesis: string, queryParams: {
        cursor: number;
        size: number;
        start: number;
        end: number;
    }): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelContractSwapDataResp[]>;
    getFtBalance(codehash: string, genesis: string, address: string): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelFTOwnerBalanceWithUtxoCountResp>;
    getFtCodehashInfo(codehash: string): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelFTInfoResp[]>;
    getFtCodehashInfos(): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelTokenCodeHashResp[]>;
    getFtGenesisInfo(codehash: string, genesis: string): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelFTInfoResp>;
    getFtHistory(codehash: string, genesis: string, address: string, queryParams: {
        cursor: number;
        size: number;
        start: number;
        end: number;
    }): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelTxOutHistoryResp[]>;
    getFtInfos(): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelFTInfoResp[]>;
    getFtOwners(codehash: string, genesis: string, queryParams?: {
        cursor: number;
        size: number;
    }): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelFTOwnerBalanceResp[]>;
    getFtSummaryData(address: string, queryParams?: {
        cursor: number;
        size: number;
    }): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelFTSummaryDataByAddressResp>;
    getTxOutSpent(txid: string, index: number): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelTxInSpentResp>;
    getTxOuts(txid: string, queryParams?: {
        cursor: number;
        size: number;
    }): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelTxOutStatusResp[]>;
    getTxOutsByHeight(txid: string, height: number, queryParams?: {
        cursor: number;
        size: number;
    }): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelTxOutStatusResp[]>;
    getTxOut(txid: string, outIndex: number): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelTxOutStatusResp>;
    /**
     * 通过地址address获取相关tx历史列表，返回tx概要
     * @param address
     * @param queryParams
     * @returns
     */
    getAddressTxHistory(address: string, queryParams?: {
        cursor: number;
        size: number;
        start: number;
        end: number;
    }): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelTxInfoResp[]>;
    /**
     * 通过地址address获取相关tx历史列表，返回详细输入/输出
     * @param address
     * @param queryParams
     * @returns
     */
    getAddressTxInsOutsHistory(address: string, queryParams?: {
        cursor: number;
        size: number;
        start: number;
        end: number;
    }): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelTxOutHistoryResp[]>;
    getNftGenesisInfo(codehash: string, genesis: string): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelNFTInfoResp>;
    getNftHistory(codehash: string, genesis: string, address: string, queryParams?: {
        cursor: number;
        size: number;
        start: number;
        end: number;
    }): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelTxOutHistoryResp[]>;
    getNftInfoAll(): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelNFTInfoResp[]>;
    getNftOwners(codehash: string, genesis: string, queryParams?: {
        cursor: number;
        size: number;
    }): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelNFTOwnerResp[]>;
    getNftSellAllUtxos(queryParams?: {
        cursor: number;
        size: number;
    }): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelNFTSellResp[]>;
    getNftSellUtxoByAddress(address: string, queryParams?: {
        cursor: number;
        size: number;
    }): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelNFTSellResp[]>;
    getNftSellUtxoDetail(codehash: string, genesis: string, tokenIndex: string, queryParams: {
        ready: boolean;
    }): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelNFTSellResp[]>;
    getNftSellUtxos(codehash: string, genesis: string, queryParams?: {
        cursor: number;
        size: number;
    }): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelNFTSellResp[]>;
    getNftSummary(address: string, queryParams?: {
        cursor: number;
        size: number;
    }): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelNFTSummaryByAddressResp[]>;
    getNftTransferTimes(codehash: string, genesis: string, tokenIndex: number, queryParams: {
        start: number;
        end: number;
    }): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelBlockTokenVolumeResp[]>;
    getNftUtxoDatas(codehash: string, genesis: string, address: string, queryParams?: {
        cursor: number;
        size: number;
    }): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelAddressTokenUTXOResp>;
    getNftUtxoDetail(codehash: string, genesis: string, tokenIndex: string): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelTxOutResp>;
    getNftUtxoList(codehash: string, genesis: string, queryParams?: {
        cursor: number;
        size: number;
    }): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelAddressTokenUTXOResp>;
    getNftAuctionUtxoDetails(codehash: string, nftid: string, ready?: boolean): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelNFTAuctionResp[]>;
    getContractHistory(codehash: string, genesis: string, queryParams: {
        cursor: number;
        size: number;
        start: number;
        end: number;
        desc: boolean;
    }): Promise<{
        [x: string]: any;
        [x: number]: any;
    } & import("./sensiblequery/types").ModelTxOutHistoryResp[]>;
}
