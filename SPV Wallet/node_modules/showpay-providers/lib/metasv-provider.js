"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetaSVProvider = void 0;
const bsv = require("@sensible-contract/bsv");
// import fetch from "node-fetch";
const cross_fetch_1 = require("cross-fetch");
const base_provider_1 = require("./base-provider");
class MetaSVProvider extends base_provider_1.BaseProvider {
    constructor(network = "mainnet", options) {
        super(network, 'metasv');
        if (network == "mainnet") {
            this.apiPrefix = "https://apiv2.metasv.com";
        }
        else {
            throw new Error("metasv do not support testnet");
        }
        this.authorize(options);
    }
    authorize(options) {
        const { authorization, privateKey } = options;
        if (authorization) {
            if (authorization.indexOf("Bearer") != 0) {
                this.authorization = `Bearer ${authorization}`;
            }
            else {
                this.authorization = authorization;
            }
        }
        else {
            //https://github.com/metasv/metasv-client-signature
            this.privateKey = new bsv.PrivateKey(privateKey);
            this.publicKey = this.privateKey.toPublicKey();
        }
    }
    _getHeaders(path) {
        let headers = {};
        if (this.authorization) {
            headers = { authorization: this.authorization };
        }
        else if (this.privateKey) {
            const timestamp = Date.now();
            const nonce = Math.random().toString().substr(2, 10);
            const message = path + "_" + timestamp + "_" + nonce;
            const hash = bsv.crypto.Hash.sha256(Buffer.from(message));
            const sig = bsv.crypto.ECDSA.sign(hash, this.privateKey, undefined);
            const sigEncoded = sig.toBuffer().toString("base64");
            headers = {
                "MetaSV-Timestamp": timestamp,
                "MetaSV-Client-Pubkey": this.publicKey.toHex(),
                "MetaSV-Nonce": nonce,
                "MetaSV-Signature": sigEncoded,
            };
        }
        else {
            throw new Error("MetaSV should be authorized to access api.");
        }
        return headers;
    }
    getBlockInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/block/info`;
            let url = this.apiPrefix + path;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'GET',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            return _res;
        });
    }
    getBlock(last) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/block`;
            let url = this.apiPrefix + path + `?last=${last}`;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'GET',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            return _res;
        });
    }
    getBlockWithBlockId(blockId) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `block/${blockId}`;
            let url = this.apiPrefix + path;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'GET',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            return _res;
        });
    }
    getTxidDetail(txid, showScript = false) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/tx/${txid}`;
            let url = this.apiPrefix + path + `?showScript=${showScript}`;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'GET',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            return _res;
        });
    }
    getSeenTx(txid) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/tx/${txid}/seen`;
            let url = this.apiPrefix + path;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'GET',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            return _res;
        });
    }
    getVinOutpointDetail(txid) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/vin/${txid}/detail`;
            let url = this.apiPrefix + path;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'GET',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            return _res;
        });
    }
    getOutpoint(txid, index) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/outpoint/${txid}/${index}`;
            let url = this.apiPrefix + path;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'GET',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            return _res;
        });
    }
    aBroadcast(hex) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/tx/broadcast/async`;
            let url = this.apiPrefix + path;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'POST',
                headers: Object.assign(Object.assign({}, this._getHeaders(path)), { "Content-Type": 'application/json' }),
                body: JSON.stringify({
                    hex
                })
            }).then(res => {
                return res.json();
            });
            return _res;
        });
    }
    aBroadcastState(txid) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/tx/broadcast/async/${txid}/state`;
            let url = this.apiPrefix + path;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'GET',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            return _res;
        });
    }
    mBroadcast(hex) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/merchant/broadcast`;
            let url = this.apiPrefix + path;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'POST',
                headers: Object.assign(Object.assign({}, this._getHeaders(path)), { "Content-Type": 'application/json' }),
                body: JSON.stringify({
                    hex
                })
            }).then(res => {
                return res.json();
            });
            return _res.txid;
        });
    }
    getXpubs(flag = "") {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/xpubs`;
            let url = this.apiPrefix + path + `?flag=${flag}`;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'GET',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            return _res;
        });
    }
    getXpubsCount() {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/xpubs/count`;
            let url = this.apiPrefix + path;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'GET',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            return _res;
        });
    }
    registXpub(xpub, skipHeight = 0, initReceiveIndex = 0, initChangeIndex = 500) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/xpub`;
            let url = this.apiPrefix + path;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'POST',
                headers: Object.assign(Object.assign({}, this._getHeaders(path)), { "Content-Type": 'application/json' }),
                body: JSON.stringify({
                    xpub,
                    skipHeight,
                    initReceiveIndex,
                    initChangeIndex
                })
            }).then(res => {
                return res.json();
            });
            return _res.message;
        });
    }
    getXpub(xpub) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/${xpub}`;
            let url = this.apiPrefix + path;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'GET',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            return _res;
        });
    }
    deleteXpub(xpub) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/${xpub}`;
            let url = this.apiPrefix + path;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'DELETE',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            return _res.message;
        });
    }
    getXpubBalance(xpub) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/xpub/${xpub}/balance`;
            let url = this.apiPrefix + path;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'GET',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            return _res;
        });
    }
    getXpubUtxo(xpub, limit = 300) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/xpub/${xpub}/utxo`;
            let url = this.apiPrefix + path + `?limit=${limit}`;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'GET',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            return _res;
        });
    }
    getXpubUtxoCount(xpub) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/xpub/${xpub}/utxo/count`;
            let url = this.apiPrefix + path;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'GET',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            return _res;
        });
    }
    getXpubTxs(xpub, flag = "") {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/xpub/${xpub}/txs`;
            let url = this.apiPrefix + path + `?flag=${flag}`;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'GET',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            return _res;
        });
    }
    getXpubPath(xpub, address) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/xpub/${xpub}/address/${address}`;
            let url = this.apiPrefix + path;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'GET',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            return _res;
        });
    }
    getXpubliteUtxo(xpub, limit = 300) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/xpubLite/${xpub}/utxo`;
            let url = this.apiPrefix + path + `?limit=${limit}`;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'GET',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            return _res;
        });
    }
    getXpublitePath(xpub, address) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `xpubLite/${xpub}/address/${address}`;
            let url = this.apiPrefix + path;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'GET',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            return _res;
        });
    }
    getXpubliteBalance(xpub) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/xpubLite/${xpub}/balance`;
            let url = this.apiPrefix + path;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'GET',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            return _res;
        });
    }
    getUtxos(address, queryParams = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/address/${address}/utxo`;
            let url = this.apiPrefix + path;
            if (queryParams.flag) {
                url += `?flag=${queryParams.flag}`;
            }
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'GET',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            let ret = _res.map((v) => ({
                txId: v.txid,
                outputIndex: v.outIndex,
                satoshis: v.value,
                address: address,
                flag: v.flag
            }));
            return ret;
        });
    }
    getRawTx(txid) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/tx/${txid}/raw`;
            let url = this.apiPrefix + path;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'GET',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            return _res.hex;
        });
    }
    broadcast(rawtx) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/tx/broadcast`;
            let url = this.apiPrefix + path;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'POST',
                headers: Object.assign(Object.assign({}, this._getHeaders(path)), { "Content-Type": 'application/json' }),
                body: JSON.stringify({
                    hex: rawtx
                })
            }).then(res => {
                return res.json();
            });
            return _res.txid;
        });
    }
    getBalance(address) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/address/${address}/balance`;
            let url = this.apiPrefix + path;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'GET',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            return {
                balance: _res.confirmed,
                pendingBalance: _res.unconfirmed,
                utxoCount: _res.utxoCount,
            };
        });
    }
    getIsUtxoSpent(txId, outputIndex) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/outpoint/${txId}/${outputIndex}`;
            let url = this.apiPrefix + path;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'GET',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            return _res.spent;
        });
    }
    getTokenUtxos(codehash, genesis, address, queryParams = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/sensible/ft/address/${address}/utxo`;
            let url = this.apiPrefix + path + `?codehash=${codehash}&genesis=${genesis}`;
            if (queryParams.flag) {
                url += `&=${queryParams.flag}`;
            }
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'GET',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            let ret = _res.map((v) => ({
                txId: v.txid,
                outputIndex: v.txIndex,
                tokenAddress: address,
                tokenAmount: v.valueString,
            }));
            return ret;
        });
    }
    getTokenBalance(codehash, genesis, address) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/sensible/ft/address/${address}/balance`;
            let url = this.apiPrefix + path + `?codehash=${codehash}&genesis=${genesis}`;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'GET',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            let ret = {
                balance: "0",
                pendingBalance: "0",
                utxoCount: 0,
                decimal: 0,
            };
            if (_res.length > 0) {
                ret = {
                    balance: _res[0].confirmedString,
                    pendingBalance: _res[0].unconfirmedString,
                    utxoCount: _res[0].utxoCount,
                    decimal: _res[0].decimal,
                };
            }
            return ret;
        });
    }
    getTokenList(address, queryParams) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/sensible/ft/address/${address}/balance`;
            let url = this.apiPrefix + path;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'GET',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            let ret = _res.map((v) => ({
                codehash: v.codeHash,
                genesis: v.genesis,
                sensibleId: v.sensibleId,
                name: v.name,
                symbol: v.symbol,
                decimal: v.decimal,
                balance: v.confirmedString,
                pendingBalance: v.unconfirmedString,
            }));
            return ret;
        });
    }
    getNftUtxos(codehash, genesis, address, queryParams) {
        return __awaiter(this, void 0, void 0, function* () {
            // /nft/utxo/{codehash}/{genesis}/{address}
            let path = `/sensible/nft/address/${address}/utxo`;
            let url = this.apiPrefix + path + `?codehash=${codehash}&genesis=${genesis}`;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'GET',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            let utxos = _res.map((v) => ({
                txId: v.txid,
                outputIndex: v.txIndex,
                tokenIndex: v.tokenIndex,
                tokenAddress: v.address,
                metaTxId: v.metaTxid,
                metaOutputIndex: v.metaOutputIndex,
            }));
            return utxos;
        });
    }
    getNftUtxo(codehash, genesis, tokenIndex) {
        return __awaiter(this, void 0, void 0, function* () {
            // /nft/utxo-detail/{codehash}/{genesis}/{token_index}
            let path = `/sensible/nft/genesis/${codehash}/${genesis}/utxo`;
            let url = this.apiPrefix + path + `?tokenIndex=${tokenIndex}`;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'GET',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            const utxo = Array.isArray(_res) ? _res[0] : undefined;
            if (!utxo) {
                throw new Error("utxo not found");
            }
            return {
                txId: utxo.txid,
                outputIndex: utxo.txIndex,
                tokenIndex: utxo.tokenIndex,
                tokenAddress: utxo.address,
                metaTxId: utxo.metaTxid,
                metaOutputIndex: utxo.metaOutputIndex,
            };
        });
    }
    getNftAuctionUtxo(codehash, nftid) {
        return __awaiter(this, void 0, void 0, function* () {
            // /nft/auction/utxo-detail/{codehash}/{nftid}
            let path = `/sensible/nft/auction/codeHash/${codehash}/nftId/${nftid}/utxo`;
            let url = this.apiPrefix + path;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'GET',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            let detail = _res[0];
            if (detail) {
                return {
                    txId: detail.txid,
                    outputIndex: detail.txIndex,
                };
            }
        });
    }
    getNftSellUtxo(codehash, genesis, tokenIndex) {
        return __awaiter(this, void 0, void 0, function* () {
            // /nft/sell/utxo
            let path = `/sensible/nft/sell/genesis/${codehash}/${genesis}/utxo`;
            let url = this.apiPrefix + path + `?tokenIndex=${tokenIndex}`;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'GET',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            let detail = _res[0];
            if (detail) {
                return {
                    txId: detail.txid,
                    outputIndex: detail.tokenIndex,
                    sellerAddress: detail.address,
                    satoshisPrice: detail.price
                };
            }
        });
    }
    getNftAddressSellUtxo(address, codeHash = "", genesis = "", flag = "") {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/sensible/nft/sell/address/${address}/utxo`;
            let url = this.apiPrefix + path + `?codeHash=${codeHash}&genesis=${genesis}&flag=${flag}`;
            let _res = yield (0, cross_fetch_1.default)(url, {
                method: 'GET',
                headers: this._getHeaders(path)
            }).then(res => {
                return res.json();
            });
            return _res;
        });
    }
}
exports.MetaSVProvider = MetaSVProvider;
//# sourceMappingURL=metasv-provider.js.map