/// <reference types="node" />
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";
declare function getAxiosInstance(): AxiosInstance;
declare class RequestError extends Error {
    message: string;
    status?: number;
    response?: AxiosResponse;
    constructor(message: string, status?: number, response?: AxiosResponse);
    isApiException: boolean;
}
export declare type Security = any[] | undefined;
export interface SwaggerResponse<R> extends AxiosResponse<R> {
}
export { getAxiosInstance, RequestError };
export declare const Http: {
    getRequest(url: string, queryParams?: any | undefined, _requestBody?: undefined, configOverride?: AxiosRequestConfig): Promise<SwaggerResponse<any>>;
    postRequest(url: string, queryParams?: any | undefined, requestBody?: any | undefined, configOverride?: AxiosRequestConfig): Promise<SwaggerResponse<any>>;
    putRequest(url: string, queryParams?: any | undefined, requestBody?: any | undefined, configOverride?: AxiosRequestConfig): Promise<SwaggerResponse<any>>;
    deleteRequest(url: string, queryParams?: any | undefined, requestBody?: any | undefined, configOverride?: AxiosRequestConfig): Promise<SwaggerResponse<any>>;
};
export declare function gzip(data: Buffer): Promise<Buffer>;
