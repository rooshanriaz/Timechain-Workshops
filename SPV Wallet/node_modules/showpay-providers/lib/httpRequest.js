"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.gzip = exports.Http = exports.RequestError = exports.getAxiosInstance = void 0;
const axios_1 = require("axios/dist/axios");
const qs = require("qs");
const zlib = require("zlib");
const baseConfig = {
    baseURL: "",
    headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
    },
    paramsSerializer: (param) => qs.stringify(param, { indices: false }),
};
let axiosInstance;
function getAxiosInstance() {
    if (!axiosInstance) {
        axiosInstance = axios_1.default.create(baseConfig);
        // Response interceptor
        axiosInstance.interceptors.response.use(((response) => __awaiter(this, void 0, void 0, function* () {
            // Any status code that lie within the range of 2xx cause this function to trigger
            // Do something with response data
            /**
             * Example on response manipulation
             *
             * @example
             *   const swaggerResponse: SwaggerResponse = {
             *     ...response,
             *   };
             *   return swaggerResponse;
             */
            return response;
        })), (error) => {
            // Any status codes that falls outside the range of 2xx cause this function to trigger
            // Do something with response error
            if (error.response) {
                return Promise.reject(new RequestError(error.response.data, error.response.status, error.response));
            }
            if (error.isAxiosError) {
                return Promise.reject(new RequestError("noInternetConnection"));
            }
            return Promise.reject(error);
        });
    }
    return axiosInstance;
}
exports.getAxiosInstance = getAxiosInstance;
class RequestError extends Error {
    constructor(message, status, response) {
        super(message);
        this.message = message;
        this.status = status;
        this.response = response;
        this.isApiException = true;
    }
}
exports.RequestError = RequestError;
/**
 * Cancellation handled here, you can cancel request by call promise.cancel()
 *
 * @example
 *   const promise = getUsers();
 *   setTimeout(() => promise.cancel(), 30000);
 *   const { data } = await promise;
 *
 * @param getPromise
 * @returns
 */
function cancellation(getPromise) {
    const source = axios_1.default.CancelToken.source();
    const promise = getPromise(source.token);
    //@ts-ignore
    promise.cancel = () => {
        source.cancel("request canceled");
    };
    return promise;
}
exports.Http = {
    getRequest(url, queryParams, 
    //@ts-ignore
    _requestBody, configOverride) {
        return cancellation((cancelToken) => getAxiosInstance().get(url, Object.assign({ cancelToken, params: queryParams }, configOverride)));
    },
    postRequest(url, queryParams, requestBody, configOverride) {
        return cancellation((cancelToken) => getAxiosInstance().post(url, requestBody, Object.assign({ cancelToken, params: queryParams }, configOverride)));
    },
    putRequest(url, queryParams, requestBody, configOverride) {
        return cancellation((cancelToken) => getAxiosInstance().put(url, requestBody, Object.assign({ cancelToken, params: queryParams }, configOverride)));
    },
    deleteRequest(url, queryParams, requestBody, configOverride) {
        return cancellation((cancelToken) => getAxiosInstance().delete(url, Object.assign({ data: requestBody, cancelToken, params: queryParams }, configOverride)));
    },
};
function gzip(data) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            zlib.gzip(data, (err, val) => {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(val);
            });
        });
    });
}
exports.gzip = gzip;
//# sourceMappingURL=httpRequest.js.map