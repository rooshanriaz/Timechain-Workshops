function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var dustLimitFactor = 300;
export function getDustThreshold(size) {
  return Math.ceil(Math.ceil(250 * (size + 9 + 148) / 1000) * dustLimitFactor / 100);
}
export function getTransferNeedUtxosAndFee(receivers, utxos, feeb) {
  var minOutputAmount = getDustThreshold(34) + 34 * feeb;
  var needAmount = 0;

  for (var _iterator = _createForOfIteratorHelperLoose(receivers), _step; !(_step = _iterator()).done;) {
    var receiver = _step.value;
    needAmount += receiver.amount;
  }

  var retUtxos = [];
  var retAmount = 0;
  var fee = 0;
  var flag = 0;

  for (var _iterator2 = _createForOfIteratorHelperLoose(utxos), _step2; !(_step2 = _iterator2()).done;) {
    var utxo = _step2.value;
    retAmount += utxo.satoshis;
    retUtxos.push(utxo);
    fee = Math.ceil((retUtxos.length * 148 + receivers.length * 34 + 10) * feeb);
    var remainAmount = retAmount - needAmount - fee;

    if (remainAmount == 0) {
      flag = 1;
      break;
    } else if (remainAmount > 0 && remainAmount < minOutputAmount) {
      flag = 1;
      fee += remainAmount;
      break;
    } else if (remainAmount >= minOutputAmount) {
      flag = 1;
      fee = Math.ceil((retUtxos.length * 148 + (receivers.length + 1) * 34 + 10) * feeb);
      break;
    }
  }

  if (flag == 0) {
    return null;
  }

  return {
    utxos: retUtxos,
    fee: fee
  };
}