import { bsv } from "scryptlib";
import { AuthorizationOption } from "showpay-providers/lib/metasv-provider";
import { MetaSVProvider } from "showpay-providers";
import { Utxo } from "showpay-providers/lib/type/type";
import { Receiver, TransferResp } from "./types";
import { API_NET } from "sensible-sdk";
export default class HdWallet {
    hdPrivateKey: bsv.hdPrivateKey;
    xpriv: string;
    xpub: string;
    rootWallet: bsv.Wallet;
    rootWif: string;
    rootAddress: string;
    provider: MetaSVProvider;
    feeb: number;
    addressWifMap: Map<string, bsv.PrivateKey>;
    network: API_NET;
    metasvAuth: AuthorizationOption;
    constructor(mnemonic: string, network: API_NET, metasvAuth: AuthorizationOption, feeb?: number);
    ftMerge(codehash: string, genesis: string, sensibleId: string): Promise<void>;
    getFtMergeTime(codehash: string, genesis: string, sensibleId: string): Promise<number>;
    ftMergeOne(codehash: string, genesis: string, sensibleId: string): Promise<boolean>;
    transferAll(receiverAddress: string, broadcast: boolean): Promise<TransferResp>;
    transfer(receivers: Receiver[], broadcast?: boolean): Promise<TransferResp>;
    getUtxos(limit?: number): Promise<Utxo[]>;
}
