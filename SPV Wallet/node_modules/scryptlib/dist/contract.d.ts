import { ABICoder, Arguments, FunctionCall, Script } from './abi';
import { State } from './serializer';
import { Struct, ScryptType, TypeResolver } from './scryptTypes';
import { StructEntity, ABIEntity, OpCode, CompileResult, AliasEntity } from './compilerWrapper';
export interface TxContext {
    tx?: any;
    inputIndex?: number;
    inputSatoshis?: number;
    opReturn?: string;
}
export declare type VerifyError = string;
export interface VerifyResult {
    success: boolean;
    error?: VerifyError;
}
export interface ContractDescription {
    version: number;
    compilerVersion: string;
    buildType: string;
    contract: string;
    md5: string;
    structs: Array<StructEntity>;
    alias: Array<AliasEntity>;
    abi: Array<ABIEntity>;
    asm: string;
    file: string;
    sources: Array<string>;
    sourceMap: Array<string>;
}
export declare type AsmVarValues = {
    [key: string]: string;
};
export declare type StepIndex = number;
export declare class AbstractContract {
    static contractName: string;
    static abi: ABIEntity[];
    static asm: string;
    static abiCoder: ABICoder;
    static opcodes?: OpCode[];
    static file: string;
    static structs: StructEntity[];
    static types: Record<string, typeof ScryptType>;
    static asmContract: boolean;
    static staticConst: Record<string, number>;
    scriptedConstructor: FunctionCall;
    calls: Map<string, FunctionCall>;
    asmArgs: AsmVarValues | null;
    get lockingScript(): Script;
    private _txContext?;
    set txContext(txContext: TxContext);
    get txContext(): TxContext;
    replaceAsmVars(asmVarValues: AsmVarValues): void;
    static findSrcInfo(interpretStates: any[], opcodes: OpCode[], stepIndex: number, opcodesIndex: number): OpCode | undefined;
    getTypeClassByType(type: string): typeof ScryptType;
    run_verify(unlockingScriptASM: string, txContext?: TxContext, args?: Arguments): VerifyResult;
    private _dataPart;
    set dataPart(dataInScript: Script | undefined);
    get dataPart(): Script | undefined;
    setDataPart(state: State | string): void;
    get codePart(): Script;
    static getAsmVars(contractAsm: any, instAsm: any): AsmVarValues | null;
    arguments(pubFuncName: string): Arguments;
}
export declare function buildContractClass(desc: CompileResult | ContractDescription): any;
/**
 * @deprecated use buildTypeClasses
 * @param desc CompileResult or ContractDescription
 */
export declare function buildStructsClass(desc: CompileResult | ContractDescription): Record<string, typeof Struct>;
export declare function buildTypeClasses(desc: CompileResult | ContractDescription): Record<string, typeof ScryptType>;
export declare function buildTypeResolver(contract: string, alias: AliasEntity[], structs: StructEntity[], staticConst: Record<string, number>): TypeResolver;
