import { StructEntity } from './compilerWrapper';
export declare type TypeResolver = (type: string) => string;
export declare type ValueType = number | bigint | boolean | string | StructObject;
export declare function toScryptType(a: ValueType): ScryptType;
export declare class ScryptType {
    protected _value: ValueType;
    protected _literal: string;
    protected _asm: string;
    protected _type: string;
    protected _typeResolver: TypeResolver;
    constructor(value: ValueType);
    get value(): ValueType;
    get finalType(): string;
    get literal(): string;
    get type(): string;
    toASM(): string;
    toJSON(): string | unknown;
    toLiteral(): string;
    checkValue(value: ValueType): ValueType;
}
export declare class Int extends ScryptType {
    constructor(intVal: number | bigint | string);
    toLiteral(): string;
    checkValue(value: ValueType): ValueType;
}
export declare class Bool extends ScryptType {
    constructor(boolVal: boolean);
    toLiteral(): string;
}
export declare class Bytes extends ScryptType {
    constructor(bytesVal: string);
    toLiteral(): string;
}
export declare class PrivKey extends ScryptType {
    constructor(intVal: bigint | string);
    toLiteral(): string;
}
export declare class PubKey extends ScryptType {
    constructor(bytesVal: string);
    toLiteral(): string;
}
export declare class Sig extends ScryptType {
    constructor(bytesVal: string);
    toLiteral(): string;
}
export declare class Ripemd160 extends ScryptType {
    constructor(bytesVal: string);
    toLiteral(): string;
}
export declare class Sha1 extends ScryptType {
    constructor(bytesVal: string);
    toLiteral(): string;
}
export declare class Sha256 extends ScryptType {
    constructor(bytesVal: string);
    toLiteral(): string;
}
export declare enum SigHash {
    ALL = 1,
    NONE = 2,
    SINGLE = 3,
    FORKID = 64,
    ANYONECANPAY = 128
}
export declare class SigHashType extends ScryptType {
    constructor(intVal: number);
    toLiteral(): string;
    toString(): string;
}
interface Outpoint {
    hash: string;
    index: number;
    hex: string;
}
export declare class SigHashPreimage extends ScryptType {
    constructor(bytesVal: string);
    private _buf;
    private getReader;
    get nVersion(): number;
    get hashPrevouts(): string;
    get hashSequence(): string;
    get outpoint(): Outpoint;
    get scriptCode(): string;
    get amount(): number;
    get nSequence(): number;
    get hashOutputs(): string;
    get nLocktime(): number;
    get sighashType(): number;
    toString(format?: string): string;
    toLiteral(): string;
    toJSONObject(): {
        nVersion: number;
        hashPrevouts: string;
        hashSequence: string;
        outpoint: Outpoint;
        scriptCode: string;
        amount: number;
        nSequence: number;
        hashOutputs: string;
        nLocktime: number;
        sighashType: string;
    };
}
export declare class OpCodeType extends ScryptType {
    constructor(bytesVal: string);
    toLiteral(): string;
}
export declare type BasicType = ScryptType | boolean | number | bigint | string;
export declare type SingletonParamType = BasicType | BasicType[];
export declare type StructObject = Record<string, SingletonParamType>;
export declare class Struct extends ScryptType {
    sorted: boolean;
    static structAst: StructEntity;
    constructor(o: StructObject);
    protected bind(): void;
    toASM(): string;
    /**
     * @deprecated use  flatternStruct, see toASM
     */
    toArray(): ScryptType[];
    memberByIndex(index: number): string;
    /**
    * @deprecated use  getMemberFinalType
    */
    getMemberType(key: string): string;
    /**
     * Get the real member type of the structure
     */
    getMemberFinalType(key: string): string;
    /**
     * Get the member type declared by the structure by structAst
     */
    getMemberAstFinalType(key: string): string;
    getMembers(): string[];
    memberByKey(key: string): SingletonParamType | undefined;
    static arrayToLiteral(a: Array<ValueType>): string;
    toLiteral(): string;
    toJSON(): unknown;
    static isStruct(arg: SupportedParamType): boolean;
}
export declare type SupportedParamType = SingletonParamType | SingletonParamType[];
export declare enum VariableType {
    BOOL = "bool",
    INT = "int",
    BYTES = "bytes",
    PUBKEY = "PubKey",
    PRIVKEY = "PrivKey",
    SIG = "Sig",
    RIPEMD160 = "Ripemd160",
    SHA1 = "Sha1",
    SHA256 = "Sha256",
    SIGHASHTYPE = "SigHashType",
    SIGHASHPREIMAGE = "SigHashPreimage",
    OPCODETYPE = "OpCodeType",
    STRUCT = "struct"
}
export declare const BasicType: any[];
export declare const BasicScryptType: {
    bool: typeof Bool;
    int: typeof Int;
    bytes: typeof Bytes;
    PubKey: typeof PubKey;
    PrivKey: typeof PrivKey;
    Sig: typeof Sig;
    Ripemd160: typeof Ripemd160;
    Sha1: typeof Sha1;
    Sha256: typeof Sha256;
    SigHashType: typeof SigHashType;
    OpCodeType: typeof OpCodeType;
    SigHashPreimage: typeof SigHashPreimage;
};
export {};
