import { AbstractContract, TxContext, VerifyResult, AsmVarValues } from './contract';
import { SingletonParamType, SupportedParamType, TypeResolver } from './scryptTypes';
import { ABIEntity, ParamEntity } from './compilerWrapper';
export interface Script {
    toASM(): string;
    toHex(): string;
}
export declare type FileUri = string;
/**
     * Configuration for a debug session.
     */
export interface DebugConfiguration {
    type: 'scrypt';
    request: 'launch';
    internalConsoleOptions: 'openOnSessionStart';
    name: string;
    program: string;
    constructorArgs: SupportedParamType[];
    pubFunc: string;
    pubFuncArgs: SupportedParamType[];
    asmArgs?: AsmVarValues;
    txContext?: any;
}
export interface DebugLaunch {
    version: '0.2.0';
    configurations: DebugConfiguration[];
}
export interface Argument {
    name: string;
    type: string;
    value: SupportedParamType;
}
export declare type Arguments = Argument[];
export declare class FunctionCall {
    methodName: string;
    params: SupportedParamType[];
    readonly contract: AbstractContract;
    readonly args: Arguments;
    private _unlockingScriptAsm?;
    private _lockingScriptAsm?;
    get unlockingScript(): Script | undefined;
    get lockingScript(): Script | undefined;
    init(asmVarValues: AsmVarValues): void;
    constructor(methodName: string, params: SupportedParamType[], binding: {
        contract: AbstractContract;
        lockingScriptASM?: string;
        unlockingScriptASM?: string;
    });
    toASM(): string;
    toString(): string;
    toScript(): Script;
    toHex(): string;
    genLaunchConfigFile(txContext?: TxContext): FileUri;
    verify(txContext?: TxContext): VerifyResult;
}
export declare class ABICoder {
    abi: ABIEntity[];
    finalTypeResolver: TypeResolver;
    constructor(abi: ABIEntity[], finalTypeResolver: TypeResolver);
    encodeConstructorCall(contract: AbstractContract, asmTemplate: string, ...args: SupportedParamType[]): FunctionCall;
    encodeConstructorCallFromASM(contract: AbstractContract, asmTemplate: string, lsASM: string): FunctionCall;
    encodePubFunctionCall(contract: AbstractContract, name: string, args: SupportedParamType[]): FunctionCall;
    encodeParams(args: SupportedParamType[], paramsEntitys: ParamEntity[]): string;
    encodeParamArray(args: SingletonParamType[], arrayParm: ParamEntity): string;
    encodeParam(arg: SupportedParamType, paramEntity: ParamEntity): string;
}
