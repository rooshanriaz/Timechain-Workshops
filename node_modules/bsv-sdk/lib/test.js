"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const sensible_sdk_1 = require("sensible-sdk");
const hd_wallet_1 = __importDefault(require("./hd-wallet"));
const CommonUtils_1 = require("./utils/CommonUtils");
const wallet_1 = __importDefault(require("./wallet"));
const wif = "L5dHUZWhnhYLn33dbKRhHnXr2RHpg7hE8GmcxYjoWnaxmA43vdf5";
const metasvAuth = { privateKey: "KxTz5CPZYb3CasVEYX5cv8YMHBF3EjGdKQKVZPHqrvQYWgNzbfGY" };
const wallet = new wallet_1.default(wif, "mainnet", metasvAuth, 0.5);
const mnemonic = "emerge cricket glow drink inch picture resource tank harsh mammal funny horn";
const hdWallet = new hd_wallet_1.default(mnemonic, sensible_sdk_1.API_NET.MAIN, metasvAuth, 0.5);
function test() {
    return __awaiter(this, void 0, void 0, function* () {
        const receivers = [
            {
                address: "1txLawHqheNC8cH5r16augc8Hrb5c28au",
                amount: 1000
            },
            {
                address: "1txLawHqheNC8cH5r16augc8Hrb5c28au",
                amount: 1000
            }
        ];
        const res = yield hdWallet.getFtMergeTime(CommonUtils_1.FT["MC"].codehash, CommonUtils_1.FT["MC"].genesis, CommonUtils_1.FT["MC"].sensibleId);
        console.log(res);
        const mergeOneRes = yield hdWallet.ftMergeOne(CommonUtils_1.FT["MC"].codehash, CommonUtils_1.FT["MC"].genesis, CommonUtils_1.FT["MC"].sensibleId);
        console.log(mergeOneRes);
    });
}
test();
