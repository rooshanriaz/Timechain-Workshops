"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Http = void 0;
/**
 * AUTO_GENERATED Do not change this file directly, use config.ts file instead
 *
 * @version 5
 */
const axios_1 = __importDefault(require("axios"));
const config_1 = require("./config");
/**
 * Cancellation handled here, you can cancel request by call promise.cancel()
 *
 * @example
 *   const promise = getUsers();
 *   setTimeout(() => promise.cancel(), 30000);
 *   const { data } = await promise;
 *
 * @param getPromise
 * @returns
 */
function cancellation(getPromise) {
    const source = axios_1.default.CancelToken.source();
    const promise = getPromise(source.token);
    //@ts-ignore
    promise.cancel = () => {
        source.cancel("request canceled");
    };
    return promise;
}
exports.Http = {
    getRequest(url, queryParams, 
    //@ts-ignore
    _requestBody, security, configOverride) {
        return cancellation((cancelToken) => (0, config_1.getAxiosInstance)(security).get(url, Object.assign({ cancelToken, params: queryParams }, configOverride)));
    },
    postRequest(url, queryParams, requestBody, security, configOverride) {
        return cancellation((cancelToken) => (0, config_1.getAxiosInstance)(security).post(url, requestBody, Object.assign({ cancelToken, params: queryParams }, configOverride)));
    },
    putRequest(url, queryParams, requestBody, security, configOverride) {
        return cancellation((cancelToken) => (0, config_1.getAxiosInstance)(security).put(url, requestBody, Object.assign({ cancelToken, params: queryParams }, configOverride)));
    },
    deleteRequest(url, queryParams, requestBody, security, configOverride) {
        return cancellation((cancelToken) => (0, config_1.getAxiosInstance)(security).delete(url, Object.assign({ data: requestBody, cancelToken, params: queryParams }, configOverride)));
    },
};
