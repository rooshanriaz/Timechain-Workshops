"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestError = exports.getAxiosInstance = exports.setAuthorization = void 0;
/**
 * You can modify this file
 *
 * @version 5
 */
const axios_1 = __importDefault(require("axios"));
const qs_1 = __importDefault(require("qs"));
const baseConfig = {
    baseURL: "",
    paramsSerializer: (param) => qs_1.default.stringify(param, { indices: false }),
    timeout: 60 * 1000,
};
if (typeof globalThis.window == "undefined") {
    baseConfig.headers = {
        //request is gzip
        // "Content-Encoding": "gzip",
        //request is json
        "Content-Type": "application/json-patch+json",
        //response is gzip
        // "Accept-Encoding": "gzip, deflate, br",
        //response is json
        Accept: "application/json",
    };
}
let axiosInstance;
const auth = {
    authorization: "",
};
function getAxiosInstance(security) {
    if (!axiosInstance) {
        axiosInstance = axios_1.default.create(baseConfig);
        // Response interceptor
        axiosInstance.interceptors.response.use(((response) => __awaiter(this, void 0, void 0, function* () {
            // Any status code that lie within the range of 2xx cause this function to trigger
            // Do something with response data
            /**
             * Example on response manipulation
             *
             * @example
             *   const swaggerResponse: SwaggerResponse = {
             *     ...response,
             *   };
             *   return swaggerResponse;
             */
            return response;
        })), (error) => {
            // Any status codes that falls outside the range of 2xx cause this function to trigger
            // Do something with response error
            if (error.response) {
                return Promise.reject(new RequestError(error.response.data, error.response.status, error.response));
            }
            if (error.isAxiosError) {
                return Promise.reject(new RequestError("noInternetConnection"));
            }
            return Promise.reject(error);
        });
        // ًًRequest interceptor
        axiosInstance.interceptors.request.use((requestConfig) => __awaiter(this, void 0, void 0, function* () {
            // Do something before request is sent
            /** Example on how to add authorization based on security */
            if (auth.authorization) {
                requestConfig.headers.authorization = auth.authorization;
            }
            return requestConfig;
        }), (error) => {
            // Do something with request error
            return Promise.reject(error);
        });
    }
    return axiosInstance;
}
exports.getAxiosInstance = getAxiosInstance;
const setAuthorization = (authorization) => {
    auth.authorization = authorization;
};
exports.setAuthorization = setAuthorization;
class RequestError extends Error {
    constructor(message, status, response) {
        super((response && response.config ? response.config.url : "") + message);
        this.message = message;
        this.status = status;
        this.response = response;
        this.isApiException = true;
    }
}
exports.RequestError = RequestError;
