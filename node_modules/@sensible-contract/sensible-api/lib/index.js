"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SensibleApi = void 0;
const config_1 = require("./sensiblequery/config");
const services_1 = require("./sensiblequery/services");
class SensibleApi {
    constructor(apiPrefix = "https://api-v2.sensiblequery.com") {
        this.axios = (0, config_1.getAxiosInstance)([]);
        this.axios.defaults.baseURL = apiPrefix;
    }
    authorize(options) {
        const { authorization } = options;
        if (authorization) {
            if (authorization.indexOf("Bearer") != 0) {
                (0, config_1.setAuthorization)(`Bearer ${authorization}`);
            }
            else {
                (0, config_1.setAuthorization)(authorization);
            }
        }
    }
    getBalance(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getAddressAddressBalance)(address);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            const data = _res.data.data;
            return {
                balance: data.satoshi,
                pendingBalance: data.pendingSatoshi,
                utxoCount: data.utxoCount,
            };
        });
    }
    getUtxos(address, queryParams = { cursor: 0, size: 100 }) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getAddressAddressUtxo)(address, queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            const utxos = [];
            _res.data.data.forEach((v) => {
                utxos.push({
                    txId: v.txid,
                    outputIndex: v.vout,
                    satoshis: v.satoshi,
                    address: address,
                });
            });
            return utxos;
        });
    }
    /**
     * Use getRawTx instead
     * @deprecated
     * @returns
     */
    getRawTxData(txid) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getRawtxTxid)(txid);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    broadcast(txHex) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.postPushtx)({ txHex });
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    getTokenUtxos(codehash, genesis, address, queryParams = { cursor: 0, size: 100 }) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getFtUtxoCodehashGenesisAddress)(codehash, genesis, address, queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            const data = _res.data.data;
            return data.map((v) => ({
                txId: v.txid,
                outputIndex: v.vout,
                tokenAmount: v.tokenAmount,
                tokenAddress: v.address,
            }));
        });
    }
    getTokenBalance(codehash, genesis, address) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getFtBalanceCodehashGenesisAddress)(codehash, genesis, address);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            const data = _res.data.data;
            return {
                balance: data.balance.toString(),
                pendingBalance: data.pendingBalance.toString(),
                utxoCount: data.utxoCount,
                decimal: data.decimal,
            };
        });
    }
    getTokenList(address, queryParams = { cursor: 0, size: 20 }) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getFtSummaryDataAddress)(address, queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            const data = _res.data.data;
            return {
                cursor: data.cursor,
                total: data.total,
                list: data.token.map((v) => ({
                    codehash: v.codehash,
                    genesis: v.genesis,
                    sensibleId: v.sensibleId,
                    name: v.name,
                    symbol: v.symbol,
                    decimal: v.decimal,
                    balance: v.balance.toString(),
                    pendingBalance: v.pendingBalance.toString(),
                })),
            };
        });
    }
    getNftUtxos(codehash, genesis, address, queryParams = { cursor: 0, size: 100 }) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getNftUtxoCodehashGenesisAddress)(codehash, genesis, address, queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            const data = _res.data.data;
            return data.map((v) => ({
                txId: v.txid,
                outputIndex: v.vout,
                tokenIndex: v.tokenIndex,
                tokenAddress: v.address,
            }));
        });
    }
    getNftDetail(codehash, genesis, address, queryParams = { cursor: 0, size: 20 }) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getNftDetailCodehashGenesisAddress)(codehash, genesis, address, queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    //default
    getBlockChainInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getBlockchainInfo)();
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    getMempool() {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getHeightHeightBlockTxs)(4294967295, {
                cursor: 0,
                size: 100000,
            });
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data.map((v) => v.txid);
        });
    }
    getMempoolInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getMempoolInfo)();
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    pushTx(txHex) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.postPushtx)({ txHex });
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    pushTxs(txHexs) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.postPushtxs)({ txsHex: txHexs });
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    //address
    getAddressBalance(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getAddressAddressBalance)(address);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    getAddressUtxos(address, queryParams = { cursor: 0, size: 100 }) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getAddressAddressUtxo)(address, queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    getAddressUtxoDatas(address, queryParams = { cursor: 0, size: 100 }) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getAddressAddressUtxoData)(address, queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    //block
    getBlockInfo(blockId) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getBlockIdBlkid)(blockId);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    getBlocks(queryParams) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getBlocks)(queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    getBlockInfoByHeight(height) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getHeightHeightBlock)(height);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    //tx
    getTxsByBlockId(blockId, queryParams = { cursor: 0, size: 100 }) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getBlockTxsBlkid)(blockId, queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    getTxsByHeight(height, queryParams = { cursor: 0, size: 100 }) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getHeightHeightBlockTxs)(height, queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    getRawTxInHeight(txid, height) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getHeightHeightRawtxTxid)(height, txid);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    getTxInHeight(txid, height) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getHeightHeightTxTxid)(height, txid);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    getTxIns(txid, queryParams = { cursor: 0, size: 100 }) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getTxTxidIns)(txid, queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    getTxInsByHeight(txid, height, queryParams = { cursor: 0, size: 100 }) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getHeightHeightTxTxidIns)(height, txid, queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    getRawTx(txid) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getRawtxTxid)(txid);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    getTx(txid) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getTxTxid)(txid);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    //unique
    //查询Swap合约在区块中的聚合Amount数据，以合约CodeHash+GenesisID来确认一种Swap
    getSwapAggregateAmount(codehash, genesis, queryParams) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getContractSwapAggregateAmountCodehashGenesis)(codehash, genesis, queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    //查询Swap合约在区块中的聚合价格数据，以合约CodeHash+GenesisID来确认一种Swap
    getSwapAggregate(codehash, genesis, queryParams) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getContractSwapAggregateCodehashGenesis)(codehash, genesis, queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    //查询Swap合约在区块中的每次交易数据，以合约CodeHash+GenesisID来确认一种Swap
    getSwapDatas(codehash, genesis, queryParams) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getContractSwapDataCodehashGenesis)(codehash, genesis, queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    //ft
    //查询某人持有的某FT Token的余额，同时返回UTXO数量
    getFtBalance(codehash, genesis, address) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getFtBalanceCodehashGenesisAddress)(codehash, genesis, address);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    //查询使用某codehash的FT Token简述
    getFtCodehashInfo(codehash) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getFtCodehashInfoCodehash)(codehash);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    //查询所有FT codehash简述
    getFtCodehashInfos() {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getFtCodehashAll)();
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    //查询使用某codehash+genesis的FT Token简述
    getFtGenesisInfo(codehash, genesis) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getFtGenesisInfoCodehashGenesis)(codehash, genesis);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    //通过FT合约CodeHash+溯源genesis获取地址相关tx历史列表，返回详细输入/输出
    getFtHistory(codehash, genesis, address, queryParams) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getFtHistoryCodehashGenesisAddress)(codehash, genesis, address, queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    //查询所有FT Token简述
    getFtInfos() {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getFtInfoAll)();
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    getFtOwners(codehash, genesis, queryParams = { cursor: 0, size: 100 }) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getFtOwnersCodehashGenesis)(codehash, genesis, queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    getFtSummaryData(address, queryParams = { cursor: 0, size: 100 }) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getFtSummaryDataAddress)(address, queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    getTxOutSpent(txid, index) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getTxTxidOutIndexSpent)(txid, index);
            if (_res.data.code != 0) {
                return null;
                // throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    getTxOuts(txid, queryParams = { cursor: 0, size: 20 }) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getTxTxidOuts)(txid, queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    getTxOutsByHeight(txid, height, queryParams = { cursor: 0, size: 100 }) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getHeightHeightTxTxidOuts)(height, txid, queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    getTxOut(txid, outIndex) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getTxTxidOutIndex)(txid, outIndex);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    /**
     * 通过地址address获取相关tx历史列表，返回tx概要
     * @param address
     * @param queryParams
     * @returns
     */
    getAddressTxHistory(address, queryParams = { cursor: 0, size: 20, start: 0, end: 0 }) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getAddressAddressHistoryTx)(address, queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    /**
     * 通过地址address获取相关tx历史列表，返回详细输入/输出
     * @param address
     * @param queryParams
     * @returns
     */
    getAddressTxInsOutsHistory(address, queryParams = { cursor: 0, size: 20, start: 0, end: 0 }) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getAddressAddressHistory)(address, queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    //查询使用某codehash+genesis的NFT Token简述
    getNftGenesisInfo(codehash, genesis) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getNftGenesisInfoCodehashGenesis)(codehash, genesis);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    //通过NFT合约CodeHash+溯源genesis获取地址相关tx历史列表，返回详细输入/输出
    getNftHistory(codehash, genesis, address, queryParams = { cursor: 0, size: 20, start: 0, end: 0 }) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getNftHistoryCodehashGenesisAddress)(codehash, genesis, address, queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    //查询所有NFT Token简述
    getNftInfoAll() {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getNftInfoAll)();
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    getNftOwners(codehash, genesis, queryParams = { cursor: 0, size: 20 }) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getNftOwnersCodehashGenesis)(codehash, genesis, queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    getNftSellAllUtxos(queryParams = { cursor: 0, size: 20 }) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getNftSellUtxo)(queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    getNftSellUtxoByAddress(address, queryParams = { cursor: 0, size: 20 }) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getNftSellUtxoByAddressAddress)(address, queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    getNftSellUtxoDetail(codehash, genesis, tokenIndex, queryParams) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getNftSellUtxoDetailCodehashGenesisToken_index)(codehash, genesis, tokenIndex, queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    getNftSellUtxos(codehash, genesis, queryParams = { cursor: 0, size: 20 }) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getNftSellUtxoCodehashGenesis)(codehash, genesis, queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    getNftSummary(address, queryParams = { cursor: 0, size: 20 }) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getNftSummaryAddress)(address, queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    getNftTransferTimes(codehash, genesis, tokenIndex, queryParams) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getNftTransferTimesCodehashGenesisTokenid)(codehash, genesis, tokenIndex, queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    getNftUtxoDatas(codehash, genesis, address, queryParams = { cursor: 0, size: 20 }) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getNftUtxoDataCodehashGenesisAddress)(codehash, genesis, address, queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    getNftUtxoDetail(codehash, genesis, tokenIndex) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getNftUtxoDetailCodehashGenesisToken_index)(codehash, genesis, tokenIndex);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    getNftUtxoList(codehash, genesis, queryParams = { cursor: 0, size: 20 }) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getNftUtxoListCodehashGenesis)(codehash, genesis, queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    getNftAuctionUtxoDetails(codehash, nftid, ready = true) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getNftAuctionUtxoDetailCodehashNftid)(codehash, nftid, {
                ready,
            });
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
    getContractHistory(codehash, genesis, queryParams) {
        return __awaiter(this, void 0, void 0, function* () {
            const _res = yield (0, services_1.getContractHistoryCodehashGenesis)(codehash, genesis, queryParams);
            if (_res.data.code != 0) {
                throw new Error(_res.data.msg);
            }
            return _res.data.data;
        });
    }
}
exports.SensibleApi = SensibleApi;
