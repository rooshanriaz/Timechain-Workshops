import { API_NET, API_TARGET, AuthorizationOption, FungibleTokenBalance, FungibleTokenSummary, FungibleTokenUnspent, NonFungibleTokenSummary, NonFungibleTokenUnspent, SensibleApiBase } from "./index";
export declare class Sensible implements SensibleApiBase {
    serverBase: string;
    constructor(apiTarget: API_TARGET, apiNet: API_NET, serverBase?: string);
    authorize(options: AuthorizationOption): void;
    /**
     * @param {string} address
     */
    getUnspents(address: string): Promise<{
        txId: string;
        outputIndex: number;
        satoshis: number;
        address: string;
    }[]>;
    /**
     * @param {string} hex
     */
    broadcast(txHex: string, apiTarget?: string): Promise<string>;
    /**
     * @param {string} txid
     */
    getRawTxData(txid: string): Promise<string>;
    /**
     * 通过FT合约CodeHash+溯源genesis获取某地址的utxo列表
     */
    getFungibleTokenUnspents(codehash: string, genesis: string, address: string, size?: number): Promise<FungibleTokenUnspent[]>;
    /**
     * 查询某人持有的某FT的余额
     */
    getFungibleTokenBalance(codehash: string, genesis: string, address: string): Promise<FungibleTokenBalance>;
    /**
     * 通过NFT合约CodeHash+溯源genesis获取某地址的utxo列表
     */
    getNonFungibleTokenUnspents(codehash: string, genesis: string, address: string, cursor?: number, size?: number): Promise<NonFungibleTokenUnspent[]>;
    /**
     * 查询某人持有的某FT的UTXO
     */
    getNonFungibleTokenUnspentDetail(codehash: string, genesis: string, tokenIndex: string): Promise<{
        txId: any;
        outputIndex: any;
        tokenAddress: any;
        tokenIndex: any;
        metaTxId: any;
        metaOutputIndex: any;
    }>;
    /**
     * 查询某人持有的FT Token列表。获得每个token的余额
     */
    getFungibleTokenSummary(address: string): Promise<FungibleTokenSummary[]>;
    /**
     * 查询某人持有的所有NFT Token列表。获得持有的nft数量计数
     * @param {String} address
     * @returns
     */
    getNonFungibleTokenSummary(address: string): Promise<NonFungibleTokenSummary[]>;
    getBalance(address: string): Promise<{
        balance: any;
        pendingBalance: any;
    }>;
    getNftSellUtxo(codehash: string, genesis: string, tokenIndex: string): Promise<any>;
    getNftSellList(codehash: string, genesis: string, cursor?: number, size?: number): Promise<any>;
    getNftSellListByAddress(address: string, cursor?: number, size?: number): Promise<any>;
    getOutpointSpent(txId: string, index: number): Promise<{
        spentTxId: any;
        spentInputIndex: any;
    }>;
}
