"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SensibleApi = exports.API_TARGET = exports.API_NET = void 0;
const MetaSV_1 = require("./MetaSV");
const Sensible_1 = require("./Sensible");
var API_NET;
(function (API_NET) {
    API_NET["MAIN"] = "mainnet";
    API_NET["TEST"] = "testnet";
})(API_NET = exports.API_NET || (exports.API_NET = {}));
var API_TARGET;
(function (API_TARGET) {
    API_TARGET["SENSIBLE"] = "sensible";
    API_TARGET["METASV"] = "metasv";
    API_TARGET["SHOW"] = "show";
})(API_TARGET = exports.API_TARGET || (exports.API_TARGET = {}));
class SensibleApi {
    constructor(apiNet, apiTarget = API_TARGET.SENSIBLE, serverBase) {
        switch (apiTarget) {
            case API_TARGET.METASV: {
                this.apiHandler = new MetaSV_1.MetaSV(apiNet, serverBase);
                break;
            }
            default: {
                this.apiHandler = new Sensible_1.Sensible(apiTarget, apiNet, serverBase);
                break;
            }
        }
    }
    /**
     * Authorization to use MetaSV
     * @param options
     * @returns
     */
    authorize(options) {
        return this.apiHandler.authorize(options);
    }
    getUnspents(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiHandler.getUnspents(address);
        });
    }
    getBalance(address) {
        return __awaiter(this, void 0, void 0, function* () {
            let _res = yield this.apiHandler.getBalance(address);
            return { balance: _res.balance, pendingBalance: _res.pendingBalance };
        });
    }
    getRawTxData(txid) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiHandler.getRawTxData(txid);
        });
    }
    broadcast(hex) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiHandler.broadcast(hex);
        });
    }
    getFungibleTokenUnspents(codehash, genesis, address, size) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiHandler.getFungibleTokenUnspents(codehash, genesis, address, size);
        });
    }
    getFungibleTokenBalance(codehash, genesis, address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiHandler.getFungibleTokenBalance(codehash, genesis, address);
        });
    }
    getFungibleTokenSummary(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiHandler.getFungibleTokenSummary(address);
        });
    }
    getNonFungibleTokenUnspents(codehash, genesis, address, cursor, size) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiHandler.getNonFungibleTokenUnspents(codehash, genesis, address, cursor, size);
        });
    }
    getNonFungibleTokenUnspentDetail(codehash, genesis, tokenIndex) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiHandler.getNonFungibleTokenUnspentDetail(codehash, genesis, tokenIndex);
        });
    }
    getNonFungibleTokenSummary(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiHandler.getNonFungibleTokenSummary(address);
        });
    }
    getNftSellUtxo(codehash, genesis, tokenIndex) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiHandler.getNftSellUtxo(codehash, genesis, tokenIndex);
        });
    }
    getNftSellList(codehash, genesis, cursor, size) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiHandler.getNftSellList(codehash, genesis, cursor, size);
        });
    }
    getNftSellListByAddress(address, cursor, size) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiHandler.getNftSellListByAddress(address, cursor, size);
        });
    }
    getOutpointSpent(txId, index) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiHandler.getOutpointSpent(txId, index);
        });
    }
}
exports.SensibleApi = SensibleApi;
