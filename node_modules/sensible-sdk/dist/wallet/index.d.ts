import * as bsv from "../bsv";
import { API_NET, API_TARGET, SensibleApiBase } from "../sensible-api";
import { TxComposer } from "../tx-composer";
declare type RECEIVER = {
    amount: number;
    address: any;
};
declare type BroadcastOptions = {
    noBroadcast: boolean;
    dump?: boolean;
};
export declare class Wallet {
    privateKey: bsv.PrivateKey;
    address: bsv.Address;
    feeb: number;
    blockChainApi: SensibleApiBase;
    network: API_NET;
    constructor(privwif: string, network: API_NET, feeb: number, apiTarget?: API_TARGET, apiUrl?: string);
    getUnspents(): Promise<import("../sensible-api").SA_utxo[]>;
    getBalance(): Promise<number>;
    send(address: string, amount: number, options?: BroadcastOptions): Promise<TxComposer>;
    sendArray(receivers: RECEIVER[], options?: BroadcastOptions): Promise<TxComposer>;
    merge(options?: BroadcastOptions): Promise<TxComposer>;
    private broadcastTxComposer;
    sendOpReturn(opreturnData: any, options?: BroadcastOptions): Promise<TxComposer>;
}
export {};
