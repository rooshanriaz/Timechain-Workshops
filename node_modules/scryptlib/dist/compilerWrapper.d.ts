import { ContractDescription } from './contract';
export declare enum CompileErrorType {
    SyntaxError = "SyntaxError",
    SemanticError = "SemanticError",
    InternalError = "InternalError",
    Warning = "Warning"
}
export declare enum BuildType {
    Debug = "debug",
    Release = "release"
}
export interface RelatedInformation {
    filePath: string;
    position: [{
        line: number;
        column: number;
    }, {
        line: number;
        column: number;
    }?];
    message: string;
}
export interface CompileErrorBase {
    type: string;
    filePath: string;
    position: [{
        line: number;
        column: number;
    }, {
        line: number;
        column: number;
    }?];
    message: string;
    relatedInformation: RelatedInformation[];
}
export interface SyntaxError extends CompileErrorBase {
    type: CompileErrorType.SyntaxError;
    unexpected: string;
    expecting: string;
}
export interface SemanticError extends CompileErrorBase {
    type: CompileErrorType.SemanticError;
}
export interface InternalError extends CompileErrorBase {
    type: CompileErrorType.InternalError;
}
export interface Warning extends CompileErrorBase {
    type: CompileErrorType.Warning;
}
export declare type CompileError = SyntaxError | SemanticError | InternalError | Warning;
export interface CompileResult {
    asm?: OpCode[];
    ast?: Record<string, unknown>;
    dependencyAsts?: Record<string, unknown>;
    abi?: Array<ABIEntity>;
    errors: CompileError[];
    warnings: Warning[];
    compilerVersion?: string;
    contract?: string;
    md5?: string;
    structs?: Array<StructEntity>;
    alias?: Array<AliasEntity>;
    file?: string;
    buildType?: string;
    autoTypedVars?: AutoTypedVar[];
    staticConst?: Record<string, number>;
}
export declare enum DebugModeTag {
    FuncStart = "F0",
    FuncEnd = "F1",
    LoopStart = "L0"
}
export interface Pos {
    file: string;
    line: number;
    endLine: number;
    column: number;
    endColumn: number;
}
export interface OpCode {
    opcode: string;
    stack?: string[];
    topVars?: string[];
    pos?: Pos;
    debugTag?: DebugModeTag;
}
export interface AutoTypedVar {
    name: string;
    pos: Pos;
    type: string;
}
export interface ABI {
    contract: string;
    abi: Array<ABIEntity>;
}
export declare enum ABIEntityType {
    FUNCTION = "function",
    CONSTRUCTOR = "constructor"
}
export declare type ParamEntity = {
    name: string;
    type: string;
};
export interface ABIEntity {
    type: ABIEntityType;
    name?: string;
    params: Array<ParamEntity>;
    index?: number;
}
export interface StructEntity {
    name: string;
    params: Array<ParamEntity>;
}
export interface AliasEntity {
    name: string;
    type: string;
}
export declare function compile(source: {
    path: string;
    content?: string;
}, settings?: {
    ast?: boolean;
    asm?: boolean;
    debug?: boolean;
    desc?: boolean;
    outputDir?: string;
    outputToFiles?: boolean;
    cwd?: string;
    cmdPrefix?: string;
    cmdArgs?: string;
    buildType?: string;
    timeout?: number;
}): CompileResult;
export declare function compilerVersion(cwd: string): string | undefined;
export declare function getABIDeclaration(astRoot: any, alias: AliasEntity[], staticConstInt: Record<string, number>): ABI;
export declare function getStructDeclaration(astRoot: any, dependencyAsts: any): Array<StructEntity>;
export declare function getAliasDeclaration(astRoot: any, dependencyAsts: any): Array<AliasEntity>;
export declare function getStaticConstIntDeclaration(astRoot: any, dependencyAsts: any): Record<string, number>;
export declare function getPlatformScryptc(): string;
export declare function getDefaultScryptc(): string;
export declare function desc2CompileResult(description: ContractDescription): CompileResult;
