{"C:\\Users\\myland\\code\\scryptlib\\src\\utils.ts":{"path":"C:\\Users\\myland\\code\\scryptlib\\src\\utils.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":1182}},"2":{"start":{"line":4,"column":14},"end":{"line":4,"column":28}},"3":{"start":{"line":5,"column":22},"end":{"line":5,"column":46}},"4":{"start":{"line":6,"column":26},"end":{"line":6,"column":54}},"5":{"start":{"line":7,"column":12},"end":{"line":7,"column":26}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":18}},"7":{"start":{"line":9,"column":14},"end":{"line":9,"column":34}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":22}},"9":{"start":{"line":11,"column":11},"end":{"line":11,"column":24}},"10":{"start":{"line":12,"column":15},"end":{"line":12,"column":30}},"11":{"start":{"line":13,"column":17},"end":{"line":13,"column":36}},"12":{"start":{"line":14,"column":13},"end":{"line":14,"column":26}},"13":{"start":{"line":15,"column":11},"end":{"line":15,"column":24}},"14":{"start":{"line":16,"column":15},"end":{"line":16,"column":37}},"15":{"start":{"line":17,"column":0},"end":{"line":25,"column":88}},"16":{"start":{"line":26,"column":0},"end":{"line":26,"column":102}},"17":{"start":{"line":28,"column":4},"end":{"line":30,"column":5}},"18":{"start":{"line":29,"column":8},"end":{"line":29,"column":25}},"19":{"start":{"line":31,"column":4},"end":{"line":33,"column":5}},"20":{"start":{"line":32,"column":8},"end":{"line":32,"column":26}},"21":{"start":{"line":34,"column":4},"end":{"line":34,"column":63}},"22":{"start":{"line":36,"column":0},"end":{"line":36,"column":28}},"23":{"start":{"line":41,"column":4},"end":{"line":54,"column":5}},"24":{"start":{"line":42,"column":23},"end":{"line":42,"column":92}},"25":{"start":{"line":43,"column":8},"end":{"line":45,"column":9}},"26":{"start":{"line":44,"column":12},"end":{"line":44,"column":32}},"27":{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},"28":{"start":{"line":47,"column":12},"end":{"line":47,"column":31}},"29":{"start":{"line":49,"column":18},"end":{"line":49,"column":51}},"30":{"start":{"line":50,"column":8},"end":{"line":50,"column":33}},"31":{"start":{"line":53,"column":8},"end":{"line":53,"column":66}},"32":{"start":{"line":56,"column":0},"end":{"line":56,"column":26}},"33":{"start":{"line":61,"column":4},"end":{"line":98,"column":5}},"34":{"start":{"line":63,"column":12},"end":{"line":63,"column":22}},"35":{"start":{"line":82,"column":12},"end":{"line":82,"column":52}},"36":{"start":{"line":84,"column":26},"end":{"line":84,"column":52}},"37":{"start":{"line":85,"column":23},"end":{"line":87,"column":14}},"38":{"start":{"line":88,"column":12},"end":{"line":96,"column":13}},"39":{"start":{"line":89,"column":16},"end":{"line":89,"column":37}},"40":{"start":{"line":91,"column":17},"end":{"line":96,"column":13}},"41":{"start":{"line":92,"column":16},"end":{"line":92,"column":45}},"42":{"start":{"line":95,"column":16},"end":{"line":95,"column":37}},"43":{"start":{"line":100,"column":0},"end":{"line":100,"column":26}},"44":{"start":{"line":105,"column":4},"end":{"line":119,"column":5}},"45":{"start":{"line":106,"column":19},"end":{"line":106,"column":88}},"46":{"start":{"line":107,"column":8},"end":{"line":115,"column":9}},"47":{"start":{"line":108,"column":12},"end":{"line":108,"column":33}},"48":{"start":{"line":110,"column":13},"end":{"line":115,"column":9}},"49":{"start":{"line":111,"column":12},"end":{"line":111,"column":41}},"50":{"start":{"line":114,"column":12},"end":{"line":114,"column":33}},"51":{"start":{"line":118,"column":8},"end":{"line":118,"column":66}},"52":{"start":{"line":121,"column":0},"end":{"line":121,"column":30}},"53":{"start":{"line":123,"column":14},"end":{"line":123,"column":30}},"54":{"start":{"line":124,"column":4},"end":{"line":126,"column":5}},"55":{"start":{"line":125,"column":8},"end":{"line":125,"column":24}},"56":{"start":{"line":127,"column":4},"end":{"line":127,"column":15}},"57":{"start":{"line":129,"column":0},"end":{"line":129,"column":36}},"58":{"start":{"line":132,"column":4},"end":{"line":134,"column":5}},"59":{"start":{"line":133,"column":8},"end":{"line":133,"column":68}},"60":{"start":{"line":135,"column":4},"end":{"line":137,"column":5}},"61":{"start":{"line":136,"column":8},"end":{"line":136,"column":66}},"62":{"start":{"line":139,"column":12},"end":{"line":139,"column":40}},"63":{"start":{"line":140,"column":4},"end":{"line":142,"column":5}},"64":{"start":{"line":141,"column":8},"end":{"line":141,"column":80}},"65":{"start":{"line":144,"column":4},"end":{"line":144,"column":28}},"66":{"start":{"line":145,"column":4},"end":{"line":147,"column":5}},"67":{"start":{"line":146,"column":8},"end":{"line":146,"column":80}},"68":{"start":{"line":150,"column":4},"end":{"line":150,"column":37}},"69":{"start":{"line":151,"column":4},"end":{"line":164,"column":5}},"70":{"start":{"line":152,"column":26},"end":{"line":152,"column":53}},"71":{"start":{"line":153,"column":8},"end":{"line":155,"column":9}},"72":{"start":{"line":154,"column":12},"end":{"line":154,"column":73}},"73":{"start":{"line":156,"column":8},"end":{"line":158,"column":9}},"74":{"start":{"line":157,"column":12},"end":{"line":157,"column":76}},"75":{"start":{"line":159,"column":25},"end":{"line":159,"column":48}},"76":{"start":{"line":160,"column":8},"end":{"line":162,"column":9}},"77":{"start":{"line":161,"column":12},"end":{"line":161,"column":83}},"78":{"start":{"line":163,"column":8},"end":{"line":163,"column":72}},"79":{"start":{"line":167,"column":4},"end":{"line":167,"column":39}},"80":{"start":{"line":168,"column":4},"end":{"line":170,"column":5}},"81":{"start":{"line":169,"column":8},"end":{"line":169,"column":84}},"82":{"start":{"line":172,"column":4},"end":{"line":172,"column":48}},"83":{"start":{"line":173,"column":4},"end":{"line":175,"column":5}},"84":{"start":{"line":174,"column":8},"end":{"line":174,"column":84}},"85":{"start":{"line":177,"column":4},"end":{"line":177,"column":47}},"86":{"start":{"line":178,"column":4},"end":{"line":181,"column":5}},"87":{"start":{"line":179,"column":22},"end":{"line":179,"column":49}},"88":{"start":{"line":180,"column":8},"end":{"line":180,"column":65}},"89":{"start":{"line":183,"column":4},"end":{"line":183,"column":44}},"90":{"start":{"line":184,"column":4},"end":{"line":187,"column":5}},"91":{"start":{"line":185,"column":22},"end":{"line":185,"column":49}},"92":{"start":{"line":186,"column":8},"end":{"line":186,"column":62}},"93":{"start":{"line":189,"column":4},"end":{"line":189,"column":50}},"94":{"start":{"line":190,"column":4},"end":{"line":193,"column":5}},"95":{"start":{"line":191,"column":22},"end":{"line":191,"column":49}},"96":{"start":{"line":192,"column":8},"end":{"line":192,"column":68}},"97":{"start":{"line":195,"column":4},"end":{"line":195,"column":45}},"98":{"start":{"line":196,"column":4},"end":{"line":199,"column":5}},"99":{"start":{"line":197,"column":22},"end":{"line":197,"column":49}},"100":{"start":{"line":198,"column":8},"end":{"line":198,"column":63}},"101":{"start":{"line":201,"column":4},"end":{"line":201,"column":47}},"102":{"start":{"line":202,"column":4},"end":{"line":205,"column":5}},"103":{"start":{"line":203,"column":22},"end":{"line":203,"column":49}},"104":{"start":{"line":204,"column":8},"end":{"line":204,"column":65}},"105":{"start":{"line":207,"column":4},"end":{"line":207,"column":52}},"106":{"start":{"line":208,"column":4},"end":{"line":211,"column":5}},"107":{"start":{"line":209,"column":19},"end":{"line":209,"column":58}},"108":{"start":{"line":210,"column":8},"end":{"line":210,"column":94}},"109":{"start":{"line":213,"column":4},"end":{"line":213,"column":56}},"110":{"start":{"line":214,"column":4},"end":{"line":217,"column":5}},"111":{"start":{"line":215,"column":22},"end":{"line":215,"column":49}},"112":{"start":{"line":216,"column":8},"end":{"line":216,"column":74}},"113":{"start":{"line":219,"column":4},"end":{"line":219,"column":51}},"114":{"start":{"line":220,"column":4},"end":{"line":223,"column":5}},"115":{"start":{"line":221,"column":22},"end":{"line":221,"column":49}},"116":{"start":{"line":222,"column":8},"end":{"line":222,"column":69}},"117":{"start":{"line":225,"column":4},"end":{"line":225,"column":43}},"118":{"start":{"line":226,"column":4},"end":{"line":229,"column":5}},"119":{"start":{"line":228,"column":8},"end":{"line":228,"column":59}},"120":{"start":{"line":230,"column":4},"end":{"line":230,"column":95}},"121":{"start":{"line":232,"column":0},"end":{"line":232,"column":36}},"122":{"start":{"line":237,"column":31},"end":{"line":237,"column":46}},"123":{"start":{"line":238,"column":4},"end":{"line":265,"column":5}},"124":{"start":{"line":240,"column":12},"end":{"line":240,"column":49}},"125":{"start":{"line":242,"column":12},"end":{"line":242,"column":48}},"126":{"start":{"line":244,"column":12},"end":{"line":244,"column":50}},"127":{"start":{"line":246,"column":12},"end":{"line":246,"column":52}},"128":{"start":{"line":248,"column":12},"end":{"line":248,"column":51}},"129":{"start":{"line":250,"column":12},"end":{"line":250,"column":48}},"130":{"start":{"line":252,"column":12},"end":{"line":252,"column":54}},"131":{"start":{"line":254,"column":12},"end":{"line":254,"column":49}},"132":{"start":{"line":256,"column":12},"end":{"line":256,"column":51}},"133":{"start":{"line":258,"column":12},"end":{"line":258,"column":56}},"134":{"start":{"line":260,"column":12},"end":{"line":260,"column":60}},"135":{"start":{"line":262,"column":12},"end":{"line":262,"column":55}},"136":{"start":{"line":264,"column":12},"end":{"line":264,"column":103}},"137":{"start":{"line":267,"column":0},"end":{"line":267,"column":48}},"138":{"start":{"line":269,"column":4},"end":{"line":296,"column":5}},"139":{"start":{"line":271,"column":12},"end":{"line":271,"column":81}},"140":{"start":{"line":273,"column":12},"end":{"line":273,"column":55}},"141":{"start":{"line":275,"column":12},"end":{"line":275,"column":48}},"142":{"start":{"line":277,"column":12},"end":{"line":277,"column":59}},"143":{"start":{"line":279,"column":12},"end":{"line":279,"column":49}},"144":{"start":{"line":281,"column":12},"end":{"line":281,"column":46}},"145":{"start":{"line":283,"column":12},"end":{"line":283,"column":52}},"146":{"start":{"line":285,"column":12},"end":{"line":285,"column":47}},"147":{"start":{"line":287,"column":12},"end":{"line":287,"column":49}},"148":{"start":{"line":289,"column":12},"end":{"line":289,"column":63}},"149":{"start":{"line":291,"column":12},"end":{"line":291,"column":58}},"150":{"start":{"line":293,"column":12},"end":{"line":293,"column":53}},"151":{"start":{"line":295,"column":12},"end":{"line":295,"column":106}},"152":{"start":{"line":298,"column":0},"end":{"line":298,"column":40}},"153":{"start":{"line":300,"column":4},"end":{"line":310,"column":5}},"154":{"start":{"line":302,"column":12},"end":{"line":302,"column":89}},"155":{"start":{"line":305,"column":12},"end":{"line":305,"column":73}},"156":{"start":{"line":307,"column":12},"end":{"line":307,"column":55}},"157":{"start":{"line":309,"column":12},"end":{"line":309,"column":55}},"158":{"start":{"line":312,"column":0},"end":{"line":312,"column":38}},"159":{"start":{"line":314,"column":4},"end":{"line":314,"column":108}},"160":{"start":{"line":314,"column":46},"end":{"line":314,"column":100}},"161":{"start":{"line":316,"column":0},"end":{"line":316,"column":44}},"162":{"start":{"line":318,"column":4},"end":{"line":318,"column":31}},"163":{"start":{"line":319,"column":4},"end":{"line":329,"column":35}},"164":{"start":{"line":321,"column":8},"end":{"line":326,"column":9}},"165":{"start":{"line":322,"column":12},"end":{"line":322,"column":22}},"166":{"start":{"line":325,"column":12},"end":{"line":325,"column":33}},"167":{"start":{"line":327,"column":8},"end":{"line":327,"column":17}},"168":{"start":{"line":329,"column":18},"end":{"line":329,"column":33}},"169":{"start":{"line":331,"column":0},"end":{"line":331,"column":44}},"170":{"start":{"line":333,"column":16},"end":{"line":333,"column":26}},"171":{"start":{"line":334,"column":4},"end":{"line":336,"column":5}},"172":{"start":{"line":335,"column":8},"end":{"line":335,"column":50}},"173":{"start":{"line":337,"column":4},"end":{"line":339,"column":5}},"174":{"start":{"line":338,"column":8},"end":{"line":338,"column":58}},"175":{"start":{"line":340,"column":4},"end":{"line":342,"column":5}},"176":{"start":{"line":341,"column":8},"end":{"line":341,"column":83}},"177":{"start":{"line":343,"column":4},"end":{"line":343,"column":15}},"178":{"start":{"line":345,"column":0},"end":{"line":345,"column":54}},"179":{"start":{"line":347,"column":4},"end":{"line":349,"column":5}},"180":{"start":{"line":348,"column":8},"end":{"line":348,"column":53}},"181":{"start":{"line":350,"column":4},"end":{"line":352,"column":5}},"182":{"start":{"line":351,"column":8},"end":{"line":351,"column":61}},"183":{"start":{"line":353,"column":4},"end":{"line":355,"column":5}},"184":{"start":{"line":354,"column":8},"end":{"line":354,"column":67}},"185":{"start":{"line":356,"column":4},"end":{"line":358,"column":5}},"186":{"start":{"line":357,"column":8},"end":{"line":357,"column":62}},"187":{"start":{"line":359,"column":4},"end":{"line":359,"column":171}},"188":{"start":{"line":361,"column":0},"end":{"line":361,"column":24}},"189":{"start":{"line":363,"column":4},"end":{"line":363,"column":29}},"190":{"start":{"line":365,"column":0},"end":{"line":365,"column":22}},"191":{"start":{"line":367,"column":24},"end":{"line":367,"column":174}},"192":{"start":{"line":368,"column":4},"end":{"line":368,"column":74}},"193":{"start":{"line":370,"column":0},"end":{"line":370,"column":34}},"194":{"start":{"line":376,"column":16},"end":{"line":376,"column":25}},"195":{"start":{"line":377,"column":4},"end":{"line":379,"column":5}},"196":{"start":{"line":378,"column":8},"end":{"line":378,"column":36}},"197":{"start":{"line":380,"column":14},"end":{"line":380,"column":60}},"198":{"start":{"line":381,"column":21},"end":{"line":381,"column":33}},"199":{"start":{"line":382,"column":4},"end":{"line":384,"column":5}},"200":{"start":{"line":383,"column":8},"end":{"line":383,"column":65}},"201":{"start":{"line":385,"column":4},"end":{"line":387,"column":5}},"202":{"start":{"line":386,"column":8},"end":{"line":386,"column":17}},"203":{"start":{"line":388,"column":23},"end":{"line":388,"column":41}},"204":{"start":{"line":389,"column":21},"end":{"line":389,"column":46}},"205":{"start":{"line":390,"column":17},"end":{"line":390,"column":45}},"206":{"start":{"line":391,"column":12},"end":{"line":391,"column":34}},"207":{"start":{"line":392,"column":4},"end":{"line":395,"column":5}},"208":{"start":{"line":394,"column":8},"end":{"line":394,"column":18}},"209":{"start":{"line":396,"column":15},"end":{"line":396,"column":29}},"210":{"start":{"line":397,"column":4},"end":{"line":399,"column":5}},"211":{"start":{"line":398,"column":8},"end":{"line":398,"column":26}},"212":{"start":{"line":400,"column":20},"end":{"line":400,"column":88}},"213":{"start":{"line":401,"column":4},"end":{"line":401,"column":33}},"214":{"start":{"line":403,"column":0},"end":{"line":403,"column":26}},"215":{"start":{"line":406,"column":16},"end":{"line":406,"column":33}},"216":{"start":{"line":407,"column":21},"end":{"line":407,"column":50}},"217":{"start":{"line":408,"column":17},"end":{"line":408,"column":49}},"218":{"start":{"line":409,"column":14},"end":{"line":409,"column":36}},"219":{"start":{"line":410,"column":14},"end":{"line":410,"column":22}},"220":{"start":{"line":411,"column":15},"end":{"line":411,"column":29}},"221":{"start":{"line":412,"column":4},"end":{"line":414,"column":5}},"222":{"start":{"line":413,"column":8},"end":{"line":413,"column":26}},"223":{"start":{"line":416,"column":13},"end":{"line":416,"column":58}},"224":{"start":{"line":417,"column":4},"end":{"line":419,"column":5}},"225":{"start":{"line":418,"column":8},"end":{"line":418,"column":22}},"226":{"start":{"line":420,"column":4},"end":{"line":428,"column":5}},"227":{"start":{"line":421,"column":8},"end":{"line":421,"column":26}},"228":{"start":{"line":423,"column":9},"end":{"line":428,"column":5}},"229":{"start":{"line":424,"column":8},"end":{"line":424,"column":29}},"230":{"start":{"line":427,"column":8},"end":{"line":427,"column":29}},"231":{"start":{"line":430,"column":0},"end":{"line":430,"column":26}},"232":{"start":{"line":432,"column":4},"end":{"line":432,"column":72}},"233":{"start":{"line":434,"column":0},"end":{"line":434,"column":24}},"234":{"start":{"line":436,"column":4},"end":{"line":441,"column":5}},"235":{"start":{"line":437,"column":8},"end":{"line":437,"column":52}},"236":{"start":{"line":440,"column":8},"end":{"line":440,"column":20}},"237":{"start":{"line":443,"column":0},"end":{"line":443,"column":28}},"238":{"start":{"line":445,"column":4},"end":{"line":450,"column":5}},"239":{"start":{"line":446,"column":8},"end":{"line":446,"column":40}},"240":{"start":{"line":449,"column":8},"end":{"line":449,"column":19}},"241":{"start":{"line":452,"column":0},"end":{"line":452,"column":28}},"242":{"start":{"line":458,"column":27},"end":{"line":458,"column":42}},"243":{"start":{"line":459,"column":4},"end":{"line":459,"column":23}},"244":{"start":{"line":461,"column":0},"end":{"line":461,"column":34}},"245":{"start":{"line":463,"column":4},"end":{"line":465,"column":7}},"246":{"start":{"line":464,"column":8},"end":{"line":464,"column":30}},"247":{"start":{"line":467,"column":0},"end":{"line":467,"column":44}},"248":{"start":{"line":469,"column":4},"end":{"line":469,"column":46}},"249":{"start":{"line":471,"column":0},"end":{"line":471,"column":36}},"250":{"start":{"line":474,"column":4},"end":{"line":474,"column":52}},"251":{"start":{"line":476,"column":0},"end":{"line":476,"column":34}},"252":{"start":{"line":478,"column":14},"end":{"line":478,"column":55}},"253":{"start":{"line":479,"column":4},"end":{"line":481,"column":5}},"254":{"start":{"line":480,"column":8},"end":{"line":480,"column":20}},"255":{"start":{"line":482,"column":4},"end":{"line":482,"column":14}},"256":{"start":{"line":484,"column":0},"end":{"line":484,"column":50}},"257":{"start":{"line":486,"column":17},"end":{"line":486,"column":42}},"258":{"start":{"line":487,"column":4},"end":{"line":489,"column":5}},"259":{"start":{"line":488,"column":8},"end":{"line":488,"column":41}},"260":{"start":{"line":490,"column":4},"end":{"line":490,"column":21}},"261":{"start":{"line":492,"column":0},"end":{"line":492,"column":44}},"262":{"start":{"line":494,"column":4},"end":{"line":517,"column":7}},"263":{"start":{"line":495,"column":23},"end":{"line":495,"column":46}},"264":{"start":{"line":496,"column":26},"end":{"line":496,"column":43}},"265":{"start":{"line":497,"column":31},"end":{"line":497,"column":51}},"266":{"start":{"line":498,"column":8},"end":{"line":516,"column":9}},"267":{"start":{"line":499,"column":12},"end":{"line":499,"column":90}},"268":{"start":{"line":501,"column":13},"end":{"line":516,"column":9}},"269":{"start":{"line":502,"column":12},"end":{"line":515,"column":13}},"270":{"start":{"line":503,"column":50},"end":{"line":503,"column":82}},"271":{"start":{"line":504,"column":16},"end":{"line":511,"column":17}},"272":{"start":{"line":505,"column":20},"end":{"line":507,"column":21}},"273":{"start":{"line":506,"column":24},"end":{"line":506,"column":124}},"274":{"start":{"line":510,"column":20},"end":{"line":510,"column":103}},"275":{"start":{"line":514,"column":16},"end":{"line":514,"column":104}},"276":{"start":{"line":518,"column":20},"end":{"line":518,"column":45}},"277":{"start":{"line":518,"column":38},"end":{"line":518,"column":44}},"278":{"start":{"line":519,"column":4},"end":{"line":523,"column":7}},"279":{"start":{"line":520,"column":8},"end":{"line":522,"column":9}},"280":{"start":{"line":521,"column":12},"end":{"line":521,"column":74}},"281":{"start":{"line":525,"column":0},"end":{"line":525,"column":34}},"282":{"start":{"line":531,"column":23},"end":{"line":531,"column":25}},"283":{"start":{"line":532,"column":4},"end":{"line":534,"column":7}},"284":{"start":{"line":533,"column":8},"end":{"line":533,"column":34}},"285":{"start":{"line":535,"column":18},"end":{"line":535,"column":42}},"286":{"start":{"line":536,"column":25},"end":{"line":536,"column":33}},"287":{"start":{"line":537,"column":4},"end":{"line":537,"column":38}},"288":{"start":{"line":539,"column":0},"end":{"line":539,"column":50}},"289":{"start":{"line":545,"column":39},"end":{"line":545,"column":73}},"290":{"start":{"line":546,"column":4},"end":{"line":546,"column":66}},"291":{"start":{"line":546,"column":49},"end":{"line":546,"column":63}},"292":{"start":{"line":548,"column":0},"end":{"line":548,"column":44}},"293":{"start":{"line":550,"column":4},"end":{"line":550,"column":76}},"294":{"start":{"line":550,"column":44},"end":{"line":550,"column":55}},"295":{"start":{"line":552,"column":0},"end":{"line":552,"column":48}},"296":{"start":{"line":558,"column":34},"end":{"line":558,"column":65}},"297":{"start":{"line":559,"column":4},"end":{"line":559,"column":60}},"298":{"start":{"line":561,"column":0},"end":{"line":561,"column":36}},"299":{"start":{"line":563,"column":39},"end":{"line":563,"column":48}},"300":{"start":{"line":564,"column":4},"end":{"line":566,"column":5}},"301":{"start":{"line":565,"column":8},"end":{"line":565,"column":21}},"302":{"start":{"line":567,"column":16},"end":{"line":567,"column":29}},"303":{"start":{"line":568,"column":4},"end":{"line":570,"column":5}},"304":{"start":{"line":569,"column":8},"end":{"line":569,"column":21}},"305":{"start":{"line":571,"column":4},"end":{"line":573,"column":5}},"306":{"start":{"line":572,"column":8},"end":{"line":572,"column":21}},"307":{"start":{"line":574,"column":4},"end":{"line":584,"column":5}},"308":{"start":{"line":575,"column":8},"end":{"line":581,"column":9}},"309":{"start":{"line":576,"column":12},"end":{"line":576,"column":72}},"310":{"start":{"line":579,"column":31},"end":{"line":579,"column":45}},"311":{"start":{"line":580,"column":12},"end":{"line":580,"column":73}},"312":{"start":{"line":583,"column":8},"end":{"line":583,"column":21}},"313":{"start":{"line":585,"column":4},"end":{"line":585,"column":16}},"314":{"start":{"line":587,"column":0},"end":{"line":587,"column":32}},"315":{"start":{"line":589,"column":4},"end":{"line":596,"column":5}},"316":{"start":{"line":590,"column":8},"end":{"line":590,"column":28}},"317":{"start":{"line":592,"column":9},"end":{"line":596,"column":5}},"318":{"start":{"line":593,"column":30},"end":{"line":593,"column":49}},"319":{"start":{"line":594,"column":23},"end":{"line":594,"column":89}},"320":{"start":{"line":594,"column":66},"end":{"line":594,"column":83}},"321":{"start":{"line":595,"column":8},"end":{"line":595,"column":92}},"322":{"start":{"line":598,"column":0},"end":{"line":598,"column":30}},"323":{"start":{"line":600,"column":4},"end":{"line":602,"column":5}},"324":{"start":{"line":601,"column":8},"end":{"line":601,"column":60}},"325":{"start":{"line":603,"column":39},"end":{"line":603,"column":66}},"326":{"start":{"line":604,"column":4},"end":{"line":628,"column":22}},"327":{"start":{"line":605,"column":8},"end":{"line":622,"column":9}},"328":{"start":{"line":606,"column":12},"end":{"line":606,"column":48}},"329":{"start":{"line":608,"column":13},"end":{"line":622,"column":9}},"330":{"start":{"line":609,"column":12},"end":{"line":609,"column":47}},"331":{"start":{"line":611,"column":13},"end":{"line":622,"column":9}},"332":{"start":{"line":612,"column":12},"end":{"line":612,"column":47}},"333":{"start":{"line":614,"column":13},"end":{"line":622,"column":9}},"334":{"start":{"line":615,"column":12},"end":{"line":615,"column":85}},"335":{"start":{"line":617,"column":13},"end":{"line":622,"column":9}},"336":{"start":{"line":618,"column":12},"end":{"line":618,"column":61}},"337":{"start":{"line":621,"column":12},"end":{"line":621,"column":24}},"338":{"start":{"line":623,"column":8},"end":{"line":627,"column":10}},"339":{"start":{"line":630,"column":0},"end":{"line":630,"column":38}},"340":{"start":{"line":632,"column":4},"end":{"line":656,"column":5}},"341":{"start":{"line":633,"column":21},"end":{"line":633,"column":24}},"342":{"start":{"line":634,"column":21},"end":{"line":634,"column":38}},"343":{"start":{"line":635,"column":8},"end":{"line":652,"column":26}},"344":{"start":{"line":636,"column":25},"end":{"line":636,"column":46}},"345":{"start":{"line":637,"column":12},"end":{"line":651,"column":13}},"346":{"start":{"line":638,"column":16},"end":{"line":638,"column":64}},"347":{"start":{"line":640,"column":17},"end":{"line":651,"column":13}},"348":{"start":{"line":641,"column":34},"end":{"line":641,"column":65}},"349":{"start":{"line":642,"column":16},"end":{"line":642,"column":74}},"350":{"start":{"line":645,"column":16},"end":{"line":645,"column":32}},"351":{"start":{"line":646,"column":16},"end":{"line":650,"column":18}},"352":{"start":{"line":655,"column":8},"end":{"line":655,"column":51}},"353":{"start":{"line":658,"column":0},"end":{"line":658,"column":40}},"354":{"start":{"line":660,"column":4},"end":{"line":663,"column":5}},"355":{"start":{"line":661,"column":27},"end":{"line":661,"column":40}},"356":{"start":{"line":662,"column":8},"end":{"line":662,"column":26}},"357":{"start":{"line":664,"column":22},"end":{"line":664,"column":32}},"358":{"start":{"line":665,"column":4},"end":{"line":667,"column":5}},"359":{"start":{"line":666,"column":8},"end":{"line":666,"column":22}},"360":{"start":{"line":668,"column":4},"end":{"line":670,"column":5}},"361":{"start":{"line":669,"column":8},"end":{"line":669,"column":21}},"362":{"start":{"line":671,"column":4},"end":{"line":673,"column":5}},"363":{"start":{"line":672,"column":8},"end":{"line":672,"column":21}},"364":{"start":{"line":674,"column":4},"end":{"line":676,"column":5}},"365":{"start":{"line":675,"column":8},"end":{"line":675,"column":21}},"366":{"start":{"line":677,"column":4},"end":{"line":677,"column":22}},"367":{"start":{"line":679,"column":0},"end":{"line":679,"column":30}},"368":{"start":{"line":681,"column":17},"end":{"line":681,"column":19}},"369":{"start":{"line":682,"column":4},"end":{"line":688,"column":7}},"370":{"start":{"line":683,"column":8},"end":{"line":686,"column":9}},"371":{"start":{"line":684,"column":12},"end":{"line":684,"column":26}},"372":{"start":{"line":685,"column":12},"end":{"line":685,"column":25}},"373":{"start":{"line":687,"column":8},"end":{"line":687,"column":20}},"374":{"start":{"line":689,"column":4},"end":{"line":689,"column":18}},"375":{"start":{"line":691,"column":0},"end":{"line":691,"column":40}},"376":{"start":{"line":693,"column":4},"end":{"line":693,"column":71}},"377":{"start":{"line":695,"column":0},"end":{"line":695,"column":26}},"378":{"start":{"line":697,"column":4},"end":{"line":699,"column":5}},"379":{"start":{"line":698,"column":8},"end":{"line":698,"column":59}},"380":{"start":{"line":700,"column":21},"end":{"line":700,"column":58}},"381":{"start":{"line":701,"column":4},"end":{"line":704,"column":5}},"382":{"start":{"line":702,"column":24},"end":{"line":702,"column":91}},"383":{"start":{"line":703,"column":8},"end":{"line":703,"column":23}},"384":{"start":{"line":705,"column":19},"end":{"line":705,"column":50}},"385":{"start":{"line":706,"column":4},"end":{"line":708,"column":5}},"386":{"start":{"line":707,"column":8},"end":{"line":707,"column":25}},"387":{"start":{"line":709,"column":4},"end":{"line":709,"column":32}},"388":{"start":{"line":712,"column":20},"end":{"line":712,"column":43}},"389":{"start":{"line":713,"column":4},"end":{"line":713,"column":56}},"390":{"start":{"line":715,"column":0},"end":{"line":715,"column":36}},"391":{"start":{"line":717,"column":4},"end":{"line":717,"column":50}},"392":{"start":{"line":718,"column":4},"end":{"line":721,"column":16}},"393":{"start":{"line":722,"column":4},"end":{"line":724,"column":5}},"394":{"start":{"line":723,"column":8},"end":{"line":723,"column":43}},"395":{"start":{"line":725,"column":17},"end":{"line":725,"column":48}},"396":{"start":{"line":726,"column":18},"end":{"line":726,"column":30}},"397":{"start":{"line":727,"column":4},"end":{"line":729,"column":5}},"398":{"start":{"line":728,"column":8},"end":{"line":728,"column":33}},"399":{"start":{"line":730,"column":19},"end":{"line":733,"column":6}},"400":{"start":{"line":734,"column":4},"end":{"line":734,"column":18}},"401":{"start":{"line":736,"column":0},"end":{"line":736,"column":42}},"402":{"start":{"line":738,"column":4},"end":{"line":738,"column":73}},"403":{"start":{"line":740,"column":0},"end":{"line":740,"column":26}},"404":{"start":{"line":743,"column":4},"end":{"line":745,"column":5}},"405":{"start":{"line":744,"column":8},"end":{"line":744,"column":18}},"406":{"start":{"line":746,"column":24},"end":{"line":755,"column":5}},"407":{"start":{"line":756,"column":27},"end":{"line":756,"column":29}},"408":{"start":{"line":757,"column":4},"end":{"line":767,"column":5}},"409":{"start":{"line":758,"column":19},"end":{"line":758,"column":37}},"410":{"start":{"line":759,"column":27},"end":{"line":759,"column":52}},"411":{"start":{"line":760,"column":30},"end":{"line":760,"column":58}},"412":{"start":{"line":761,"column":8},"end":{"line":763,"column":9}},"413":{"start":{"line":762,"column":12},"end":{"line":762,"column":93}},"414":{"start":{"line":764,"column":8},"end":{"line":766,"column":9}},"415":{"start":{"line":765,"column":12},"end":{"line":765,"column":76}},"416":{"start":{"line":768,"column":4},"end":{"line":770,"column":5}},"417":{"start":{"line":769,"column":8},"end":{"line":769,"column":57}},"418":{"start":{"line":771,"column":4},"end":{"line":773,"column":5}},"419":{"start":{"line":772,"column":8},"end":{"line":772,"column":66}},"420":{"start":{"line":774,"column":19},"end":{"line":777,"column":5}},"421":{"start":{"line":778,"column":20},"end":{"line":781,"column":9}},"422":{"start":{"line":778,"column":60},"end":{"line":780,"column":15}},"423":{"start":{"line":782,"column":4},"end":{"line":790,"column":5}},"424":{"start":{"line":783,"column":25},"end":{"line":783,"column":46}},"425":{"start":{"line":784,"column":21},"end":{"line":784,"column":98}},"426":{"start":{"line":785,"column":8},"end":{"line":785,"column":40}},"427":{"start":{"line":786,"column":8},"end":{"line":786,"column":30}},"428":{"start":{"line":789,"column":8},"end":{"line":789,"column":74}},"429":{"start":{"line":792,"column":0},"end":{"line":792,"column":50}},"430":{"start":{"line":797,"column":4},"end":{"line":800,"column":5}},"431":{"start":{"line":798,"column":38},"end":{"line":798,"column":60}},"432":{"start":{"line":799,"column":8},"end":{"line":799,"column":75}},"433":{"start":{"line":801,"column":4},"end":{"line":803,"column":5}},"434":{"start":{"line":802,"column":8},"end":{"line":802,"column":61}},"435":{"start":{"line":804,"column":14},"end":{"line":806,"column":6}},"436":{"start":{"line":805,"column":8},"end":{"line":805,"column":31}},"437":{"start":{"line":807,"column":4},"end":{"line":817,"column":5}},"438":{"start":{"line":808,"column":8},"end":{"line":808,"column":42}},"439":{"start":{"line":811,"column":8},"end":{"line":816,"column":9}},"440":{"start":{"line":812,"column":12},"end":{"line":812,"column":24}},"441":{"start":{"line":815,"column":12},"end":{"line":815,"column":39}},"442":{"start":{"line":819,"column":0},"end":{"line":819,"column":34}},"443":{"start":{"line":821,"column":20},"end":{"line":824,"column":15}},"444":{"start":{"line":825,"column":4},"end":{"line":825,"column":60}},"445":{"start":{"line":827,"column":0},"end":{"line":827,"column":30}},"446":{"start":{"line":829,"column":4},"end":{"line":831,"column":5}},"447":{"start":{"line":830,"column":8},"end":{"line":830,"column":79}},"448":{"start":{"line":832,"column":4},"end":{"line":832,"column":43}},"449":{"start":{"line":834,"column":0},"end":{"line":834,"column":30}},"450":{"start":{"line":836,"column":16},"end":{"line":836,"column":33}},"451":{"start":{"line":837,"column":4},"end":{"line":855,"column":7}},"452":{"start":{"line":838,"column":26},"end":{"line":838,"column":55}},"453":{"start":{"line":839,"column":8},"end":{"line":854,"column":9}},"454":{"start":{"line":840,"column":28},"end":{"line":840,"column":67}},"455":{"start":{"line":841,"column":12},"end":{"line":843,"column":15}},"456":{"start":{"line":845,"column":13},"end":{"line":854,"column":9}},"457":{"start":{"line":846,"column":12},"end":{"line":848,"column":15}},"458":{"start":{"line":851,"column":12},"end":{"line":853,"column":15}},"459":{"start":{"line":856,"column":4},"end":{"line":856,"column":26}},"460":{"start":{"line":858,"column":0},"end":{"line":858,"column":36}},"461":{"start":{"line":860,"column":19},"end":{"line":860,"column":21}},"462":{"start":{"line":861,"column":34},"end":{"line":861,"column":56}},"463":{"start":{"line":862,"column":21},"end":{"line":862,"column":29}},"464":{"start":{"line":863,"column":4},"end":{"line":881,"column":5}},"465":{"start":{"line":864,"column":8},"end":{"line":873,"column":9}},"466":{"start":{"line":864,"column":25},"end":{"line":864,"column":26}},"467":{"start":{"line":865,"column":30},"end":{"line":865,"column":61}},"468":{"start":{"line":866,"column":12},"end":{"line":872,"column":13}},"469":{"start":{"line":867,"column":32},"end":{"line":867,"column":70}},"470":{"start":{"line":868,"column":16},"end":{"line":868,"column":113}},"471":{"start":{"line":871,"column":16},"end":{"line":871,"column":93}},"472":{"start":{"line":876,"column":8},"end":{"line":880,"column":9}},"473":{"start":{"line":876,"column":25},"end":{"line":876,"column":26}},"474":{"start":{"line":877,"column":30},"end":{"line":877,"column":61}},"475":{"start":{"line":878,"column":33},"end":{"line":878,"column":103}},"476":{"start":{"line":878,"column":72},"end":{"line":878,"column":83}},"477":{"start":{"line":879,"column":12},"end":{"line":879,"column":113}},"478":{"start":{"line":882,"column":4},"end":{"line":882,"column":18}},"479":{"start":{"line":884,"column":0},"end":{"line":884,"column":34}},"480":{"start":{"line":886,"column":4},"end":{"line":891,"column":5}},"481":{"start":{"line":887,"column":8},"end":{"line":887,"column":51}},"482":{"start":{"line":887,"column":34},"end":{"line":887,"column":46}},"483":{"start":{"line":890,"column":8},"end":{"line":890,"column":85}},"484":{"start":{"line":893,"column":0},"end":{"line":893,"column":30}}},"fnMap":{"0":{"name":"bool2Asm","decl":{"start":{"line":27,"column":9},"end":{"line":27,"column":17}},"loc":{"start":{"line":27,"column":23},"end":{"line":35,"column":1}},"line":27},"1":{"name":"int2Asm","decl":{"start":{"line":40,"column":9},"end":{"line":40,"column":16}},"loc":{"start":{"line":40,"column":22},"end":{"line":55,"column":1}},"line":40},"2":{"name":"asm2int","decl":{"start":{"line":60,"column":9},"end":{"line":60,"column":16}},"loc":{"start":{"line":60,"column":22},"end":{"line":99,"column":1}},"line":60},"3":{"name":"int2Value","decl":{"start":{"line":104,"column":9},"end":{"line":104,"column":18}},"loc":{"start":{"line":104,"column":24},"end":{"line":120,"column":1}},"line":104},"4":{"name":"intValue2hex","decl":{"start":{"line":122,"column":9},"end":{"line":122,"column":21}},"loc":{"start":{"line":122,"column":27},"end":{"line":128,"column":1}},"line":122},"5":{"name":"parseLiteral","decl":{"start":{"line":130,"column":9},"end":{"line":130,"column":21}},"loc":{"start":{"line":130,"column":25},"end":{"line":231,"column":1}},"line":130},"6":{"name":"literal2ScryptType","decl":{"start":{"line":236,"column":9},"end":{"line":236,"column":27}},"loc":{"start":{"line":236,"column":31},"end":{"line":266,"column":1}},"line":236},"7":{"name":"asm2ScryptType","decl":{"start":{"line":268,"column":9},"end":{"line":268,"column":23}},"loc":{"start":{"line":268,"column":35},"end":{"line":297,"column":1}},"line":268},"8":{"name":"bytes2Literal","decl":{"start":{"line":299,"column":9},"end":{"line":299,"column":22}},"loc":{"start":{"line":299,"column":40},"end":{"line":311,"column":1}},"line":299},"9":{"name":"bytesToHexString","decl":{"start":{"line":313,"column":9},"end":{"line":313,"column":25}},"loc":{"start":{"line":313,"column":37},"end":{"line":315,"column":1}},"line":313},"10":{"name":"(anonymous_10)","decl":{"start":{"line":314,"column":28},"end":{"line":314,"column":29}},"loc":{"start":{"line":314,"column":44},"end":{"line":314,"column":102}},"line":314},"11":{"name":"hexStringToBytes","decl":{"start":{"line":317,"column":9},"end":{"line":317,"column":25}},"loc":{"start":{"line":317,"column":31},"end":{"line":330,"column":1}},"line":317},"12":{"name":"(anonymous_12)","decl":{"start":{"line":320,"column":16},"end":{"line":320,"column":17}},"loc":{"start":{"line":320,"column":35},"end":{"line":328,"column":5}},"line":320},"13":{"name":"(anonymous_13)","decl":{"start":{"line":329,"column":13},"end":{"line":329,"column":14}},"loc":{"start":{"line":329,"column":18},"end":{"line":329,"column":33}},"line":329},"14":{"name":"getValidatedHexString","decl":{"start":{"line":332,"column":9},"end":{"line":332,"column":30}},"loc":{"start":{"line":332,"column":55},"end":{"line":344,"column":1}},"line":332},"15":{"name":"signTx","decl":{"start":{"line":346,"column":9},"end":{"line":346,"column":15}},"loc":{"start":{"line":346,"column":154},"end":{"line":360,"column":1}},"line":346},"16":{"name":"toHex","decl":{"start":{"line":362,"column":9},"end":{"line":362,"column":14}},"loc":{"start":{"line":362,"column":18},"end":{"line":364,"column":1}},"line":362},"17":{"name":"getPreimage","decl":{"start":{"line":366,"column":9},"end":{"line":366,"column":20}},"loc":{"start":{"line":366,"column":152},"end":{"line":369,"column":1}},"line":366},"18":{"name":"num2bin","decl":{"start":{"line":375,"column":9},"end":{"line":375,"column":16}},"loc":{"start":{"line":375,"column":29},"end":{"line":402,"column":1}},"line":375},"19":{"name":"bin2num","decl":{"start":{"line":405,"column":9},"end":{"line":405,"column":16}},"loc":{"start":{"line":405,"column":20},"end":{"line":429,"column":1}},"line":405},"20":{"name":"isNode","decl":{"start":{"line":431,"column":9},"end":{"line":431,"column":15}},"loc":{"start":{"line":431,"column":18},"end":{"line":433,"column":1}},"line":431},"21":{"name":"path2uri","decl":{"start":{"line":435,"column":9},"end":{"line":435,"column":17}},"loc":{"start":{"line":435,"column":24},"end":{"line":442,"column":1}},"line":435},"22":{"name":"uri2path","decl":{"start":{"line":444,"column":9},"end":{"line":444,"column":17}},"loc":{"start":{"line":444,"column":23},"end":{"line":451,"column":1}},"line":444},"23":{"name":"literal2Asm","decl":{"start":{"line":457,"column":9},"end":{"line":457,"column":20}},"loc":{"start":{"line":457,"column":24},"end":{"line":460,"column":1}},"line":457},"24":{"name":"findStructByName","decl":{"start":{"line":462,"column":9},"end":{"line":462,"column":25}},"loc":{"start":{"line":462,"column":35},"end":{"line":466,"column":1}},"line":462},"25":{"name":"(anonymous_25)","decl":{"start":{"line":463,"column":18},"end":{"line":463,"column":19}},"loc":{"start":{"line":463,"column":23},"end":{"line":465,"column":5}},"line":463},"26":{"name":"isStructType","decl":{"start":{"line":468,"column":9},"end":{"line":468,"column":21}},"loc":{"start":{"line":468,"column":28},"end":{"line":470,"column":1}},"line":468},"27":{"name":"isArrayType","decl":{"start":{"line":473,"column":9},"end":{"line":473,"column":20}},"loc":{"start":{"line":473,"column":27},"end":{"line":475,"column":1}},"line":473},"28":{"name":"getStructNameByType","decl":{"start":{"line":477,"column":9},"end":{"line":477,"column":28}},"loc":{"start":{"line":477,"column":35},"end":{"line":483,"column":1}},"line":477},"29":{"name":"findStructByType","decl":{"start":{"line":485,"column":9},"end":{"line":485,"column":25}},"loc":{"start":{"line":485,"column":35},"end":{"line":491,"column":1}},"line":485},"30":{"name":"checkStruct","decl":{"start":{"line":493,"column":9},"end":{"line":493,"column":20}},"loc":{"start":{"line":493,"column":43},"end":{"line":524,"column":1}},"line":493},"31":{"name":"(anonymous_31)","decl":{"start":{"line":494,"column":21},"end":{"line":494,"column":22}},"loc":{"start":{"line":494,"column":26},"end":{"line":517,"column":5}},"line":494},"32":{"name":"(anonymous_32)","decl":{"start":{"line":518,"column":33},"end":{"line":518,"column":34}},"loc":{"start":{"line":518,"column":38},"end":{"line":518,"column":44}},"line":518},"33":{"name":"(anonymous_33)","decl":{"start":{"line":519,"column":29},"end":{"line":519,"column":30}},"loc":{"start":{"line":519,"column":36},"end":{"line":523,"column":5}},"line":519},"34":{"name":"arrayTypeAndSizeStr","decl":{"start":{"line":530,"column":9},"end":{"line":530,"column":28}},"loc":{"start":{"line":530,"column":44},"end":{"line":538,"column":1}},"line":530},"35":{"name":"(anonymous_35)","decl":{"start":{"line":532,"column":54},"end":{"line":532,"column":55}},"loc":{"start":{"line":532,"column":63},"end":{"line":534,"column":5}},"line":532},"36":{"name":"arrayTypeAndSize","decl":{"start":{"line":544,"column":9},"end":{"line":544,"column":25}},"loc":{"start":{"line":544,"column":41},"end":{"line":547,"column":1}},"line":544},"37":{"name":"(anonymous_37)","decl":{"start":{"line":546,"column":41},"end":{"line":546,"column":42}},"loc":{"start":{"line":546,"column":49},"end":{"line":546,"column":63}},"line":546},"38":{"name":"toLiteralArrayType","decl":{"start":{"line":549,"column":9},"end":{"line":549,"column":27}},"loc":{"start":{"line":549,"column":49},"end":{"line":551,"column":1}},"line":549},"39":{"name":"(anonymous_39)","decl":{"start":{"line":550,"column":36},"end":{"line":550,"column":37}},"loc":{"start":{"line":550,"column":44},"end":{"line":550,"column":55}},"line":550},"40":{"name":"subArrayType","decl":{"start":{"line":557,"column":9},"end":{"line":557,"column":21}},"loc":{"start":{"line":557,"column":37},"end":{"line":560,"column":1}},"line":557},"41":{"name":"checkArray","decl":{"start":{"line":562,"column":9},"end":{"line":562,"column":19}},"loc":{"start":{"line":562,"column":37},"end":{"line":586,"column":1}},"line":562},"42":{"name":"(anonymous_42)","decl":{"start":{"line":574,"column":20},"end":{"line":574,"column":21}},"loc":{"start":{"line":574,"column":27},"end":{"line":582,"column":5}},"line":574},"43":{"name":"subscript","decl":{"start":{"line":588,"column":9},"end":{"line":588,"column":18}},"loc":{"start":{"line":588,"column":38},"end":{"line":597,"column":1}},"line":588},"44":{"name":"(anonymous_44)","decl":{"start":{"line":594,"column":44},"end":{"line":594,"column":45}},"loc":{"start":{"line":594,"column":64},"end":{"line":594,"column":85}},"line":594},"45":{"name":"flatternArray","decl":{"start":{"line":599,"column":9},"end":{"line":599,"column":22}},"loc":{"start":{"line":599,"column":45},"end":{"line":629,"column":1}},"line":599},"46":{"name":"(anonymous_46)","decl":{"start":{"line":604,"column":19},"end":{"line":604,"column":20}},"loc":{"start":{"line":604,"column":36},"end":{"line":628,"column":5}},"line":604},"47":{"name":"flatternStruct","decl":{"start":{"line":631,"column":9},"end":{"line":631,"column":23}},"loc":{"start":{"line":631,"column":35},"end":{"line":657,"column":1}},"line":631},"48":{"name":"(anonymous_48)","decl":{"start":{"line":635,"column":24},"end":{"line":635,"column":25}},"loc":{"start":{"line":635,"column":31},"end":{"line":652,"column":9}},"line":635},"49":{"name":"typeOfArg","decl":{"start":{"line":659,"column":9},"end":{"line":659,"column":18}},"loc":{"start":{"line":659,"column":24},"end":{"line":678,"column":1}},"line":659},"50":{"name":"readFileByLine","decl":{"start":{"line":680,"column":9},"end":{"line":680,"column":23}},"loc":{"start":{"line":680,"column":37},"end":{"line":690,"column":1}},"line":680},"51":{"name":"(anonymous_51)","decl":{"start":{"line":682,"column":55},"end":{"line":682,"column":56}},"loc":{"start":{"line":682,"column":74},"end":{"line":688,"column":5}},"line":682},"52":{"name":"isEmpty","decl":{"start":{"line":692,"column":9},"end":{"line":692,"column":16}},"loc":{"start":{"line":692,"column":22},"end":{"line":694,"column":1}},"line":692},"53":{"name":"findCompiler","decl":{"start":{"line":696,"column":9},"end":{"line":696,"column":21}},"loc":{"start":{"line":696,"column":33},"end":{"line":710,"column":1}},"line":696},"54":{"name":"getCIScryptc","decl":{"start":{"line":711,"column":9},"end":{"line":711,"column":21}},"loc":{"start":{"line":711,"column":24},"end":{"line":714,"column":1}},"line":711},"55":{"name":"compileContract","decl":{"start":{"line":716,"column":9},"end":{"line":716,"column":24}},"loc":{"start":{"line":716,"column":40},"end":{"line":735,"column":1}},"line":716},"56":{"name":"newCall","decl":{"start":{"line":737,"column":9},"end":{"line":737,"column":16}},"loc":{"start":{"line":737,"column":28},"end":{"line":739,"column":1}},"line":737},"57":{"name":"genLaunchConfigFile","decl":{"start":{"line":741,"column":9},"end":{"line":741,"column":28}},"loc":{"start":{"line":741,"column":103},"end":{"line":791,"column":1}},"line":741},"58":{"name":"(anonymous_58)","decl":{"start":{"line":778,"column":43},"end":{"line":778,"column":44}},"loc":{"start":{"line":778,"column":60},"end":{"line":780,"column":15}},"line":778},"59":{"name":"resolveType","decl":{"start":{"line":796,"column":9},"end":{"line":796,"column":20}},"loc":{"start":{"line":796,"column":34},"end":{"line":818,"column":1}},"line":796},"60":{"name":"(anonymous_60)","decl":{"start":{"line":804,"column":25},"end":{"line":804,"column":26}},"loc":{"start":{"line":804,"column":30},"end":{"line":806,"column":5}},"line":804},"61":{"name":"ansiRegex","decl":{"start":{"line":820,"column":9},"end":{"line":820,"column":18}},"loc":{"start":{"line":820,"column":47},"end":{"line":826,"column":1}},"line":820},"62":{"name":"stripAnsi","decl":{"start":{"line":828,"column":9},"end":{"line":828,"column":18}},"loc":{"start":{"line":828,"column":27},"end":{"line":833,"column":1}},"line":828},"63":{"name":"createStruct","decl":{"start":{"line":835,"column":9},"end":{"line":835,"column":21}},"loc":{"start":{"line":835,"column":76},"end":{"line":857,"column":1}},"line":835},"64":{"name":"(anonymous_64)","decl":{"start":{"line":837,"column":35},"end":{"line":837,"column":36}},"loc":{"start":{"line":837,"column":44},"end":{"line":855,"column":5}},"line":837},"65":{"name":"createArray","decl":{"start":{"line":859,"column":9},"end":{"line":859,"column":20}},"loc":{"start":{"line":859,"column":74},"end":{"line":883,"column":1}},"line":859},"66":{"name":"(anonymous_66)","decl":{"start":{"line":878,"column":64},"end":{"line":878,"column":65}},"loc":{"start":{"line":878,"column":72},"end":{"line":878,"column":83}},"line":878},"67":{"name":"toLiteral","decl":{"start":{"line":885,"column":9},"end":{"line":885,"column":18}},"loc":{"start":{"line":885,"column":26},"end":{"line":892,"column":1}},"line":885},"68":{"name":"(anonymous_68)","decl":{"start":{"line":887,"column":29},"end":{"line":887,"column":30}},"loc":{"start":{"line":887,"column":34},"end":{"line":887,"column":46}},"line":887}},"branchMap":{"0":{"loc":{"start":{"line":28,"column":4},"end":{"line":30,"column":5}},"type":"if","locations":[{"start":{"line":28,"column":4},"end":{"line":30,"column":5}},{"start":{"line":28,"column":4},"end":{"line":30,"column":5}}],"line":28},"1":{"loc":{"start":{"line":31,"column":4},"end":{"line":33,"column":5}},"type":"if","locations":[{"start":{"line":31,"column":4},"end":{"line":33,"column":5}},{"start":{"line":31,"column":4},"end":{"line":33,"column":5}}],"line":31},"2":{"loc":{"start":{"line":41,"column":4},"end":{"line":54,"column":5}},"type":"if","locations":[{"start":{"line":41,"column":4},"end":{"line":54,"column":5}},{"start":{"line":41,"column":4},"end":{"line":54,"column":5}}],"line":41},"3":{"loc":{"start":{"line":41,"column":8},"end":{"line":41,"column":63}},"type":"binary-expr","locations":[{"start":{"line":41,"column":8},"end":{"line":41,"column":29}},{"start":{"line":41,"column":33},"end":{"line":41,"column":63}}],"line":41},"4":{"loc":{"start":{"line":42,"column":23},"end":{"line":42,"column":92}},"type":"cond-expr","locations":[{"start":{"line":42,"column":46},"end":{"line":42,"column":74}},{"start":{"line":42,"column":77},"end":{"line":42,"column":92}}],"line":42},"5":{"loc":{"start":{"line":43,"column":8},"end":{"line":45,"column":9}},"type":"if","locations":[{"start":{"line":43,"column":8},"end":{"line":45,"column":9}},{"start":{"line":43,"column":8},"end":{"line":45,"column":9}}],"line":43},"6":{"loc":{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},{"start":{"line":46,"column":8},"end":{"line":48,"column":9}}],"line":46},"7":{"loc":{"start":{"line":46,"column":12},"end":{"line":46,"column":45}},"type":"binary-expr","locations":[{"start":{"line":46,"column":12},"end":{"line":46,"column":26}},{"start":{"line":46,"column":30},"end":{"line":46,"column":45}}],"line":46},"8":{"loc":{"start":{"line":61,"column":4},"end":{"line":98,"column":5}},"type":"switch","locations":[{"start":{"line":62,"column":8},"end":{"line":63,"column":22}},{"start":{"line":64,"column":8},"end":{"line":64,"column":17}},{"start":{"line":65,"column":8},"end":{"line":65,"column":20}},{"start":{"line":66,"column":8},"end":{"line":66,"column":20}},{"start":{"line":67,"column":8},"end":{"line":67,"column":20}},{"start":{"line":68,"column":8},"end":{"line":68,"column":20}},{"start":{"line":69,"column":8},"end":{"line":69,"column":20}},{"start":{"line":70,"column":8},"end":{"line":70,"column":20}},{"start":{"line":71,"column":8},"end":{"line":71,"column":20}},{"start":{"line":72,"column":8},"end":{"line":72,"column":20}},{"start":{"line":73,"column":8},"end":{"line":73,"column":20}},{"start":{"line":74,"column":8},"end":{"line":74,"column":20}},{"start":{"line":75,"column":8},"end":{"line":75,"column":21}},{"start":{"line":76,"column":8},"end":{"line":76,"column":21}},{"start":{"line":77,"column":8},"end":{"line":77,"column":21}},{"start":{"line":78,"column":8},"end":{"line":78,"column":21}},{"start":{"line":79,"column":8},"end":{"line":79,"column":21}},{"start":{"line":80,"column":8},"end":{"line":80,"column":21}},{"start":{"line":81,"column":8},"end":{"line":82,"column":52}},{"start":{"line":83,"column":8},"end":{"line":97,"column":9}}],"line":61},"9":{"loc":{"start":{"line":88,"column":12},"end":{"line":96,"column":13}},"type":"if","locations":[{"start":{"line":88,"column":12},"end":{"line":96,"column":13}},{"start":{"line":88,"column":12},"end":{"line":96,"column":13}}],"line":88},"10":{"loc":{"start":{"line":91,"column":17},"end":{"line":96,"column":13}},"type":"if","locations":[{"start":{"line":91,"column":17},"end":{"line":96,"column":13}},{"start":{"line":91,"column":17},"end":{"line":96,"column":13}}],"line":91},"11":{"loc":{"start":{"line":105,"column":4},"end":{"line":119,"column":5}},"type":"if","locations":[{"start":{"line":105,"column":4},"end":{"line":119,"column":5}},{"start":{"line":105,"column":4},"end":{"line":119,"column":5}}],"line":105},"12":{"loc":{"start":{"line":105,"column":8},"end":{"line":105,"column":63}},"type":"binary-expr","locations":[{"start":{"line":105,"column":8},"end":{"line":105,"column":29}},{"start":{"line":105,"column":33},"end":{"line":105,"column":63}}],"line":105},"13":{"loc":{"start":{"line":106,"column":19},"end":{"line":106,"column":88}},"type":"cond-expr","locations":[{"start":{"line":106,"column":42},"end":{"line":106,"column":70}},{"start":{"line":106,"column":73},"end":{"line":106,"column":88}}],"line":106},"14":{"loc":{"start":{"line":107,"column":8},"end":{"line":115,"column":9}},"type":"if","locations":[{"start":{"line":107,"column":8},"end":{"line":115,"column":9}},{"start":{"line":107,"column":8},"end":{"line":115,"column":9}}],"line":107},"15":{"loc":{"start":{"line":110,"column":13},"end":{"line":115,"column":9}},"type":"if","locations":[{"start":{"line":110,"column":13},"end":{"line":115,"column":9}},{"start":{"line":110,"column":13},"end":{"line":115,"column":9}}],"line":110},"16":{"loc":{"start":{"line":124,"column":4},"end":{"line":126,"column":5}},"type":"if","locations":[{"start":{"line":124,"column":4},"end":{"line":126,"column":5}},{"start":{"line":124,"column":4},"end":{"line":126,"column":5}}],"line":124},"17":{"loc":{"start":{"line":132,"column":4},"end":{"line":134,"column":5}},"type":"if","locations":[{"start":{"line":132,"column":4},"end":{"line":134,"column":5}},{"start":{"line":132,"column":4},"end":{"line":134,"column":5}}],"line":132},"18":{"loc":{"start":{"line":135,"column":4},"end":{"line":137,"column":5}},"type":"if","locations":[{"start":{"line":135,"column":4},"end":{"line":137,"column":5}},{"start":{"line":135,"column":4},"end":{"line":137,"column":5}}],"line":135},"19":{"loc":{"start":{"line":140,"column":4},"end":{"line":142,"column":5}},"type":"if","locations":[{"start":{"line":140,"column":4},"end":{"line":142,"column":5}},{"start":{"line":140,"column":4},"end":{"line":142,"column":5}}],"line":140},"20":{"loc":{"start":{"line":145,"column":4},"end":{"line":147,"column":5}},"type":"if","locations":[{"start":{"line":145,"column":4},"end":{"line":147,"column":5}},{"start":{"line":145,"column":4},"end":{"line":147,"column":5}}],"line":145},"21":{"loc":{"start":{"line":151,"column":4},"end":{"line":164,"column":5}},"type":"if","locations":[{"start":{"line":151,"column":4},"end":{"line":164,"column":5}},{"start":{"line":151,"column":4},"end":{"line":164,"column":5}}],"line":151},"22":{"loc":{"start":{"line":153,"column":8},"end":{"line":155,"column":9}},"type":"if","locations":[{"start":{"line":153,"column":8},"end":{"line":155,"column":9}},{"start":{"line":153,"column":8},"end":{"line":155,"column":9}}],"line":153},"23":{"loc":{"start":{"line":156,"column":8},"end":{"line":158,"column":9}},"type":"if","locations":[{"start":{"line":156,"column":8},"end":{"line":158,"column":9}},{"start":{"line":156,"column":8},"end":{"line":158,"column":9}}],"line":156},"24":{"loc":{"start":{"line":160,"column":8},"end":{"line":162,"column":9}},"type":"if","locations":[{"start":{"line":160,"column":8},"end":{"line":162,"column":9}},{"start":{"line":160,"column":8},"end":{"line":162,"column":9}}],"line":160},"25":{"loc":{"start":{"line":160,"column":12},"end":{"line":160,"column":43}},"type":"binary-expr","locations":[{"start":{"line":160,"column":12},"end":{"line":160,"column":25}},{"start":{"line":160,"column":29},"end":{"line":160,"column":43}}],"line":160},"26":{"loc":{"start":{"line":168,"column":4},"end":{"line":170,"column":5}},"type":"if","locations":[{"start":{"line":168,"column":4},"end":{"line":170,"column":5}},{"start":{"line":168,"column":4},"end":{"line":170,"column":5}}],"line":168},"27":{"loc":{"start":{"line":173,"column":4},"end":{"line":175,"column":5}},"type":"if","locations":[{"start":{"line":173,"column":4},"end":{"line":175,"column":5}},{"start":{"line":173,"column":4},"end":{"line":175,"column":5}}],"line":173},"28":{"loc":{"start":{"line":178,"column":4},"end":{"line":181,"column":5}},"type":"if","locations":[{"start":{"line":178,"column":4},"end":{"line":181,"column":5}},{"start":{"line":178,"column":4},"end":{"line":181,"column":5}}],"line":178},"29":{"loc":{"start":{"line":184,"column":4},"end":{"line":187,"column":5}},"type":"if","locations":[{"start":{"line":184,"column":4},"end":{"line":187,"column":5}},{"start":{"line":184,"column":4},"end":{"line":187,"column":5}}],"line":184},"30":{"loc":{"start":{"line":190,"column":4},"end":{"line":193,"column":5}},"type":"if","locations":[{"start":{"line":190,"column":4},"end":{"line":193,"column":5}},{"start":{"line":190,"column":4},"end":{"line":193,"column":5}}],"line":190},"31":{"loc":{"start":{"line":196,"column":4},"end":{"line":199,"column":5}},"type":"if","locations":[{"start":{"line":196,"column":4},"end":{"line":199,"column":5}},{"start":{"line":196,"column":4},"end":{"line":199,"column":5}}],"line":196},"32":{"loc":{"start":{"line":202,"column":4},"end":{"line":205,"column":5}},"type":"if","locations":[{"start":{"line":202,"column":4},"end":{"line":205,"column":5}},{"start":{"line":202,"column":4},"end":{"line":205,"column":5}}],"line":202},"33":{"loc":{"start":{"line":208,"column":4},"end":{"line":211,"column":5}},"type":"if","locations":[{"start":{"line":208,"column":4},"end":{"line":211,"column":5}},{"start":{"line":208,"column":4},"end":{"line":211,"column":5}}],"line":208},"34":{"loc":{"start":{"line":214,"column":4},"end":{"line":217,"column":5}},"type":"if","locations":[{"start":{"line":214,"column":4},"end":{"line":217,"column":5}},{"start":{"line":214,"column":4},"end":{"line":217,"column":5}}],"line":214},"35":{"loc":{"start":{"line":220,"column":4},"end":{"line":223,"column":5}},"type":"if","locations":[{"start":{"line":220,"column":4},"end":{"line":223,"column":5}},{"start":{"line":220,"column":4},"end":{"line":223,"column":5}}],"line":220},"36":{"loc":{"start":{"line":226,"column":4},"end":{"line":229,"column":5}},"type":"if","locations":[{"start":{"line":226,"column":4},"end":{"line":229,"column":5}},{"start":{"line":226,"column":4},"end":{"line":229,"column":5}}],"line":226},"37":{"loc":{"start":{"line":238,"column":4},"end":{"line":265,"column":5}},"type":"switch","locations":[{"start":{"line":239,"column":8},"end":{"line":240,"column":49}},{"start":{"line":241,"column":8},"end":{"line":242,"column":48}},{"start":{"line":243,"column":8},"end":{"line":244,"column":50}},{"start":{"line":245,"column":8},"end":{"line":246,"column":52}},{"start":{"line":247,"column":8},"end":{"line":248,"column":51}},{"start":{"line":249,"column":8},"end":{"line":250,"column":48}},{"start":{"line":251,"column":8},"end":{"line":252,"column":54}},{"start":{"line":253,"column":8},"end":{"line":254,"column":49}},{"start":{"line":255,"column":8},"end":{"line":256,"column":51}},{"start":{"line":257,"column":8},"end":{"line":258,"column":56}},{"start":{"line":259,"column":8},"end":{"line":260,"column":60}},{"start":{"line":261,"column":8},"end":{"line":262,"column":55}},{"start":{"line":263,"column":8},"end":{"line":264,"column":103}}],"line":238},"38":{"loc":{"start":{"line":269,"column":4},"end":{"line":296,"column":5}},"type":"switch","locations":[{"start":{"line":270,"column":8},"end":{"line":271,"column":81}},{"start":{"line":272,"column":8},"end":{"line":273,"column":55}},{"start":{"line":274,"column":8},"end":{"line":275,"column":48}},{"start":{"line":276,"column":8},"end":{"line":277,"column":59}},{"start":{"line":278,"column":8},"end":{"line":279,"column":49}},{"start":{"line":280,"column":8},"end":{"line":281,"column":46}},{"start":{"line":282,"column":8},"end":{"line":283,"column":52}},{"start":{"line":284,"column":8},"end":{"line":285,"column":47}},{"start":{"line":286,"column":8},"end":{"line":287,"column":49}},{"start":{"line":288,"column":8},"end":{"line":289,"column":63}},{"start":{"line":290,"column":8},"end":{"line":291,"column":58}},{"start":{"line":292,"column":8},"end":{"line":293,"column":53}},{"start":{"line":294,"column":8},"end":{"line":295,"column":106}}],"line":269},"39":{"loc":{"start":{"line":271,"column":42},"end":{"line":271,"column":79}},"type":"cond-expr","locations":[{"start":{"line":271,"column":67},"end":{"line":271,"column":71}},{"start":{"line":271,"column":74},"end":{"line":271,"column":79}}],"line":271},"40":{"loc":{"start":{"line":300,"column":4},"end":{"line":310,"column":5}},"type":"switch","locations":[{"start":{"line":301,"column":8},"end":{"line":302,"column":89}},{"start":{"line":303,"column":8},"end":{"line":303,"column":19}},{"start":{"line":304,"column":8},"end":{"line":305,"column":73}},{"start":{"line":306,"column":8},"end":{"line":307,"column":55}},{"start":{"line":308,"column":8},"end":{"line":309,"column":55}}],"line":300},"41":{"loc":{"start":{"line":302,"column":19},"end":{"line":302,"column":88}},"type":"cond-expr","locations":[{"start":{"line":302,"column":72},"end":{"line":302,"column":78}},{"start":{"line":302,"column":81},"end":{"line":302,"column":88}}],"line":302},"42":{"loc":{"start":{"line":321,"column":8},"end":{"line":326,"column":9}},"type":"if","locations":[{"start":{"line":321,"column":8},"end":{"line":326,"column":9}},{"start":{"line":321,"column":8},"end":{"line":326,"column":9}}],"line":321},"43":{"loc":{"start":{"line":332,"column":36},"end":{"line":332,"column":53}},"type":"default-arg","locations":[{"start":{"line":332,"column":49},"end":{"line":332,"column":53}}],"line":332},"44":{"loc":{"start":{"line":334,"column":4},"end":{"line":336,"column":5}},"type":"if","locations":[{"start":{"line":334,"column":4},"end":{"line":336,"column":5}},{"start":{"line":334,"column":4},"end":{"line":336,"column":5}}],"line":334},"45":{"loc":{"start":{"line":334,"column":8},"end":{"line":334,"column":37}},"type":"binary-expr","locations":[{"start":{"line":334,"column":8},"end":{"line":334,"column":22}},{"start":{"line":334,"column":26},"end":{"line":334,"column":37}}],"line":334},"46":{"loc":{"start":{"line":337,"column":4},"end":{"line":339,"column":5}},"type":"if","locations":[{"start":{"line":337,"column":4},"end":{"line":339,"column":5}},{"start":{"line":337,"column":4},"end":{"line":339,"column":5}}],"line":337},"47":{"loc":{"start":{"line":340,"column":4},"end":{"line":342,"column":5}},"type":"if","locations":[{"start":{"line":340,"column":4},"end":{"line":342,"column":5}},{"start":{"line":340,"column":4},"end":{"line":342,"column":5}}],"line":340},"48":{"loc":{"start":{"line":340,"column":8},"end":{"line":340,"column":52}},"type":"binary-expr","locations":[{"start":{"line":340,"column":8},"end":{"line":340,"column":22}},{"start":{"line":340,"column":26},"end":{"line":340,"column":52}}],"line":340},"49":{"loc":{"start":{"line":346,"column":63},"end":{"line":346,"column":77}},"type":"default-arg","locations":[{"start":{"line":346,"column":76},"end":{"line":346,"column":77}}],"line":346},"50":{"loc":{"start":{"line":346,"column":79},"end":{"line":346,"column":121}},"type":"default-arg","locations":[{"start":{"line":346,"column":93},"end":{"line":346,"column":121}}],"line":346},"51":{"loc":{"start":{"line":346,"column":123},"end":{"line":346,"column":152}},"type":"default-arg","locations":[{"start":{"line":346,"column":131},"end":{"line":346,"column":152}}],"line":346},"52":{"loc":{"start":{"line":347,"column":4},"end":{"line":349,"column":5}},"type":"if","locations":[{"start":{"line":347,"column":4},"end":{"line":349,"column":5}},{"start":{"line":347,"column":4},"end":{"line":349,"column":5}}],"line":347},"53":{"loc":{"start":{"line":350,"column":4},"end":{"line":352,"column":5}},"type":"if","locations":[{"start":{"line":350,"column":4},"end":{"line":352,"column":5}},{"start":{"line":350,"column":4},"end":{"line":352,"column":5}}],"line":350},"54":{"loc":{"start":{"line":353,"column":4},"end":{"line":355,"column":5}},"type":"if","locations":[{"start":{"line":353,"column":4},"end":{"line":355,"column":5}},{"start":{"line":353,"column":4},"end":{"line":355,"column":5}}],"line":353},"55":{"loc":{"start":{"line":356,"column":4},"end":{"line":358,"column":5}},"type":"if","locations":[{"start":{"line":356,"column":4},"end":{"line":358,"column":5}},{"start":{"line":356,"column":4},"end":{"line":358,"column":5}}],"line":356},"56":{"loc":{"start":{"line":366,"column":61},"end":{"line":366,"column":75}},"type":"default-arg","locations":[{"start":{"line":366,"column":74},"end":{"line":366,"column":75}}],"line":366},"57":{"loc":{"start":{"line":366,"column":77},"end":{"line":366,"column":119}},"type":"default-arg","locations":[{"start":{"line":366,"column":91},"end":{"line":366,"column":119}}],"line":366},"58":{"loc":{"start":{"line":366,"column":121},"end":{"line":366,"column":150}},"type":"default-arg","locations":[{"start":{"line":366,"column":129},"end":{"line":366,"column":150}}],"line":366},"59":{"loc":{"start":{"line":377,"column":4},"end":{"line":379,"column":5}},"type":"if","locations":[{"start":{"line":377,"column":4},"end":{"line":379,"column":5}},{"start":{"line":377,"column":4},"end":{"line":379,"column":5}}],"line":377},"60":{"loc":{"start":{"line":382,"column":4},"end":{"line":384,"column":5}},"type":"if","locations":[{"start":{"line":382,"column":4},"end":{"line":384,"column":5}},{"start":{"line":382,"column":4},"end":{"line":384,"column":5}}],"line":382},"61":{"loc":{"start":{"line":385,"column":4},"end":{"line":387,"column":5}},"type":"if","locations":[{"start":{"line":385,"column":4},"end":{"line":387,"column":5}},{"start":{"line":385,"column":4},"end":{"line":387,"column":5}}],"line":385},"62":{"loc":{"start":{"line":392,"column":4},"end":{"line":395,"column":5}},"type":"if","locations":[{"start":{"line":392,"column":4},"end":{"line":395,"column":5}},{"start":{"line":392,"column":4},"end":{"line":395,"column":5}}],"line":392},"63":{"loc":{"start":{"line":397,"column":4},"end":{"line":399,"column":5}},"type":"if","locations":[{"start":{"line":397,"column":4},"end":{"line":399,"column":5}},{"start":{"line":397,"column":4},"end":{"line":399,"column":5}}],"line":397},"64":{"loc":{"start":{"line":400,"column":20},"end":{"line":400,"column":88}},"type":"cond-expr","locations":[{"start":{"line":400,"column":28},"end":{"line":400,"column":51}},{"start":{"line":400,"column":54},"end":{"line":400,"column":88}}],"line":400},"65":{"loc":{"start":{"line":412,"column":4},"end":{"line":414,"column":5}},"type":"if","locations":[{"start":{"line":412,"column":4},"end":{"line":414,"column":5}},{"start":{"line":412,"column":4},"end":{"line":414,"column":5}}],"line":412},"66":{"loc":{"start":{"line":417,"column":4},"end":{"line":419,"column":5}},"type":"if","locations":[{"start":{"line":417,"column":4},"end":{"line":419,"column":5}},{"start":{"line":417,"column":4},"end":{"line":419,"column":5}}],"line":417},"67":{"loc":{"start":{"line":420,"column":4},"end":{"line":428,"column":5}},"type":"if","locations":[{"start":{"line":420,"column":4},"end":{"line":428,"column":5}},{"start":{"line":420,"column":4},"end":{"line":428,"column":5}}],"line":420},"68":{"loc":{"start":{"line":423,"column":9},"end":{"line":428,"column":5}},"type":"if","locations":[{"start":{"line":423,"column":9},"end":{"line":428,"column":5}},{"start":{"line":423,"column":9},"end":{"line":428,"column":5}}],"line":423},"69":{"loc":{"start":{"line":423,"column":13},"end":{"line":423,"column":95}},"type":"binary-expr","locations":[{"start":{"line":423,"column":13},"end":{"line":423,"column":52}},{"start":{"line":423,"column":56},"end":{"line":423,"column":95}}],"line":423},"70":{"loc":{"start":{"line":432,"column":11},"end":{"line":432,"column":71}},"type":"binary-expr","locations":[{"start":{"line":432,"column":11},"end":{"line":432,"column":40}},{"start":{"line":432,"column":44},"end":{"line":432,"column":71}}],"line":432},"71":{"loc":{"start":{"line":436,"column":4},"end":{"line":441,"column":5}},"type":"if","locations":[{"start":{"line":436,"column":4},"end":{"line":441,"column":5}},{"start":{"line":436,"column":4},"end":{"line":441,"column":5}}],"line":436},"72":{"loc":{"start":{"line":445,"column":4},"end":{"line":450,"column":5}},"type":"if","locations":[{"start":{"line":445,"column":4},"end":{"line":450,"column":5}},{"start":{"line":445,"column":4},"end":{"line":450,"column":5}}],"line":445},"73":{"loc":{"start":{"line":479,"column":4},"end":{"line":481,"column":5}},"type":"if","locations":[{"start":{"line":479,"column":4},"end":{"line":481,"column":5}},{"start":{"line":479,"column":4},"end":{"line":481,"column":5}}],"line":479},"74":{"loc":{"start":{"line":487,"column":4},"end":{"line":489,"column":5}},"type":"if","locations":[{"start":{"line":487,"column":4},"end":{"line":489,"column":5}},{"start":{"line":487,"column":4},"end":{"line":489,"column":5}}],"line":487},"75":{"loc":{"start":{"line":498,"column":8},"end":{"line":516,"column":9}},"type":"if","locations":[{"start":{"line":498,"column":8},"end":{"line":516,"column":9}},{"start":{"line":498,"column":8},"end":{"line":516,"column":9}}],"line":498},"76":{"loc":{"start":{"line":501,"column":13},"end":{"line":516,"column":9}},"type":"if","locations":[{"start":{"line":501,"column":13},"end":{"line":516,"column":9}},{"start":{"line":501,"column":13},"end":{"line":516,"column":9}}],"line":501},"77":{"loc":{"start":{"line":502,"column":12},"end":{"line":515,"column":13}},"type":"if","locations":[{"start":{"line":502,"column":12},"end":{"line":515,"column":13}},{"start":{"line":502,"column":12},"end":{"line":515,"column":13}}],"line":502},"78":{"loc":{"start":{"line":504,"column":16},"end":{"line":511,"column":17}},"type":"if","locations":[{"start":{"line":504,"column":16},"end":{"line":511,"column":17}},{"start":{"line":504,"column":16},"end":{"line":511,"column":17}}],"line":504},"79":{"loc":{"start":{"line":505,"column":20},"end":{"line":507,"column":21}},"type":"if","locations":[{"start":{"line":505,"column":20},"end":{"line":507,"column":21}},{"start":{"line":505,"column":20},"end":{"line":507,"column":21}}],"line":505},"80":{"loc":{"start":{"line":520,"column":8},"end":{"line":522,"column":9}},"type":"if","locations":[{"start":{"line":520,"column":8},"end":{"line":522,"column":9}},{"start":{"line":520,"column":8},"end":{"line":522,"column":9}}],"line":520},"81":{"loc":{"start":{"line":564,"column":4},"end":{"line":566,"column":5}},"type":"if","locations":[{"start":{"line":564,"column":4},"end":{"line":566,"column":5}},{"start":{"line":564,"column":4},"end":{"line":566,"column":5}}],"line":564},"82":{"loc":{"start":{"line":568,"column":4},"end":{"line":570,"column":5}},"type":"if","locations":[{"start":{"line":568,"column":4},"end":{"line":570,"column":5}},{"start":{"line":568,"column":4},"end":{"line":570,"column":5}}],"line":568},"83":{"loc":{"start":{"line":571,"column":4},"end":{"line":573,"column":5}},"type":"if","locations":[{"start":{"line":571,"column":4},"end":{"line":573,"column":5}},{"start":{"line":571,"column":4},"end":{"line":573,"column":5}}],"line":571},"84":{"loc":{"start":{"line":574,"column":4},"end":{"line":584,"column":5}},"type":"if","locations":[{"start":{"line":574,"column":4},"end":{"line":584,"column":5}},{"start":{"line":574,"column":4},"end":{"line":584,"column":5}}],"line":574},"85":{"loc":{"start":{"line":575,"column":8},"end":{"line":581,"column":9}},"type":"if","locations":[{"start":{"line":575,"column":8},"end":{"line":581,"column":9}},{"start":{"line":575,"column":8},"end":{"line":581,"column":9}}],"line":575},"86":{"loc":{"start":{"line":580,"column":19},"end":{"line":580,"column":72}},"type":"binary-expr","locations":[{"start":{"line":580,"column":19},"end":{"line":580,"column":46}},{"start":{"line":580,"column":50},"end":{"line":580,"column":72}}],"line":580},"87":{"loc":{"start":{"line":589,"column":4},"end":{"line":596,"column":5}},"type":"if","locations":[{"start":{"line":589,"column":4},"end":{"line":596,"column":5}},{"start":{"line":589,"column":4},"end":{"line":596,"column":5}}],"line":589},"88":{"loc":{"start":{"line":592,"column":9},"end":{"line":596,"column":5}},"type":"if","locations":[{"start":{"line":592,"column":9},"end":{"line":596,"column":5}},{"start":{"line":592,"column":9},"end":{"line":596,"column":5}}],"line":592},"89":{"loc":{"start":{"line":600,"column":4},"end":{"line":602,"column":5}},"type":"if","locations":[{"start":{"line":600,"column":4},"end":{"line":602,"column":5}},{"start":{"line":600,"column":4},"end":{"line":602,"column":5}}],"line":600},"90":{"loc":{"start":{"line":605,"column":8},"end":{"line":622,"column":9}},"type":"if","locations":[{"start":{"line":605,"column":8},"end":{"line":622,"column":9}},{"start":{"line":605,"column":8},"end":{"line":622,"column":9}}],"line":605},"91":{"loc":{"start":{"line":608,"column":13},"end":{"line":622,"column":9}},"type":"if","locations":[{"start":{"line":608,"column":13},"end":{"line":622,"column":9}},{"start":{"line":608,"column":13},"end":{"line":622,"column":9}}],"line":608},"92":{"loc":{"start":{"line":611,"column":13},"end":{"line":622,"column":9}},"type":"if","locations":[{"start":{"line":611,"column":13},"end":{"line":622,"column":9}},{"start":{"line":611,"column":13},"end":{"line":622,"column":9}}],"line":611},"93":{"loc":{"start":{"line":614,"column":13},"end":{"line":622,"column":9}},"type":"if","locations":[{"start":{"line":614,"column":13},"end":{"line":622,"column":9}},{"start":{"line":614,"column":13},"end":{"line":622,"column":9}}],"line":614},"94":{"loc":{"start":{"line":617,"column":13},"end":{"line":622,"column":9}},"type":"if","locations":[{"start":{"line":617,"column":13},"end":{"line":622,"column":9}},{"start":{"line":617,"column":13},"end":{"line":622,"column":9}}],"line":617},"95":{"loc":{"start":{"line":632,"column":4},"end":{"line":656,"column":5}},"type":"if","locations":[{"start":{"line":632,"column":4},"end":{"line":656,"column":5}},{"start":{"line":632,"column":4},"end":{"line":656,"column":5}}],"line":632},"96":{"loc":{"start":{"line":637,"column":12},"end":{"line":651,"column":13}},"type":"if","locations":[{"start":{"line":637,"column":12},"end":{"line":651,"column":13}},{"start":{"line":637,"column":12},"end":{"line":651,"column":13}}],"line":637},"97":{"loc":{"start":{"line":640,"column":17},"end":{"line":651,"column":13}},"type":"if","locations":[{"start":{"line":640,"column":17},"end":{"line":651,"column":13}},{"start":{"line":640,"column":17},"end":{"line":651,"column":13}}],"line":640},"98":{"loc":{"start":{"line":660,"column":4},"end":{"line":663,"column":5}},"type":"if","locations":[{"start":{"line":660,"column":4},"end":{"line":663,"column":5}},{"start":{"line":660,"column":4},"end":{"line":663,"column":5}}],"line":660},"99":{"loc":{"start":{"line":665,"column":4},"end":{"line":667,"column":5}},"type":"if","locations":[{"start":{"line":665,"column":4},"end":{"line":667,"column":5}},{"start":{"line":665,"column":4},"end":{"line":667,"column":5}}],"line":665},"100":{"loc":{"start":{"line":668,"column":4},"end":{"line":670,"column":5}},"type":"if","locations":[{"start":{"line":668,"column":4},"end":{"line":670,"column":5}},{"start":{"line":668,"column":4},"end":{"line":670,"column":5}}],"line":668},"101":{"loc":{"start":{"line":671,"column":4},"end":{"line":673,"column":5}},"type":"if","locations":[{"start":{"line":671,"column":4},"end":{"line":673,"column":5}},{"start":{"line":671,"column":4},"end":{"line":673,"column":5}}],"line":671},"102":{"loc":{"start":{"line":674,"column":4},"end":{"line":676,"column":5}},"type":"if","locations":[{"start":{"line":674,"column":4},"end":{"line":676,"column":5}},{"start":{"line":674,"column":4},"end":{"line":676,"column":5}}],"line":674},"103":{"loc":{"start":{"line":683,"column":8},"end":{"line":686,"column":9}},"type":"if","locations":[{"start":{"line":683,"column":8},"end":{"line":686,"column":9}},{"start":{"line":683,"column":8},"end":{"line":686,"column":9}}],"line":683},"104":{"loc":{"start":{"line":693,"column":11},"end":{"line":693,"column":70}},"type":"binary-expr","locations":[{"start":{"line":693,"column":11},"end":{"line":693,"column":40}},{"start":{"line":693,"column":44},"end":{"line":693,"column":70}}],"line":693},"105":{"loc":{"start":{"line":697,"column":4},"end":{"line":699,"column":5}},"type":"if","locations":[{"start":{"line":697,"column":4},"end":{"line":699,"column":5}},{"start":{"line":697,"column":4},"end":{"line":699,"column":5}}],"line":697},"106":{"loc":{"start":{"line":701,"column":4},"end":{"line":704,"column":5}},"type":"if","locations":[{"start":{"line":701,"column":4},"end":{"line":704,"column":5}},{"start":{"line":701,"column":4},"end":{"line":704,"column":5}}],"line":701},"107":{"loc":{"start":{"line":701,"column":8},"end":{"line":701,"column":70}},"type":"binary-expr","locations":[{"start":{"line":701,"column":8},"end":{"line":701,"column":31}},{"start":{"line":701,"column":35},"end":{"line":701,"column":70}}],"line":701},"108":{"loc":{"start":{"line":706,"column":4},"end":{"line":708,"column":5}},"type":"if","locations":[{"start":{"line":706,"column":4},"end":{"line":708,"column":5}},{"start":{"line":706,"column":4},"end":{"line":708,"column":5}}],"line":706},"109":{"loc":{"start":{"line":713,"column":11},"end":{"line":713,"column":55}},"type":"cond-expr","locations":[{"start":{"line":713,"column":36},"end":{"line":713,"column":43}},{"start":{"line":713,"column":46},"end":{"line":713,"column":55}}],"line":713},"110":{"loc":{"start":{"line":722,"column":4},"end":{"line":724,"column":5}},"type":"if","locations":[{"start":{"line":722,"column":4},"end":{"line":724,"column":5}},{"start":{"line":722,"column":4},"end":{"line":724,"column":5}}],"line":722},"111":{"loc":{"start":{"line":727,"column":4},"end":{"line":729,"column":5}},"type":"if","locations":[{"start":{"line":727,"column":4},"end":{"line":729,"column":5}},{"start":{"line":727,"column":4},"end":{"line":729,"column":5}}],"line":727},"112":{"loc":{"start":{"line":727,"column":8},"end":{"line":727,"column":27}},"type":"binary-expr","locations":[{"start":{"line":727,"column":8},"end":{"line":727,"column":15}},{"start":{"line":727,"column":19},"end":{"line":727,"column":27}}],"line":727},"113":{"loc":{"start":{"line":743,"column":4},"end":{"line":745,"column":5}},"type":"if","locations":[{"start":{"line":743,"column":4},"end":{"line":745,"column":5}},{"start":{"line":743,"column":4},"end":{"line":745,"column":5}}],"line":743},"114":{"loc":{"start":{"line":757,"column":4},"end":{"line":767,"column":5}},"type":"if","locations":[{"start":{"line":757,"column":4},"end":{"line":767,"column":5}},{"start":{"line":757,"column":4},"end":{"line":767,"column":5}}],"line":757},"115":{"loc":{"start":{"line":758,"column":19},"end":{"line":758,"column":37}},"type":"binary-expr","locations":[{"start":{"line":758,"column":19},"end":{"line":758,"column":31}},{"start":{"line":758,"column":35},"end":{"line":758,"column":37}}],"line":758},"116":{"loc":{"start":{"line":759,"column":27},"end":{"line":759,"column":52}},"type":"binary-expr","locations":[{"start":{"line":759,"column":27},"end":{"line":759,"column":47}},{"start":{"line":759,"column":51},"end":{"line":759,"column":52}}],"line":759},"117":{"loc":{"start":{"line":760,"column":30},"end":{"line":760,"column":58}},"type":"binary-expr","locations":[{"start":{"line":760,"column":30},"end":{"line":760,"column":53}},{"start":{"line":760,"column":57},"end":{"line":760,"column":58}}],"line":760},"118":{"loc":{"start":{"line":761,"column":8},"end":{"line":763,"column":9}},"type":"if","locations":[{"start":{"line":761,"column":8},"end":{"line":763,"column":9}},{"start":{"line":761,"column":8},"end":{"line":763,"column":9}}],"line":761},"119":{"loc":{"start":{"line":764,"column":8},"end":{"line":766,"column":9}},"type":"if","locations":[{"start":{"line":764,"column":8},"end":{"line":766,"column":9}},{"start":{"line":764,"column":8},"end":{"line":766,"column":9}}],"line":764},"120":{"loc":{"start":{"line":768,"column":4},"end":{"line":770,"column":5}},"type":"if","locations":[{"start":{"line":768,"column":4},"end":{"line":770,"column":5}},{"start":{"line":768,"column":4},"end":{"line":770,"column":5}}],"line":768},"121":{"loc":{"start":{"line":771,"column":4},"end":{"line":773,"column":5}},"type":"if","locations":[{"start":{"line":771,"column":4},"end":{"line":773,"column":5}},{"start":{"line":771,"column":4},"end":{"line":773,"column":5}}],"line":771},"122":{"loc":{"start":{"line":778,"column":60},"end":{"line":780,"column":15}},"type":"cond-expr","locations":[{"start":{"line":779,"column":10},"end":{"line":779,"column":26}},{"start":{"line":780,"column":10},"end":{"line":780,"column":15}}],"line":778},"123":{"loc":{"start":{"line":782,"column":4},"end":{"line":790,"column":5}},"type":"if","locations":[{"start":{"line":782,"column":4},"end":{"line":790,"column":5}},{"start":{"line":782,"column":4},"end":{"line":790,"column":5}}],"line":782},"124":{"loc":{"start":{"line":797,"column":4},"end":{"line":800,"column":5}},"type":"if","locations":[{"start":{"line":797,"column":4},"end":{"line":800,"column":5}},{"start":{"line":797,"column":4},"end":{"line":800,"column":5}}],"line":797},"125":{"loc":{"start":{"line":801,"column":4},"end":{"line":803,"column":5}},"type":"if","locations":[{"start":{"line":801,"column":4},"end":{"line":803,"column":5}},{"start":{"line":801,"column":4},"end":{"line":803,"column":5}}],"line":801},"126":{"loc":{"start":{"line":807,"column":4},"end":{"line":817,"column":5}},"type":"if","locations":[{"start":{"line":807,"column":4},"end":{"line":817,"column":5}},{"start":{"line":807,"column":4},"end":{"line":817,"column":5}}],"line":807},"127":{"loc":{"start":{"line":811,"column":8},"end":{"line":816,"column":9}},"type":"if","locations":[{"start":{"line":811,"column":8},"end":{"line":816,"column":9}},{"start":{"line":811,"column":8},"end":{"line":816,"column":9}}],"line":811},"128":{"loc":{"start":{"line":820,"column":19},"end":{"line":820,"column":45}},"type":"default-arg","locations":[{"start":{"line":820,"column":43},"end":{"line":820,"column":45}}],"line":820},"129":{"loc":{"start":{"line":820,"column":21},"end":{"line":820,"column":38}},"type":"default-arg","locations":[{"start":{"line":820,"column":33},"end":{"line":820,"column":38}}],"line":820},"130":{"loc":{"start":{"line":825,"column":31},"end":{"line":825,"column":58}},"type":"cond-expr","locations":[{"start":{"line":825,"column":43},"end":{"line":825,"column":52}},{"start":{"line":825,"column":55},"end":{"line":825,"column":58}}],"line":825},"131":{"loc":{"start":{"line":829,"column":4},"end":{"line":831,"column":5}},"type":"if","locations":[{"start":{"line":829,"column":4},"end":{"line":831,"column":5}},{"start":{"line":829,"column":4},"end":{"line":831,"column":5}}],"line":829},"132":{"loc":{"start":{"line":839,"column":8},"end":{"line":854,"column":9}},"type":"if","locations":[{"start":{"line":839,"column":8},"end":{"line":854,"column":9}},{"start":{"line":839,"column":8},"end":{"line":854,"column":9}}],"line":839},"133":{"loc":{"start":{"line":845,"column":13},"end":{"line":854,"column":9}},"type":"if","locations":[{"start":{"line":845,"column":13},"end":{"line":854,"column":9}},{"start":{"line":845,"column":13},"end":{"line":854,"column":9}}],"line":845},"134":{"loc":{"start":{"line":863,"column":4},"end":{"line":881,"column":5}},"type":"if","locations":[{"start":{"line":863,"column":4},"end":{"line":881,"column":5}},{"start":{"line":863,"column":4},"end":{"line":881,"column":5}}],"line":863},"135":{"loc":{"start":{"line":866,"column":12},"end":{"line":872,"column":13}},"type":"if","locations":[{"start":{"line":866,"column":12},"end":{"line":872,"column":13}},{"start":{"line":866,"column":12},"end":{"line":872,"column":13}}],"line":866},"136":{"loc":{"start":{"line":886,"column":4},"end":{"line":891,"column":5}},"type":"if","locations":[{"start":{"line":886,"column":4},"end":{"line":891,"column":5}},{"start":{"line":886,"column":4},"end":{"line":891,"column":5}}],"line":886},"137":{"loc":{"start":{"line":890,"column":15},"end":{"line":890,"column":84}},"type":"cond-expr","locations":[{"start":{"line":890,"column":59},"end":{"line":890,"column":76}},{"start":{"line":890,"column":79},"end":{"line":890,"column":84}}],"line":890}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":10,"24":10,"25":10,"26":0,"27":10,"28":1,"29":9,"30":9,"31":0,"32":1,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":1,"44":10,"45":10,"46":10,"47":10,"48":0,"49":0,"50":0,"51":0,"52":1,"53":0,"54":0,"55":0,"56":0,"57":1,"58":23,"59":3,"60":20,"61":0,"62":20,"63":20,"64":0,"65":20,"66":20,"67":10,"68":10,"69":10,"70":5,"71":5,"72":0,"73":5,"74":5,"75":0,"76":0,"77":0,"78":0,"79":5,"80":5,"81":0,"82":5,"83":5,"84":0,"85":5,"86":5,"87":0,"88":0,"89":5,"90":5,"91":0,"92":0,"93":5,"94":5,"95":1,"96":1,"97":4,"98":4,"99":0,"100":0,"101":4,"102":4,"103":0,"104":0,"105":4,"106":4,"107":0,"108":0,"109":4,"110":4,"111":0,"112":0,"113":4,"114":4,"115":0,"116":0,"117":4,"118":4,"119":4,"120":0,"121":1,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":1,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":1,"153":0,"154":0,"155":0,"156":0,"157":0,"158":1,"159":0,"160":0,"161":1,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":1,"170":17,"171":17,"172":0,"173":17,"174":0,"175":17,"176":0,"177":17,"178":1,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":1,"189":1,"190":1,"191":0,"192":0,"193":1,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":1,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":1,"232":2,"233":1,"234":2,"235":2,"236":0,"237":1,"238":0,"239":0,"240":0,"241":1,"242":0,"243":0,"244":1,"245":0,"246":0,"247":1,"248":208,"249":1,"250":208,"251":1,"252":6,"253":6,"254":6,"255":0,"256":1,"257":0,"258":0,"259":0,"260":0,"261":1,"262":4,"263":12,"264":12,"265":12,"266":12,"267":0,"268":12,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":4,"277":12,"278":4,"279":12,"280":0,"281":1,"282":6,"283":6,"284":6,"285":6,"286":6,"287":6,"288":1,"289":6,"290":6,"291":6,"292":1,"293":4,"294":4,"295":1,"296":0,"297":0,"298":1,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":1,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":1,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":0,"337":0,"338":0,"339":1,"340":2,"341":2,"342":2,"343":2,"344":6,"345":6,"346":0,"347":6,"348":0,"349":0,"350":6,"351":6,"352":0,"353":1,"354":20,"355":19,"356":19,"357":1,"358":1,"359":0,"360":1,"361":1,"362":0,"363":0,"364":0,"365":0,"366":0,"367":1,"368":0,"369":0,"370":0,"371":0,"372":0,"373":0,"374":0,"375":1,"376":0,"377":1,"378":4,"379":0,"380":4,"381":4,"382":2,"383":2,"384":2,"385":2,"386":0,"387":2,"388":2,"389":2,"390":1,"391":1,"392":1,"393":1,"394":0,"395":1,"396":1,"397":1,"398":1,"399":1,"400":1,"401":1,"402":0,"403":1,"404":0,"405":0,"406":0,"407":0,"408":0,"409":0,"410":0,"411":0,"412":0,"413":0,"414":0,"415":0,"416":0,"417":0,"418":0,"419":0,"420":0,"421":0,"422":0,"423":0,"424":0,"425":0,"426":0,"427":0,"428":0,"429":1,"430":131,"431":4,"432":4,"433":127,"434":0,"435":127,"436":877,"437":127,"438":69,"439":58,"440":44,"441":14,"442":1,"443":0,"444":0,"445":1,"446":0,"447":0,"448":0,"449":1,"450":0,"451":0,"452":0,"453":0,"454":0,"455":0,"456":0,"457":0,"458":0,"459":0,"460":1,"461":0,"462":0,"463":0,"464":0,"465":0,"466":0,"467":0,"468":0,"469":0,"470":0,"471":0,"472":0,"473":0,"474":0,"475":0,"476":0,"477":0,"478":0,"479":1,"480":0,"481":0,"482":0,"483":0,"484":1},"f":{"0":0,"1":10,"2":0,"3":10,"4":0,"5":23,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":17,"15":0,"16":1,"17":0,"18":0,"19":0,"20":2,"21":2,"22":0,"23":0,"24":0,"25":0,"26":208,"27":208,"28":6,"29":0,"30":4,"31":12,"32":12,"33":12,"34":6,"35":6,"36":6,"37":6,"38":4,"39":4,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":2,"48":6,"49":20,"50":0,"51":0,"52":0,"53":4,"54":2,"55":1,"56":0,"57":0,"58":0,"59":131,"60":877,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0},"b":{"0":[0,0],"1":[0,0],"2":[10,0],"3":[10,0],"4":[0,10],"5":[0,10],"6":[1,9],"7":[10,10],"8":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"9":[0,0],"10":[0,0],"11":[10,0],"12":[10,0],"13":[0,10],"14":[10,0],"15":[0,0],"16":[0,0],"17":[3,20],"18":[0,20],"19":[0,20],"20":[10,10],"21":[5,5],"22":[0,5],"23":[5,0],"24":[0,0],"25":[0,0],"26":[0,5],"27":[0,5],"28":[0,5],"29":[0,5],"30":[1,4],"31":[0,4],"32":[0,4],"33":[0,4],"34":[0,4],"35":[0,4],"36":[4,0],"37":[0,0,0,0,0,0,0,0,0,0,0,0,0],"38":[0,0,0,0,0,0,0,0,0,0,0,0,0],"39":[0,0],"40":[0,0,0,0,0],"41":[0,0],"42":[0,0],"43":[17],"44":[0,17],"45":[17,0],"46":[0,17],"47":[0,17],"48":[17,17],"49":[0],"50":[0],"51":[0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0],"57":[0],"58":[0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[2,2],"71":[2,0],"72":[0,0],"73":[6,0],"74":[0,0],"75":[0,12],"76":[0,12],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,12],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0],"89":[0,0],"90":[0,0],"91":[0,0],"92":[0,0],"93":[0,0],"94":[0,0],"95":[2,0],"96":[0,6],"97":[0,6],"98":[19,1],"99":[0,1],"100":[1,0],"101":[0,0],"102":[0,0],"103":[0,0],"104":[0,0],"105":[0,4],"106":[2,2],"107":[4,2],"108":[0,2],"109":[2,0],"110":[0,1],"111":[1,0],"112":[1,1],"113":[0,0],"114":[0,0],"115":[0,0],"116":[0,0],"117":[0,0],"118":[0,0],"119":[0,0],"120":[0,0],"121":[0,0],"122":[0,0],"123":[0,0],"124":[4,127],"125":[0,127],"126":[69,58],"127":[44,14],"128":[0],"129":[0],"130":[0,0],"131":[0,0],"132":[0,0],"133":[0,0],"134":[0,0],"135":[0,0],"136":[0,0],"137":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/myland/code/scryptlib/src/utils.ts","sources":["C:/Users/myland/code/scryptlib/src/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { pathToFileURL, fileURLToPath } from 'url';\nimport { Int, Bool, Bytes, PrivKey, PubKey, Sig, Ripemd160, Sha1, Sha256, SigHashType, SigHashPreimage, OpCodeType, ScryptType, ValueType, Struct, SupportedParamType, VariableType, BasicType, SingletonParamType, TypeResolver } from './scryptTypes';\nimport { StructEntity, compile, getPlatformScryptc, CompileResult, AliasEntity, ParamEntity } from './compilerWrapper';\nimport bsv = require('bsv');\nimport ECIES = require('bsv/ecies');\nimport * as fs from 'fs';\nimport { dirname, join, resolve, sep } from 'path';\nimport * as minimist from 'minimist';\nimport { AbstractContract, AsmVarValues, TxContext } from './contract';\nimport { Arguments, DebugConfiguration, DebugLaunch, FileUri } from './abi';\nimport { tmpdir } from 'os';\nexport { bsv };\nexport { ECIES };\n\nconst BN = bsv.crypto.BN;\nconst Interp = bsv.Script.Interpreter;\n\nexport const DEFAULT_FLAGS =\n  //Interp.SCRIPT_VERIFY_P2SH | Interp.SCRIPT_VERIFY_CLEANSTACK | // no longer applies now p2sh is deprecated: cleanstack only applies to p2sh\n  Interp.SCRIPT_ENABLE_MAGNETIC_OPCODES | Interp.SCRIPT_ENABLE_MONOLITH_OPCODES | // TODO: to be removed after upgrade to bsv 2.0\n  Interp.SCRIPT_VERIFY_STRICTENC |\n  Interp.SCRIPT_ENABLE_SIGHASH_FORKID | Interp.SCRIPT_VERIFY_LOW_S | Interp.SCRIPT_VERIFY_NULLFAIL |\n  Interp.SCRIPT_VERIFY_DERSIG |\n  Interp.SCRIPT_VERIFY_MINIMALDATA | Interp.SCRIPT_VERIFY_NULLDUMMY |\n  Interp.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS |\n  Interp.SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY | Interp.SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;\n\nexport const DEFAULT_SIGHASH_TYPE =\n  bsv.crypto.Signature.SIGHASH_ALL | bsv.crypto.Signature.SIGHASH_FORKID;\n\nexport function bool2Asm(str: string): string {\n  if (str === 'true') {\n    return 'OP_TRUE';\n  }\n\n  if (str === 'false') {\n    return 'OP_FALSE';\n  }\n\n  throw new Error(`invalid str '${str}' to convert to bool`);\n}\n\n/**\n * decimal or hex int to little-endian signed magnitude\n */\nexport function int2Asm(str: string): string {\n\n  if (/^(-?\\d+)$/.test(str) || /^0x([0-9a-fA-F]+)$/.test(str)) {\n\n    const number = str.startsWith('0x') ? new BN(str.substring(2), 16) : new BN(str, 10);\n\n    if (number.eqn(-1)) { return 'OP_1NEGATE'; }\n\n    if (number.gten(0) && number.lten(16)) { return 'OP_' + str; }\n\n    const m = number.toSM({ endian: 'little' });\n    return m.toString('hex');\n\n  } else {\n    throw new Error(`invalid str '${str}' to convert to int`);\n  }\n}\n\n\n/**\n * convert asm string to number or bigint\n */\nexport function asm2int(str: string): number | bigint | string {\n\n  switch (str) {\n    case 'OP_1NEGATE':\n      return -1;\n    case '0':\n    case 'OP_0':\n    case 'OP_1':\n    case 'OP_2':\n    case 'OP_3':\n    case 'OP_4':\n    case 'OP_5':\n    case 'OP_6':\n    case 'OP_7':\n    case 'OP_8':\n    case 'OP_9':\n    case 'OP_10':\n    case 'OP_11':\n    case 'OP_12':\n    case 'OP_13':\n    case 'OP_14':\n    case 'OP_15':\n    case 'OP_16':\n      return parseInt(str.replace('OP_', ''));\n    default: {\n      const value = getValidatedHexString(str);\n      const bn = BN.fromHex(value, {\n        endian: 'little'\n      });\n\n      if (bn.toNumber() < Number.MAX_SAFE_INTEGER) {\n        return bn.toNumber();\n      } else if (typeof BigInt === 'function') {\n        return BigInt(bn.toString());\n      } else {\n        return bn.toString();\n      }\n    }\n  }\n\n}\n\n/**\n * decimal int or hex str to number or bigint\n */\nexport function int2Value(str: string): number | bigint | string {\n\n  if (/^(-?\\d+)$/.test(str) || /^0x([0-9a-fA-F]+)$/.test(str)) {\n\n    const bn = str.startsWith('0x') ? new BN(str.substring(2), 16) : new BN(str, 10);\n\n    if (bn.toNumber() < Number.MAX_SAFE_INTEGER) {\n      return bn.toNumber();\n    } else if (typeof BigInt === 'function') {\n      return BigInt(bn.toString());\n    } else {\n      return bn.toString();\n    }\n\n  } else {\n    throw new Error(`invalid str '${str}' to convert to int`);\n  }\n}\n\n\n\n\nexport function intValue2hex(val: number | bigint): string {\n  let hex = val.toString(16);\n  if (hex.length % 2 === 1) {\n    hex = '0' + hex;\n  }\n  return hex;\n}\n\nexport function parseLiteral(l: string): [string /*asm*/, ValueType, VariableType] {\n\n  // bool\n  if (l === 'false') {\n    return ['OP_FALSE', false, VariableType.BOOL];\n  }\n  if (l === 'true') {\n    return ['OP_TRUE', true, VariableType.BOOL];\n  }\n\n  // hex int\n  let m = /^(0x[0-9a-fA-F]+)$/.exec(l);\n  if (m) {\n    return [int2Asm(m[1]), int2Value(m[1]), VariableType.INT];\n  }\n\n  // decimal int\n  m = /^(-?\\d+)$/.exec(l);\n  if (m) {\n    return [int2Asm(m[1]), int2Value(m[1]), VariableType.INT];\n  }\n\n  // bytes\n  // note: special handling of empty bytes b''\n  m = /^b'([\\da-fA-F]*)'$/.exec(l);\n  if (m) {\n    const hexString = getValidatedHexString(m[1]);\n    if (hexString === '') {\n      return ['OP_0', hexString, VariableType.BYTES];\n    }\n\n    if (hexString.length / 2 > 1) {\n      return [hexString, hexString, VariableType.BYTES];\n    }\n\n\n    const intValue = parseInt(hexString, 16);\n\n    if (intValue >= 1 && intValue <= 16) {\n      return [`OP_${intValue}`, hexString, VariableType.BYTES];\n    }\n\n    return [hexString, hexString, VariableType.BYTES];\n  }\n\n\n  // PrivKey\n  // 1) decimal int\n  m = /^PrivKey\\((-?\\d+)\\)$/.exec(l);\n  if (m) {\n    return [int2Asm(m[1]), int2Value(m[1]), VariableType.PRIVKEY];\n  }\n  // 2) hex int\n  m = /^PrivKey\\((0x[0-9a-fA-F]+)\\)$/.exec(l);\n  if (m) {\n    return [int2Asm(m[1]), int2Value(m[1]), VariableType.PRIVKEY];\n  }\n\n  // PubKey\n  m = /^PubKey\\(b'([\\da-fA-F]+)'\\)$/.exec(l);\n  if (m) {\n    const value = getValidatedHexString(m[1]);\n    return [value, value, VariableType.PUBKEY];\n  }\n\n  // Sig\n  m = /^Sig\\(b'([\\da-fA-F]+)'\\)$/.exec(l);\n  if (m) {\n    const value = getValidatedHexString(m[1]);\n    return [value, value, VariableType.SIG];\n  }\n\n  // Ripemd160\n  m = /^Ripemd160\\(b'([\\da-fA-F]+)'\\)$/.exec(l);\n  if (m) {\n    const value = getValidatedHexString(m[1]);\n    return [value, value, VariableType.RIPEMD160];\n  }\n\n  // Sha1\n  m = /^Sha1\\(b'([\\da-fA-F]+)'\\)$/.exec(l);\n  if (m) {\n    const value = getValidatedHexString(m[1]);\n    return [value, value, VariableType.SHA1];\n  }\n\n  // Sha256\n  m = /^Sha256\\(b'([\\da-fA-F]+)'\\)$/.exec(l);\n  if (m) {\n    const value = getValidatedHexString(m[1]);\n    return [value, value, VariableType.SHA256];\n  }\n\n  // SigHashType\n  m = /^SigHashType\\(b'([\\da-fA-F]+)'\\)$/.exec(l);\n  if (m) {\n    const bn = new BN(getValidatedHexString(m[1]), 16);\n    return [bn.toString('hex', 2), bn.toNumber(), VariableType.SIGHASHTYPE];\n  }\n\n  // SigHashPreimage\n  m = /^SigHashPreimage\\(b'([\\da-fA-F]+)'\\)$/.exec(l);\n  if (m) {\n    const value = getValidatedHexString(m[1]);\n    return [value, value, VariableType.SIGHASHPREIMAGE];\n  }\n\n  // OpCodeType\n  m = /^OpCodeType\\(b'([\\da-fA-F]+)'\\)$/.exec(l);\n  if (m) {\n    const value = getValidatedHexString(m[1]);\n    return [value, value, VariableType.OPCODETYPE];\n  }\n\n  // Struct\n  m = /^\\{([\\w(){}[\\],\\s']+)\\}$/.exec(l);\n  if (m) {\n    // we use object to constructor a struct, no use literal, so here we return empty\n    return ['', '', VariableType.STRUCT];\n  }\n\n  throw new Error(`<${l}> cannot be cast to ASM format, only sCrypt native types supported`);\n\n}\n\n\n\n/**\n * convert literals to Scrypt Type\n */\nexport function literal2ScryptType(l: string): ScryptType {\n\n  const [asm, value, type] = parseLiteral(l);\n  switch (type) {\n    case VariableType.BOOL:\n      return new Bool(value as boolean);\n    case VariableType.INT:\n      return new Int(value as number);\n    case VariableType.BYTES:\n      return new Bytes(value as string);\n    case VariableType.PRIVKEY:\n      return new PrivKey(value as bigint);\n    case VariableType.PUBKEY:\n      return new PubKey(value as string);\n    case VariableType.SIG:\n      return new Sig(value as string);\n    case VariableType.RIPEMD160:\n      return new Ripemd160(value as string);\n    case VariableType.SHA1:\n      return new Sha1(value as string);\n    case VariableType.SHA256:\n      return new Sha256(value as string);\n    case VariableType.SIGHASHTYPE:\n      return new SigHashType(value as number);\n    case VariableType.SIGHASHPREIMAGE:\n      return new SigHashPreimage(value as string);\n    case VariableType.OPCODETYPE:\n      return new OpCodeType(value as string);\n    default:\n      throw new Error(`<${l}> cannot be cast to ScryptType, only sCrypt native types supported`);\n  }\n}\n\n\nexport function asm2ScryptType(type: string, asm: string) {\n\n  switch (type) {\n    case VariableType.BOOL:\n      return new Bool(BN.fromString(asm) > 0 ? true : false);\n    case VariableType.INT:\n      return new Int(asm2int(asm));\n    case VariableType.BYTES:\n      return new Bytes(asm);\n    case VariableType.PRIVKEY:\n      return new PrivKey(asm2int(asm) as bigint);\n    case VariableType.PUBKEY:\n      return new PubKey(asm);\n    case VariableType.SIG:\n      return new Sig(asm);\n    case VariableType.RIPEMD160:\n      return new Ripemd160(asm);\n    case VariableType.SHA1:\n      return new Sha1(asm);\n    case VariableType.SHA256:\n      return new Sha256(asm);\n    case VariableType.SIGHASHTYPE:\n      return new SigHashType(asm2int(asm) as number);\n    case VariableType.SIGHASHPREIMAGE:\n      return new SigHashPreimage(asm);\n    case VariableType.OPCODETYPE:\n      return new OpCodeType(asm);\n    default:\n      throw new Error(`<${type}> cannot be cast to ScryptType, only sCrypt native types supported`);\n  }\n\n}\n\n\n\nexport function bytes2Literal(bytearray: number[], type: string): string {\n\n  switch (type) {\n    case 'bool':\n      return BN.fromBuffer(bytearray, { endian: 'little' }) > 0 ? 'true' : 'false';\n\n    case 'int':\n    case 'PrivKey':\n      return BN.fromSM(bytearray, { endian: 'little' }).toString();\n\n    case 'bytes':\n      return `b'${bytesToHexString(bytearray)}'`;\n\n    default:\n      return `b'${bytesToHexString(bytearray)}'`;\n  }\n\n}\n\nexport function bytesToHexString(bytearray: number[]): string {\n  return bytearray.reduce(function (o, c) { return o += ('0' + (c & 0xFF).toString(16)).slice(-2); }, '');\n}\n\nexport function hexStringToBytes(hex: string): number[] {\n\n  getValidatedHexString(hex);\n\n  return hex.split('')\n    .reduce(function (o, c, i) {\n      if (i % 2 === 0) {\n        o.push(c);\n      } else {\n        o[o.length - 1] += c;\n      }\n      return o;\n    }, new Array<string>())\n    .map(b => parseInt(b, 16));\n}\n\n\nexport function getValidatedHexString(hex: string, allowEmpty = true): string {\n\n  const ret = hex.trim();\n\n  if (ret.length < 1 && !allowEmpty) {\n    throw new Error('can\\'t be empty string');\n  }\n\n  if (ret.length % 2) {\n    throw new Error(`${ret} should have even length`);\n  }\n\n  if (ret.length > 0 && !(/^[\\da-f]+$/i.test(ret))) {\n    throw new Error(`${ret} should only contain [0-9] or characters [a-fA-F]`);\n  }\n\n  return ret;\n}\n\nexport function signTx(tx, privateKey, lockingScriptASM: string, inputAmount: number, inputIndex = 0, sighashType = DEFAULT_SIGHASH_TYPE, flags = DEFAULT_FLAGS) {\n\n  if (!tx) {\n    throw new Error('param tx can not be empty');\n  }\n\n  if (!privateKey) {\n    throw new Error('param privateKey can not be empty');\n  }\n\n  if (!lockingScriptASM) {\n    throw new Error('param lockingScriptASM can not be empty');\n  }\n\n  if (!inputAmount) {\n    throw new Error('param inputAmount can not be empty');\n  }\n\n  return bsv.Transaction.sighash.sign(\n    tx, privateKey, sighashType, inputIndex,\n    bsv.Script.fromASM(lockingScriptASM), new bsv.crypto.BN(inputAmount), flags\n  ).toTxFormat();\n}\n\nexport function toHex(x: { toString(format: 'hex'): string }): string {\n  return x.toString('hex');\n}\n\nexport function getPreimage(tx, inputLockingScriptASM: string, inputAmount: number, inputIndex = 0, sighashType = DEFAULT_SIGHASH_TYPE, flags = DEFAULT_FLAGS): SigHashPreimage {\n  const preimageBuf = bsv.Transaction.sighash.sighashPreimage(tx, sighashType, inputIndex, bsv.Script.fromASM(inputLockingScriptASM), new bsv.crypto.BN(inputAmount), flags);\n  return new SigHashPreimage(preimageBuf.toString('hex'));\n}\n\n// Converts a number into a sign-magnitude representation of certain size as a string\n// Throws if the number cannot be accommodated\n// Often used to append numbers to OP_RETURN, which are read in contracts\n// Support Bigint\nexport function num2bin(n: number | bigint | bsv.crypto.BN, dataLen: number): string {\n  const num = new BN(n);\n  if (num.eqn(0)) {\n    return '00'.repeat(dataLen);\n  }\n  const s = num.toSM({ endian: 'little' }).toString('hex');\n\n  const byteLen_ = s.length / 2;\n  if (byteLen_ > dataLen) {\n    throw new Error(`${n} cannot fit in ${dataLen} byte[s]`);\n  }\n  if (byteLen_ === dataLen) {\n    return s;\n  }\n\n  const paddingLen = dataLen - byteLen_;\n  const lastByte = s.substring(s.length - 2);\n  const rest = s.substring(0, s.length - 2);\n  let m = parseInt(lastByte, 16);\n  if (num.isNeg) {\n    // reset sign bit\n    m &= 0x7F;\n  }\n  let mHex = m.toString(16);\n  if (mHex.length < 2) {\n    mHex = '0' + mHex;\n  }\n\n  const padding = n > 0 ? '00'.repeat(paddingLen) : '00'.repeat(paddingLen - 1) + '80';\n  return rest + mHex + padding;\n}\n\n//Support Bigint\nexport function bin2num(s: string | Buffer): number | bigint | string {\n  const hex = s.toString('hex');\n  const lastByte = hex.substring(hex.length - 2);\n  const rest = hex.substring(0, hex.length - 2);\n  const m = parseInt(lastByte, 16);\n  const n = m & 0x7F;\n  let nHex = n.toString(16);\n  if (nHex.length < 2) {\n    nHex = '0' + nHex;\n  }\n  //Support negative number\n  let bn = BN.fromHex(rest + nHex, { endian: 'little' });\n  if (m >> 7) {\n    bn = bn.neg();\n  }\n\n  if (typeof BigInt === 'function') {\n    return BigInt(bn);\n  } else if (bn.toNumber() < Number.MAX_SAFE_INTEGER && bn.toNumber() > Number.MIN_SAFE_INTEGER) {\n    return bn.toNumber();\n  } else {\n    return bn.toString();\n  }\n}\n\n\ndeclare let window: any;\n\nexport function isNode(): boolean {\n  return typeof window === 'undefined' && typeof process === 'object';\n}\n\n\nexport function path2uri(path: string): string {\n\n  if (isNode()) {\n    return pathToFileURL(path).toString();\n  } else {\n    return path;\n  }\n}\n\nexport function uri2path(uri: string): string {\n  if (isNode()) {\n    return fileURLToPath(uri);\n  } else {\n    return uri;\n  }\n\n}\n\n/**\n * @deprecated\n * convert literals to script ASM format\n */\nexport function literal2Asm(l: string): [string, string] {\n  const [asm, _, type] = parseLiteral(l);\n  return [asm, type];\n}\n\n\n\nexport function findStructByName(name: string, s: StructEntity[]): StructEntity {\n  return s.find(s => {\n    return s.name == name;\n  });\n}\n\n\nexport function isStructType(type: string): boolean {\n  return /^struct\\s(\\w+)\\s\\{\\}$/.test(type);\n}\n\n\n\n// test struct Token {}[3], int[3], st.b.c[3]\nexport function isArrayType(type: string): boolean {\n  return /^\\w[\\w.\\s{}]+(\\[[\\w.]+\\])+$/.test(type);\n}\n\nexport function getStructNameByType(type: string): string {\n  const m = /^struct\\s(\\w+)\\s\\{\\}$/.exec(type.trim());\n  if (m) {\n    return m[1];\n  }\n  return '';\n}\n\n\nexport function findStructByType(type: string, s: StructEntity[]): StructEntity | undefined {\n  const name = getStructNameByType(type);\n  if (name) {\n    return findStructByName(name, s);\n  }\n  return undefined;\n}\n\n\n\nexport function checkStruct(s: StructEntity, arg: Struct, typeResolver: TypeResolver): void {\n\n  s.params.forEach(p => {\n    const member = arg.memberByKey(p.name);\n\n    const finalType = typeOfArg(member);\n\n    const paramFinalType = typeResolver(p.type);\n\n    if (finalType === 'undefined') {\n      throw new Error(`argument of type struct ${s.name} missing member ${p.name}`);\n    } else if (finalType != paramFinalType) {\n      if (isArrayType(paramFinalType)) {\n        const [elemTypeName, arraySize] = arrayTypeAndSize(paramFinalType);\n        if (Array.isArray(arg.value[p.name])) {\n          if (!checkArray(arg.value[p.name] as SupportedParamType[], [elemTypeName, arraySize])) {\n            throw new Error(`checkArray fail, struct ${s.name} property ${p.name} should be ${paramFinalType}`);\n          }\n        } else {\n          throw new Error(`struct ${s.name} property ${p.name} should be ${paramFinalType}`);\n        }\n      } else {\n        throw new Error(`wrong argument type, expected ${paramFinalType} but got ${finalType}`);\n      }\n    }\n  });\n\n  const members = s.params.map(p => p.name);\n  arg.getMembers().forEach(key => {\n    if (!members.includes(key)) {\n      throw new Error(`${key} is not a member of struct ${s.name}`);\n    }\n  });\n}\n\n\n/**\n * return eg. int[N][N][4] => ['int', [\"N\",\"N\",\"4\"]]\n * @param arrayTypeName \n */\nexport function arrayTypeAndSizeStr(arrayTypeName: string): [string, Array<string>] {\n\n  const arraySizes: Array<string> = [];\n  [...arrayTypeName.matchAll(/\\[([\\w.]+)\\]+/g)].map(match => {\n    arraySizes.push(match[1]);\n  });\n\n  const group = arrayTypeName.split('[');\n  const elemTypeName = group[0];\n  return [elemTypeName, arraySizes];\n}\n\n\n/**\n * return eg. int[2][3][4] => ['int', [2,3,4]]\n * @param arrayTypeName  eg. int[2][3][4]\n */\nexport function arrayTypeAndSize(arrayTypeName: string): [string, Array<number>] {\n  const [elemTypeName, arraySizes] = arrayTypeAndSizeStr(arrayTypeName);\n  return [elemTypeName, arraySizes.map(size => parseInt(size))];\n}\n\nexport function toLiteralArrayType(elemTypeName: string, sizes: Array<number>): string {\n  return [elemTypeName, sizes.map(size => `[${size}]`).join('')].join('');\n}\n\n\n/**\n * return eg. int[2][3][4] => int[3][4]\n * @param arrayTypeName  eg. int[2][3][4]\n */\nexport function subArrayType(arrayTypeName: string): string {\n  const [elemTypeName, sizes] = arrayTypeAndSize(arrayTypeName);\n  return toLiteralArrayType(elemTypeName, sizes.slice(1));\n}\n\n\nexport function checkArray(args: SupportedParamType[], arrayInfo: [string, Array<number>]): boolean {\n\n  const [elemTypeName, arraySizes] = arrayInfo;\n\n  if (!Array.isArray(args)) {\n    return false;\n  }\n\n  const len = arraySizes[0];\n\n  if (!len) {\n    return false;\n  }\n\n  if (args.length !== len) {\n    return false;\n  }\n\n  if (!args.every(arg => {\n    if (Array.isArray(arg)) {\n      return checkArray(arg, [elemTypeName, arraySizes.slice(1)]);\n    } else {\n\n      const scryptType = typeOfArg(arg);\n\n      return scryptType === elemTypeName && arraySizes.length == 1;\n    }\n  })) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function subscript(index: number, arraySizes: Array<number>): string {\n\n  if (arraySizes.length == 1) {\n    return `[${index}]`;\n  } else if (arraySizes.length > 1) {\n    const subArraySizes = arraySizes.slice(1);\n    const offset = subArraySizes.reduce(function (acc, val) { return acc * val; }, 1);\n    return `[${Math.floor(index / offset)}]${subscript(index % offset, subArraySizes)}`;\n  }\n}\n\nexport function flatternArray(arg: Array<any>, name: string, finalType: string): Array<{ value: ScryptType, name: string, type: string }> {\n\n  if (!Array.isArray(arg)) {\n    throw new Error('flatternArray only work on array');\n  }\n\n  const [elemTypeName, arraySizes] = arrayTypeAndSize(finalType);\n\n  return arg.map((item, index) => {\n\n    if (typeof item === 'boolean') {\n      item = new Bool(item as boolean);\n    } else if (typeof item === 'number') {\n      item = new Int(item as number);\n    } else if (typeof item === 'bigint') {\n      item = new Int(item as bigint);\n    } else if (Array.isArray(item)) {\n      return flatternArray(item, `${name}[${index}]`, subArrayType(finalType));\n    } else if (Struct.isStruct(item)) {\n      return flatternStruct(item, `${name}[${index}]`);\n    }\n    else {\n      item = item as ScryptType;\n    }\n\n    return {\n      value: item,\n      name: `${name}${subscript(index, arraySizes)}`,\n      type: elemTypeName\n    };\n  }).flat(Infinity) as Array<{ value: ScryptType, name: string, type: string }>;\n}\n\nexport function flatternStruct(arg: SupportedParamType, name: string): Array<{ value: ScryptType, name: string, type: string }> {\n  if (Struct.isStruct(arg)) {\n    const argS = arg as Struct;\n    const keys = argS.getMembers();\n\n    return keys.map(key => {\n      let member = argS.memberByKey(key);\n      if (Struct.isStruct(member)) {\n        return flatternStruct(member as Struct, `${name}.${key}`);\n      } else if (Array.isArray(member)) {\n        const finalType = argS.getMemberAstFinalType(key);\n        return flatternArray(member, `${name}.${key}`, finalType);\n      } else {\n        member = member as ScryptType;\n        return {\n          value: member,\n          name: `${name}.${key}`,\n          type: member.type\n        };\n      }\n    }).flat(Infinity) as Array<{ value: ScryptType, name: string, type: string }>;\n\n  } else {\n    throw new Error(`${arg} should be struct`);\n  }\n}\n\n\n\nexport function typeOfArg(arg: SupportedParamType): string {\n\n  if (arg instanceof ScryptType) {\n    const scryptType = (arg as ScryptType).finalType;\n    return scryptType;\n  }\n\n  const typeofArg = typeof arg;\n\n  if (typeofArg === 'boolean') {\n    return 'bool';\n  }\n\n  if (typeofArg === 'number') {\n    return 'int';\n  }\n\n  if (typeofArg === 'bigint') {\n    return 'int';\n  }\n\n  if (typeofArg === 'string') {\n    return 'int';\n  }\n\n  return typeof arg;\n\n}\n\n\nexport function readFileByLine(path: string, index: number): string {\n\n  let result = '';\n  fs.readFileSync(path, 'utf8').split(/\\r?\\n/).every(function (line, i) {\n    if (i === (index - 1)) {\n      result = line;\n      return false;\n    }\n    return true;\n  });\n\n  return result;\n}\n\n\nexport function isEmpty(obj: unknown): boolean {\n  return Object.keys(obj).length === 0 && obj.constructor === Object;\n}\n\nfunction findCompiler(directory): string | undefined {\n  if (!directory) {\n    directory = dirname(module.parent.filename);\n  }\n  const compiler = resolve(directory, 'compiler');\n  if (fs.existsSync(compiler) && fs.statSync(compiler).isDirectory()) {\n    const scryptc = join(compiler, '..', getPlatformScryptc());\n    return scryptc;\n  }\n  const parent = resolve(directory, '..');\n  if (parent === directory) {\n    return undefined;\n  }\n  return findCompiler(parent);\n}\n\n\n\nexport function getCIScryptc(): string | undefined {\n  const scryptc = findCompiler(__dirname);\n  return fs.existsSync(scryptc) ? scryptc : undefined;\n}\n\nexport function compileContract(file: string, options?: {\n  out?: string,\n  sourceMap?: boolean\n}): CompileResult {\n  console.log(`Compiling contract ${file} ...`);\n  options = Object.assign({\n    out: join(__dirname, '../out'),\n    sourceMap: true\n  }, options);\n  if (!fs.existsSync(file)) {\n    throw (`file ${file} not exists!`);\n  }\n\n  const argv = minimist(process.argv.slice(2));\n\n  let scryptc = argv.scryptc;\n  if (argv.ci || !scryptc) {\n    scryptc = getCIScryptc();\n  }\n\n  const result = compile(\n    { path: file },\n    {\n      desc: true, debug: options.sourceMap, outputDir: options.out,\n      cmdPrefix: scryptc\n    }\n  );\n\n  return result;\n}\n\n\nexport function newCall(Cls, args: Array<SupportedParamType>) {\n  return new (Function.prototype.bind.apply(Cls, [null].concat(args)));\n}\n\n\n\nexport function genLaunchConfigFile(constructorArgs: SupportedParamType[], pubFuncArgs: SupportedParamType[],\n  pubFunc: string, name: string, program: string, txContext: TxContext, asmArgs: AsmVarValues): FileUri {\n\n  // some desc without sourceMap will not have file property.\n  if (!program) {\n    return '';\n  }\n\n  const debugConfig: DebugConfiguration = {\n    type: 'scrypt',\n    request: 'launch',\n    internalConsoleOptions: 'openOnSessionStart',\n    name: name,\n    program: program,\n    constructorArgs: constructorArgs,\n    pubFunc: pubFunc,\n    pubFuncArgs: pubFuncArgs\n  };\n\n\n\n\n  const debugTxContext = {};\n\n  if (!isEmpty(txContext)) {\n\n    const tx = txContext.tx || '';\n    const inputIndex = txContext.inputIndex || 0;\n    const inputSatoshis = txContext.inputSatoshis || 0;\n    if (tx) {\n      Object.assign(debugTxContext, { hex: tx.toString(), inputIndex, inputSatoshis });\n    }\n    if (typeof txContext.opReturn === 'string') {\n      Object.assign(debugTxContext, { opReturn: txContext.opReturn });\n    }\n  }\n\n\n\n  if (!isEmpty(asmArgs)) {\n    Object.assign(debugConfig, { asmArgs: asmArgs });\n  }\n\n\n\n  if (!isEmpty(debugTxContext)) {\n    Object.assign(debugConfig, { txContext: debugTxContext });\n  }\n\n  const launch: DebugLaunch = {\n    version: '0.2.0',\n    configurations: [debugConfig]\n  };\n\n  const jsonstr = JSON.stringify(launch, (key, value) => (\n    typeof value === 'bigint'\n      ? value.toString()\n      : value // return everything else unchanged\n  ), 2);\n\n  if (isNode()) {\n    const filename = `${name}-launch.json`;\n    const file = join(fs.mkdtempSync(`${tmpdir()}${sep}sCrypt.`), filename);\n    fs.writeFileSync(file, jsonstr);\n    return path2uri(file);\n  } else {\n    console.error(`${pubFunc}() call fail, see launch.json`, jsonstr);\n  }\n\n}\n\n/***\n * resolve type\n */\nexport function resolveType(alias: AliasEntity[], type: string): string {\n\n\n  if (isArrayType(type)) {\n    const [elemTypeName, sizes] = arrayTypeAndSize(type);\n    return toLiteralArrayType(resolveType(alias, elemTypeName), sizes);\n  }\n\n  if (isStructType(type)) {\n    return resolveType(alias, getStructNameByType(type));\n  }\n\n  const a = alias.find(a => {\n    return a.name === type;\n  });\n\n  if (a) {\n    return resolveType(alias, a.type);\n  } else {\n    if (BasicType.indexOf(type) > -1) {\n      return type;\n    } else { // should be struct if it is not basic type\n      return `struct ${type} {}`;\n    }\n  }\n}\n\n\nexport function ansiRegex({ onlyFirst = false } = {}) {\n  const pattern = [\n    '[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:[a-zA-Z\\\\d]*(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)',\n    '(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))'\n  ].join('|');\n\n  return new RegExp(pattern, onlyFirst ? undefined : 'g');\n}\n\n\nexport function stripAnsi(string) {\n  if (typeof string !== 'string') {\n    throw new TypeError(`Expected a \\`string\\`, got \\`${typeof string}\\``);\n  }\n\n  return string.replace(ansiRegex(), '');\n}\n\n\nexport function createStruct(contract: AbstractContract, sType: typeof Struct, name: string, opcodesMap: Map<string, string>, finalTypeResolver: TypeResolver) {\n\n  const obj = Object.create({});\n  sType.structAst.params.forEach(param => {\n\n    const finalType = finalTypeResolver(param.type);\n\n    if (isStructType(finalType)) {\n\n      const stclass = contract.getTypeClassByType(param.type);\n\n      Object.assign(obj, {\n        [param.name]: createStruct(contract, stclass as typeof Struct, `${name}.${param.name}`, opcodesMap, finalTypeResolver)\n      });\n\n    } else if (isArrayType(finalType)) {\n\n      Object.assign(obj, {\n        [param.name]: createArray(contract, finalType, `${name}.${param.name}`, opcodesMap, finalTypeResolver)\n      });\n\n    } else {\n\n      Object.assign(obj, {\n        [param.name]: asm2ScryptType(finalType, opcodesMap.get(`$${name}.${param.name}`))\n      });\n\n    }\n\n  });\n\n\n  return new sType(obj);\n}\n\n\n\n\nexport function createArray(contract: AbstractContract, type: string, name: string, opcodesMap: Map<string, string>, finalTypeResolver: TypeResolver) {\n\n  const arrays = [];\n  const [elemTypeName, sizes] = arrayTypeAndSize(type);\n\n  const arraylen = sizes[0];\n  if (sizes.length === 1) {\n    for (let index = 0; index < arraylen; index++) {\n      const finalType = finalTypeResolver(elemTypeName);\n\n      if (isStructType(finalType)) {\n\n        const stclass = contract.getTypeClassByType(finalType);\n        arrays.push(createStruct(contract, stclass as typeof Struct, `${name}[${index}]`, opcodesMap, finalTypeResolver));\n      } else {\n\n        arrays.push(asm2ScryptType(finalType, opcodesMap.get(`$${name}[${index}]`)));\n      }\n\n    }\n\n  } else {\n\n    for (let index = 0; index < arraylen; index++) {\n      const finalType = finalTypeResolver(elemTypeName);\n      const subArrayType = [finalType, sizes.slice(1).map(size => `[${size}]`).join('')].join('');\n      arrays.push(createArray(contract, subArrayType, `${name}[${index}]`, opcodesMap, finalTypeResolver));\n    }\n  }\n\n  return arrays;\n}\n\n\nexport function toLiteral(value: any): string {\n\n  if (Array.isArray(value)) {\n\n    return `[${value.map(i => toLiteral(i))}]`;\n  } else {\n\n    return value instanceof ScryptType ? value.toLiteral() : value;\n  }\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"4f16690fbb04edb34cf2e506410aeb4b3806e5a5"},"C:\\Users\\myland\\code\\scryptlib\\src\\scryptTypes.ts":{"path":"C:\\Users\\myland\\code\\scryptlib\\src\\scryptTypes.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":370}},"2":{"start":{"line":4,"column":16},"end":{"line":4,"column":34}},"3":{"start":{"line":6,"column":4},"end":{"line":17,"column":5}},"4":{"start":{"line":7,"column":8},"end":{"line":7,"column":26}},"5":{"start":{"line":9,"column":9},"end":{"line":17,"column":5}},"6":{"start":{"line":10,"column":8},"end":{"line":10,"column":27}},"7":{"start":{"line":12,"column":9},"end":{"line":17,"column":5}},"8":{"start":{"line":13,"column":8},"end":{"line":13,"column":17}},"9":{"start":{"line":16,"column":8},"end":{"line":16,"column":53}},"10":{"start":{"line":19,"column":0},"end":{"line":19,"column":36}},"11":{"start":{"line":22,"column":8},"end":{"line":31,"column":9}},"12":{"start":{"line":23,"column":12},"end":{"line":23,"column":32}},"13":{"start":{"line":24,"column":12},"end":{"line":24,"column":45}},"14":{"start":{"line":25,"column":38},"end":{"line":25,"column":73}},"15":{"start":{"line":26,"column":12},"end":{"line":26,"column":33}},"16":{"start":{"line":27,"column":12},"end":{"line":27,"column":28}},"17":{"start":{"line":30,"column":12},"end":{"line":30,"column":86}},"18":{"start":{"line":34,"column":8},"end":{"line":34,"column":27}},"19":{"start":{"line":37,"column":8},"end":{"line":38,"column":49}},"20":{"start":{"line":38,"column":12},"end":{"line":38,"column":49}},"21":{"start":{"line":39,"column":8},"end":{"line":39,"column":25}},"22":{"start":{"line":42,"column":8},"end":{"line":42,"column":29}},"23":{"start":{"line":45,"column":8},"end":{"line":45,"column":26}},"24":{"start":{"line":48,"column":8},"end":{"line":48,"column":25}},"25":{"start":{"line":51,"column":8},"end":{"line":51,"column":32}},"26":{"start":{"line":54,"column":8},"end":{"line":54,"column":18}},"27":{"start":{"line":57,"column":0},"end":{"line":57,"column":32}},"28":{"start":{"line":60,"column":8},"end":{"line":60,"column":22}},"29":{"start":{"line":63,"column":8},"end":{"line":63,"column":38}},"30":{"start":{"line":66,"column":0},"end":{"line":66,"column":18}},"31":{"start":{"line":69,"column":8},"end":{"line":69,"column":23}},"32":{"start":{"line":72,"column":8},"end":{"line":72,"column":38}},"33":{"start":{"line":75,"column":0},"end":{"line":75,"column":20}},"34":{"start":{"line":78,"column":8},"end":{"line":78,"column":24}},"35":{"start":{"line":81,"column":8},"end":{"line":81,"column":77}},"36":{"start":{"line":84,"column":0},"end":{"line":84,"column":22}},"37":{"start":{"line":87,"column":8},"end":{"line":87,"column":22}},"38":{"start":{"line":90,"column":8},"end":{"line":96,"column":9}},"39":{"start":{"line":91,"column":12},"end":{"line":91,"column":45}},"40":{"start":{"line":94,"column":22},"end":{"line":94,"column":33}},"41":{"start":{"line":95,"column":12},"end":{"line":95,"column":59}},"42":{"start":{"line":99,"column":0},"end":{"line":99,"column":26}},"43":{"start":{"line":102,"column":8},"end":{"line":102,"column":24}},"44":{"start":{"line":105,"column":8},"end":{"line":105,"column":85}},"45":{"start":{"line":108,"column":0},"end":{"line":108,"column":24}},"46":{"start":{"line":111,"column":8},"end":{"line":111,"column":24}},"47":{"start":{"line":114,"column":8},"end":{"line":114,"column":82}},"48":{"start":{"line":117,"column":0},"end":{"line":117,"column":18}},"49":{"start":{"line":120,"column":8},"end":{"line":120,"column":24}},"50":{"start":{"line":123,"column":8},"end":{"line":123,"column":88}},"51":{"start":{"line":126,"column":0},"end":{"line":126,"column":30}},"52":{"start":{"line":129,"column":8},"end":{"line":129,"column":24}},"53":{"start":{"line":132,"column":8},"end":{"line":132,"column":83}},"54":{"start":{"line":135,"column":0},"end":{"line":135,"column":20}},"55":{"start":{"line":138,"column":8},"end":{"line":138,"column":24}},"56":{"start":{"line":141,"column":8},"end":{"line":141,"column":85}},"57":{"start":{"line":144,"column":0},"end":{"line":144,"column":24}},"58":{"start":{"line":146,"column":0},"end":{"line":152,"column":56}},"59":{"start":{"line":147,"column":4},"end":{"line":147,"column":40}},"60":{"start":{"line":148,"column":4},"end":{"line":148,"column":42}},"61":{"start":{"line":149,"column":4},"end":{"line":149,"column":46}},"62":{"start":{"line":150,"column":4},"end":{"line":150,"column":47}},"63":{"start":{"line":151,"column":4},"end":{"line":151,"column":60}},"64":{"start":{"line":155,"column":8},"end":{"line":155,"column":22}},"65":{"start":{"line":158,"column":21},"end":{"line":158,"column":45}},"66":{"start":{"line":159,"column":8},"end":{"line":161,"column":9}},"67":{"start":{"line":160,"column":12},"end":{"line":160,"column":34}},"68":{"start":{"line":162,"column":8},"end":{"line":162,"column":43}},"69":{"start":{"line":165,"column":22},"end":{"line":165,"column":24}},"70":{"start":{"line":166,"column":20},"end":{"line":166,"column":31}},"71":{"start":{"line":167,"column":8},"end":{"line":170,"column":9}},"72":{"start":{"line":168,"column":12},"end":{"line":168,"column":47}},"73":{"start":{"line":169,"column":12},"end":{"line":169,"column":49}},"74":{"start":{"line":171,"column":8},"end":{"line":174,"column":9}},"75":{"start":{"line":172,"column":12},"end":{"line":172,"column":41}},"76":{"start":{"line":173,"column":12},"end":{"line":173,"column":43}},"77":{"start":{"line":175,"column":8},"end":{"line":178,"column":9}},"78":{"start":{"line":176,"column":12},"end":{"line":176,"column":39}},"79":{"start":{"line":177,"column":12},"end":{"line":177,"column":41}},"80":{"start":{"line":179,"column":8},"end":{"line":182,"column":9}},"81":{"start":{"line":180,"column":12},"end":{"line":180,"column":38}},"82":{"start":{"line":181,"column":12},"end":{"line":181,"column":40}},"83":{"start":{"line":183,"column":8},"end":{"line":186,"column":9}},"84":{"start":{"line":184,"column":12},"end":{"line":184,"column":41}},"85":{"start":{"line":185,"column":12},"end":{"line":185,"column":43}},"86":{"start":{"line":187,"column":8},"end":{"line":189,"column":9}},"87":{"start":{"line":188,"column":12},"end":{"line":188,"column":37}},"88":{"start":{"line":190,"column":8},"end":{"line":190,"column":70}},"89":{"start":{"line":193,"column":0},"end":{"line":193,"column":34}},"90":{"start":{"line":196,"column":8},"end":{"line":196,"column":24}},"91":{"start":{"line":197,"column":8},"end":{"line":197,"column":49}},"92":{"start":{"line":200,"column":8},"end":{"line":200,"column":58}},"93":{"start":{"line":204,"column":8},"end":{"line":204,"column":68}},"94":{"start":{"line":208,"column":8},"end":{"line":208,"column":58}},"95":{"start":{"line":212,"column":8},"end":{"line":212,"column":60}},"96":{"start":{"line":216,"column":20},"end":{"line":216,"column":52}},"97":{"start":{"line":217,"column":20},"end":{"line":217,"column":39}},"98":{"start":{"line":218,"column":22},"end":{"line":218,"column":74}},"99":{"start":{"line":219,"column":21},"end":{"line":219,"column":76}},"100":{"start":{"line":220,"column":8},"end":{"line":224,"column":10}},"101":{"start":{"line":228,"column":8},"end":{"line":228,"column":113}},"102":{"start":{"line":232,"column":8},"end":{"line":232,"column":112}},"103":{"start":{"line":236,"column":8},"end":{"line":236,"column":112}},"104":{"start":{"line":240,"column":8},"end":{"line":240,"column":96}},"105":{"start":{"line":244,"column":8},"end":{"line":244,"column":110}},"106":{"start":{"line":248,"column":8},"end":{"line":248,"column":102}},"107":{"start":{"line":251,"column":8},"end":{"line":251,"column":42}},"108":{"start":{"line":254,"column":8},"end":{"line":254,"column":94}},"109":{"start":{"line":257,"column":8},"end":{"line":268,"column":10}},"110":{"start":{"line":271,"column":0},"end":{"line":271,"column":42}},"111":{"start":{"line":274,"column":8},"end":{"line":274,"column":24}},"112":{"start":{"line":277,"column":8},"end":{"line":277,"column":89}},"113":{"start":{"line":280,"column":0},"end":{"line":280,"column":32}},"114":{"start":{"line":283,"column":8},"end":{"line":283,"column":17}},"115":{"start":{"line":284,"column":8},"end":{"line":284,"column":28}},"116":{"start":{"line":287,"column":26},"end":{"line":287,"column":75}},"117":{"start":{"line":288,"column":8},"end":{"line":288,"column":65}},"118":{"start":{"line":289,"column":24},"end":{"line":289,"column":26}},"119":{"start":{"line":290,"column":26},"end":{"line":290,"column":36}},"120":{"start":{"line":291,"column":8},"end":{"line":299,"column":11}},"121":{"start":{"line":292,"column":12},"end":{"line":296,"column":16}},"122":{"start":{"line":293,"column":16},"end":{"line":293,"column":36}},"123":{"start":{"line":295,"column":16},"end":{"line":295,"column":36}},"124":{"start":{"line":298,"column":12},"end":{"line":298,"column":42}},"125":{"start":{"line":300,"column":8},"end":{"line":300,"column":27}},"126":{"start":{"line":301,"column":8},"end":{"line":301,"column":36}},"127":{"start":{"line":302,"column":8},"end":{"line":302,"column":30}},"128":{"start":{"line":305,"column":8},"end":{"line":307,"column":9}},"129":{"start":{"line":306,"column":12},"end":{"line":306,"column":54}},"130":{"start":{"line":308,"column":8},"end":{"line":310,"column":21}},"131":{"start":{"line":309,"column":12},"end":{"line":309,"column":35}},"132":{"start":{"line":311,"column":8},"end":{"line":311,"column":25}},"133":{"start":{"line":317,"column":8},"end":{"line":319,"column":9}},"134":{"start":{"line":318,"column":12},"end":{"line":318,"column":56}},"135":{"start":{"line":320,"column":18},"end":{"line":320,"column":28}},"136":{"start":{"line":321,"column":8},"end":{"line":334,"column":11}},"137":{"start":{"line":322,"column":12},"end":{"line":333,"column":13}},"138":{"start":{"line":323,"column":16},"end":{"line":323,"column":30}},"139":{"start":{"line":325,"column":17},"end":{"line":333,"column":13}},"140":{"start":{"line":326,"column":16},"end":{"line":326,"column":40}},"141":{"start":{"line":328,"column":17},"end":{"line":333,"column":13}},"142":{"start":{"line":329,"column":16},"end":{"line":329,"column":39}},"143":{"start":{"line":331,"column":17},"end":{"line":333,"column":13}},"144":{"start":{"line":332,"column":16},"end":{"line":332,"column":39}},"145":{"start":{"line":337,"column":8},"end":{"line":339,"column":9}},"146":{"start":{"line":338,"column":12},"end":{"line":338,"column":62}},"147":{"start":{"line":340,"column":18},"end":{"line":340,"column":28}},"148":{"start":{"line":341,"column":8},"end":{"line":341,"column":37}},"149":{"start":{"line":347,"column":18},"end":{"line":347,"column":28}},"150":{"start":{"line":348,"column":8},"end":{"line":362,"column":9}},"151":{"start":{"line":349,"column":12},"end":{"line":349,"column":31}},"152":{"start":{"line":351,"column":13},"end":{"line":362,"column":9}},"153":{"start":{"line":352,"column":12},"end":{"line":352,"column":41}},"154":{"start":{"line":354,"column":13},"end":{"line":362,"column":9}},"155":{"start":{"line":355,"column":12},"end":{"line":355,"column":40}},"156":{"start":{"line":357,"column":13},"end":{"line":362,"column":9}},"157":{"start":{"line":358,"column":12},"end":{"line":358,"column":40}},"158":{"start":{"line":361,"column":12},"end":{"line":361,"column":33}},"159":{"start":{"line":368,"column":23},"end":{"line":368,"column":44}},"160":{"start":{"line":369,"column":8},"end":{"line":369,"column":41}},"161":{"start":{"line":375,"column":26},"end":{"line":375,"column":75}},"162":{"start":{"line":376,"column":28},"end":{"line":378,"column":10}},"163":{"start":{"line":377,"column":12},"end":{"line":377,"column":34}},"164":{"start":{"line":379,"column":8},"end":{"line":381,"column":9}},"165":{"start":{"line":380,"column":12},"end":{"line":380,"column":76}},"166":{"start":{"line":382,"column":8},"end":{"line":382,"column":52}},"167":{"start":{"line":385,"column":18},"end":{"line":385,"column":28}},"168":{"start":{"line":386,"column":8},"end":{"line":386,"column":30}},"169":{"start":{"line":389,"column":18},"end":{"line":389,"column":28}},"170":{"start":{"line":390,"column":8},"end":{"line":401,"column":9}},"171":{"start":{"line":391,"column":12},"end":{"line":391,"column":26}},"172":{"start":{"line":393,"column":13},"end":{"line":401,"column":9}},"173":{"start":{"line":394,"column":12},"end":{"line":394,"column":36}},"174":{"start":{"line":396,"column":13},"end":{"line":401,"column":9}},"175":{"start":{"line":397,"column":12},"end":{"line":397,"column":35}},"176":{"start":{"line":399,"column":13},"end":{"line":401,"column":9}},"177":{"start":{"line":400,"column":12},"end":{"line":400,"column":35}},"178":{"start":{"line":402,"column":8},"end":{"line":402,"column":22}},"179":{"start":{"line":405,"column":19},"end":{"line":410,"column":20}},"180":{"start":{"line":406,"column":12},"end":{"line":408,"column":13}},"181":{"start":{"line":407,"column":16},"end":{"line":407,"column":48}},"182":{"start":{"line":409,"column":12},"end":{"line":409,"column":47}},"183":{"start":{"line":411,"column":8},"end":{"line":411,"column":25}},"184":{"start":{"line":414,"column":18},"end":{"line":414,"column":28}},"185":{"start":{"line":415,"column":18},"end":{"line":422,"column":20}},"186":{"start":{"line":416,"column":12},"end":{"line":421,"column":13}},"187":{"start":{"line":417,"column":16},"end":{"line":417,"column":53}},"188":{"start":{"line":420,"column":16},"end":{"line":420,"column":56}},"189":{"start":{"line":423,"column":8},"end":{"line":423,"column":24}},"190":{"start":{"line":426,"column":18},"end":{"line":426,"column":28}},"191":{"start":{"line":427,"column":8},"end":{"line":442,"column":15}},"192":{"start":{"line":428,"column":12},"end":{"line":441,"column":13}},"193":{"start":{"line":429,"column":16},"end":{"line":437,"column":17}},"194":{"start":{"line":430,"column":20},"end":{"line":430,"column":74}},"195":{"start":{"line":432,"column":21},"end":{"line":437,"column":17}},"196":{"start":{"line":433,"column":20},"end":{"line":433,"column":81}},"197":{"start":{"line":436,"column":20},"end":{"line":436,"column":77}},"198":{"start":{"line":440,"column":16},"end":{"line":440,"column":61}},"199":{"start":{"line":445,"column":8},"end":{"line":445,"column":37}},"200":{"start":{"line":448,"column":0},"end":{"line":448,"column":24}},"201":{"start":{"line":450,"column":0},"end":{"line":464,"column":71}},"202":{"start":{"line":451,"column":4},"end":{"line":451,"column":34}},"203":{"start":{"line":452,"column":4},"end":{"line":452,"column":32}},"204":{"start":{"line":453,"column":4},"end":{"line":453,"column":36}},"205":{"start":{"line":454,"column":4},"end":{"line":454,"column":38}},"206":{"start":{"line":455,"column":4},"end":{"line":455,"column":40}},"207":{"start":{"line":456,"column":4},"end":{"line":456,"column":32}},"208":{"start":{"line":457,"column":4},"end":{"line":457,"column":44}},"209":{"start":{"line":458,"column":4},"end":{"line":458,"column":34}},"210":{"start":{"line":459,"column":4},"end":{"line":459,"column":38}},"211":{"start":{"line":460,"column":4},"end":{"line":460,"column":48}},"212":{"start":{"line":461,"column":4},"end":{"line":461,"column":56}},"213":{"start":{"line":462,"column":4},"end":{"line":462,"column":46}},"214":{"start":{"line":463,"column":4},"end":{"line":463,"column":38}},"215":{"start":{"line":465,"column":0},"end":{"line":465,"column":76}},"216":{"start":{"line":465,"column":57},"end":{"line":465,"column":74}},"217":{"start":{"line":466,"column":0},"end":{"line":479,"column":2}}},"fnMap":{"0":{"name":"toScryptType","decl":{"start":{"line":5,"column":9},"end":{"line":5,"column":21}},"loc":{"start":{"line":5,"column":25},"end":{"line":18,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":21,"column":4},"end":{"line":21,"column":5}},"loc":{"start":{"line":21,"column":23},"end":{"line":32,"column":5}},"line":21},"2":{"name":"(anonymous_2)","decl":{"start":{"line":33,"column":4},"end":{"line":33,"column":5}},"loc":{"start":{"line":33,"column":16},"end":{"line":35,"column":5}},"line":33},"3":{"name":"(anonymous_3)","decl":{"start":{"line":36,"column":4},"end":{"line":36,"column":5}},"loc":{"start":{"line":36,"column":20},"end":{"line":40,"column":5}},"line":36},"4":{"name":"(anonymous_4)","decl":{"start":{"line":41,"column":4},"end":{"line":41,"column":5}},"loc":{"start":{"line":41,"column":18},"end":{"line":43,"column":5}},"line":41},"5":{"name":"(anonymous_5)","decl":{"start":{"line":44,"column":4},"end":{"line":44,"column":5}},"loc":{"start":{"line":44,"column":15},"end":{"line":46,"column":5}},"line":44},"6":{"name":"(anonymous_6)","decl":{"start":{"line":47,"column":4},"end":{"line":47,"column":5}},"loc":{"start":{"line":47,"column":12},"end":{"line":49,"column":5}},"line":47},"7":{"name":"(anonymous_7)","decl":{"start":{"line":50,"column":4},"end":{"line":50,"column":5}},"loc":{"start":{"line":50,"column":13},"end":{"line":52,"column":5}},"line":50},"8":{"name":"(anonymous_8)","decl":{"start":{"line":53,"column":4},"end":{"line":53,"column":5}},"loc":{"start":{"line":53,"column":16},"end":{"line":55,"column":5}},"line":53},"9":{"name":"(anonymous_9)","decl":{"start":{"line":59,"column":4},"end":{"line":59,"column":5}},"loc":{"start":{"line":59,"column":24},"end":{"line":61,"column":5}},"line":59},"10":{"name":"(anonymous_10)","decl":{"start":{"line":62,"column":4},"end":{"line":62,"column":5}},"loc":{"start":{"line":62,"column":16},"end":{"line":64,"column":5}},"line":62},"11":{"name":"(anonymous_11)","decl":{"start":{"line":68,"column":4},"end":{"line":68,"column":5}},"loc":{"start":{"line":68,"column":25},"end":{"line":70,"column":5}},"line":68},"12":{"name":"(anonymous_12)","decl":{"start":{"line":71,"column":4},"end":{"line":71,"column":5}},"loc":{"start":{"line":71,"column":16},"end":{"line":73,"column":5}},"line":71},"13":{"name":"(anonymous_13)","decl":{"start":{"line":77,"column":4},"end":{"line":77,"column":5}},"loc":{"start":{"line":77,"column":26},"end":{"line":79,"column":5}},"line":77},"14":{"name":"(anonymous_14)","decl":{"start":{"line":80,"column":4},"end":{"line":80,"column":5}},"loc":{"start":{"line":80,"column":16},"end":{"line":82,"column":5}},"line":80},"15":{"name":"(anonymous_15)","decl":{"start":{"line":86,"column":4},"end":{"line":86,"column":5}},"loc":{"start":{"line":86,"column":24},"end":{"line":88,"column":5}},"line":86},"16":{"name":"(anonymous_16)","decl":{"start":{"line":89,"column":4},"end":{"line":89,"column":5}},"loc":{"start":{"line":89,"column":16},"end":{"line":97,"column":5}},"line":89},"17":{"name":"(anonymous_17)","decl":{"start":{"line":101,"column":4},"end":{"line":101,"column":5}},"loc":{"start":{"line":101,"column":26},"end":{"line":103,"column":5}},"line":101},"18":{"name":"(anonymous_18)","decl":{"start":{"line":104,"column":4},"end":{"line":104,"column":5}},"loc":{"start":{"line":104,"column":16},"end":{"line":106,"column":5}},"line":104},"19":{"name":"(anonymous_19)","decl":{"start":{"line":110,"column":4},"end":{"line":110,"column":5}},"loc":{"start":{"line":110,"column":26},"end":{"line":112,"column":5}},"line":110},"20":{"name":"(anonymous_20)","decl":{"start":{"line":113,"column":4},"end":{"line":113,"column":5}},"loc":{"start":{"line":113,"column":16},"end":{"line":115,"column":5}},"line":113},"21":{"name":"(anonymous_21)","decl":{"start":{"line":119,"column":4},"end":{"line":119,"column":5}},"loc":{"start":{"line":119,"column":26},"end":{"line":121,"column":5}},"line":119},"22":{"name":"(anonymous_22)","decl":{"start":{"line":122,"column":4},"end":{"line":122,"column":5}},"loc":{"start":{"line":122,"column":16},"end":{"line":124,"column":5}},"line":122},"23":{"name":"(anonymous_23)","decl":{"start":{"line":128,"column":4},"end":{"line":128,"column":5}},"loc":{"start":{"line":128,"column":26},"end":{"line":130,"column":5}},"line":128},"24":{"name":"(anonymous_24)","decl":{"start":{"line":131,"column":4},"end":{"line":131,"column":5}},"loc":{"start":{"line":131,"column":16},"end":{"line":133,"column":5}},"line":131},"25":{"name":"(anonymous_25)","decl":{"start":{"line":137,"column":4},"end":{"line":137,"column":5}},"loc":{"start":{"line":137,"column":26},"end":{"line":139,"column":5}},"line":137},"26":{"name":"(anonymous_26)","decl":{"start":{"line":140,"column":4},"end":{"line":140,"column":5}},"loc":{"start":{"line":140,"column":16},"end":{"line":142,"column":5}},"line":140},"27":{"name":"(anonymous_27)","decl":{"start":{"line":146,"column":1},"end":{"line":146,"column":2}},"loc":{"start":{"line":146,"column":20},"end":{"line":152,"column":1}},"line":146},"28":{"name":"(anonymous_28)","decl":{"start":{"line":154,"column":4},"end":{"line":154,"column":5}},"loc":{"start":{"line":154,"column":24},"end":{"line":156,"column":5}},"line":154},"29":{"name":"(anonymous_29)","decl":{"start":{"line":157,"column":4},"end":{"line":157,"column":5}},"loc":{"start":{"line":157,"column":16},"end":{"line":163,"column":5}},"line":157},"30":{"name":"(anonymous_30)","decl":{"start":{"line":164,"column":4},"end":{"line":164,"column":5}},"loc":{"start":{"line":164,"column":15},"end":{"line":191,"column":5}},"line":164},"31":{"name":"(anonymous_31)","decl":{"start":{"line":195,"column":4},"end":{"line":195,"column":5}},"loc":{"start":{"line":195,"column":26},"end":{"line":198,"column":5}},"line":195},"32":{"name":"(anonymous_32)","decl":{"start":{"line":199,"column":4},"end":{"line":199,"column":5}},"loc":{"start":{"line":199,"column":19},"end":{"line":201,"column":5}},"line":199},"33":{"name":"(anonymous_33)","decl":{"start":{"line":203,"column":4},"end":{"line":203,"column":5}},"loc":{"start":{"line":203,"column":19},"end":{"line":205,"column":5}},"line":203},"34":{"name":"(anonymous_34)","decl":{"start":{"line":207,"column":4},"end":{"line":207,"column":5}},"loc":{"start":{"line":207,"column":23},"end":{"line":209,"column":5}},"line":207},"35":{"name":"(anonymous_35)","decl":{"start":{"line":211,"column":4},"end":{"line":211,"column":5}},"loc":{"start":{"line":211,"column":23},"end":{"line":213,"column":5}},"line":211},"36":{"name":"(anonymous_36)","decl":{"start":{"line":215,"column":4},"end":{"line":215,"column":5}},"loc":{"start":{"line":215,"column":19},"end":{"line":225,"column":5}},"line":215},"37":{"name":"(anonymous_37)","decl":{"start":{"line":227,"column":4},"end":{"line":227,"column":5}},"loc":{"start":{"line":227,"column":21},"end":{"line":229,"column":5}},"line":227},"38":{"name":"(anonymous_38)","decl":{"start":{"line":231,"column":4},"end":{"line":231,"column":5}},"loc":{"start":{"line":231,"column":17},"end":{"line":233,"column":5}},"line":231},"39":{"name":"(anonymous_39)","decl":{"start":{"line":235,"column":4},"end":{"line":235,"column":5}},"loc":{"start":{"line":235,"column":20},"end":{"line":237,"column":5}},"line":235},"40":{"name":"(anonymous_40)","decl":{"start":{"line":239,"column":4},"end":{"line":239,"column":5}},"loc":{"start":{"line":239,"column":22},"end":{"line":241,"column":5}},"line":239},"41":{"name":"(anonymous_41)","decl":{"start":{"line":243,"column":4},"end":{"line":243,"column":5}},"loc":{"start":{"line":243,"column":20},"end":{"line":245,"column":5}},"line":243},"42":{"name":"(anonymous_42)","decl":{"start":{"line":247,"column":4},"end":{"line":247,"column":5}},"loc":{"start":{"line":247,"column":22},"end":{"line":249,"column":5}},"line":247},"43":{"name":"(anonymous_43)","decl":{"start":{"line":250,"column":4},"end":{"line":250,"column":5}},"loc":{"start":{"line":250,"column":29},"end":{"line":252,"column":5}},"line":250},"44":{"name":"(anonymous_44)","decl":{"start":{"line":253,"column":4},"end":{"line":253,"column":5}},"loc":{"start":{"line":253,"column":16},"end":{"line":255,"column":5}},"line":253},"45":{"name":"(anonymous_45)","decl":{"start":{"line":256,"column":4},"end":{"line":256,"column":5}},"loc":{"start":{"line":256,"column":19},"end":{"line":269,"column":5}},"line":256},"46":{"name":"(anonymous_46)","decl":{"start":{"line":273,"column":4},"end":{"line":273,"column":5}},"loc":{"start":{"line":273,"column":26},"end":{"line":275,"column":5}},"line":273},"47":{"name":"(anonymous_47)","decl":{"start":{"line":276,"column":4},"end":{"line":276,"column":5}},"loc":{"start":{"line":276,"column":16},"end":{"line":278,"column":5}},"line":276},"48":{"name":"(anonymous_48)","decl":{"start":{"line":282,"column":4},"end":{"line":282,"column":5}},"loc":{"start":{"line":282,"column":19},"end":{"line":285,"column":5}},"line":282},"49":{"name":"(anonymous_49)","decl":{"start":{"line":286,"column":4},"end":{"line":286,"column":5}},"loc":{"start":{"line":286,"column":11},"end":{"line":303,"column":5}},"line":286},"50":{"name":"(anonymous_50)","decl":{"start":{"line":291,"column":37},"end":{"line":291,"column":38}},"loc":{"start":{"line":291,"column":47},"end":{"line":297,"column":9}},"line":291},"51":{"name":"(anonymous_51)","decl":{"start":{"line":292,"column":47},"end":{"line":292,"column":48}},"loc":{"start":{"line":292,"column":52},"end":{"line":294,"column":13}},"line":292},"52":{"name":"(anonymous_52)","decl":{"start":{"line":294,"column":44},"end":{"line":294,"column":45}},"loc":{"start":{"line":294,"column":49},"end":{"line":296,"column":13}},"line":294},"53":{"name":"(anonymous_53)","decl":{"start":{"line":297,"column":19},"end":{"line":297,"column":20}},"loc":{"start":{"line":297,"column":34},"end":{"line":299,"column":9}},"line":297},"54":{"name":"(anonymous_54)","decl":{"start":{"line":304,"column":4},"end":{"line":304,"column":5}},"loc":{"start":{"line":304,"column":12},"end":{"line":312,"column":5}},"line":304},"55":{"name":"(anonymous_55)","decl":{"start":{"line":308,"column":57},"end":{"line":308,"column":58}},"loc":{"start":{"line":308,"column":62},"end":{"line":310,"column":9}},"line":308},"56":{"name":"(anonymous_56)","decl":{"start":{"line":316,"column":4},"end":{"line":316,"column":5}},"loc":{"start":{"line":316,"column":14},"end":{"line":335,"column":5}},"line":316},"57":{"name":"(anonymous_57)","decl":{"start":{"line":321,"column":34},"end":{"line":321,"column":35}},"loc":{"start":{"line":321,"column":43},"end":{"line":334,"column":9}},"line":321},"58":{"name":"(anonymous_58)","decl":{"start":{"line":336,"column":4},"end":{"line":336,"column":5}},"loc":{"start":{"line":336,"column":25},"end":{"line":342,"column":5}},"line":336},"59":{"name":"(anonymous_59)","decl":{"start":{"line":346,"column":4},"end":{"line":346,"column":5}},"loc":{"start":{"line":346,"column":23},"end":{"line":363,"column":5}},"line":346},"60":{"name":"(anonymous_60)","decl":{"start":{"line":367,"column":4},"end":{"line":367,"column":5}},"loc":{"start":{"line":367,"column":28},"end":{"line":370,"column":5}},"line":367},"61":{"name":"(anonymous_61)","decl":{"start":{"line":374,"column":4},"end":{"line":374,"column":5}},"loc":{"start":{"line":374,"column":31},"end":{"line":383,"column":5}},"line":374},"62":{"name":"(anonymous_62)","decl":{"start":{"line":376,"column":50},"end":{"line":376,"column":51}},"loc":{"start":{"line":376,"column":55},"end":{"line":378,"column":9}},"line":376},"63":{"name":"(anonymous_63)","decl":{"start":{"line":384,"column":4},"end":{"line":384,"column":5}},"loc":{"start":{"line":384,"column":17},"end":{"line":387,"column":5}},"line":384},"64":{"name":"(anonymous_64)","decl":{"start":{"line":388,"column":4},"end":{"line":388,"column":5}},"loc":{"start":{"line":388,"column":21},"end":{"line":403,"column":5}},"line":388},"65":{"name":"(anonymous_65)","decl":{"start":{"line":404,"column":4},"end":{"line":404,"column":5}},"loc":{"start":{"line":404,"column":29},"end":{"line":412,"column":5}},"line":404},"66":{"name":"(anonymous_66)","decl":{"start":{"line":405,"column":25},"end":{"line":405,"column":26}},"loc":{"start":{"line":405,"column":30},"end":{"line":410,"column":9}},"line":405},"67":{"name":"(anonymous_67)","decl":{"start":{"line":413,"column":4},"end":{"line":413,"column":5}},"loc":{"start":{"line":413,"column":16},"end":{"line":424,"column":5}},"line":413},"68":{"name":"(anonymous_68)","decl":{"start":{"line":415,"column":46},"end":{"line":415,"column":47}},"loc":{"start":{"line":415,"column":53},"end":{"line":422,"column":9}},"line":415},"69":{"name":"(anonymous_69)","decl":{"start":{"line":425,"column":4},"end":{"line":425,"column":5}},"loc":{"start":{"line":425,"column":13},"end":{"line":443,"column":5}},"line":425},"70":{"name":"(anonymous_70)","decl":{"start":{"line":427,"column":49},"end":{"line":427,"column":50}},"loc":{"start":{"line":427,"column":63},"end":{"line":442,"column":9}},"line":427},"71":{"name":"(anonymous_71)","decl":{"start":{"line":444,"column":4},"end":{"line":444,"column":5}},"loc":{"start":{"line":444,"column":25},"end":{"line":446,"column":5}},"line":444},"72":{"name":"(anonymous_72)","decl":{"start":{"line":450,"column":1},"end":{"line":450,"column":2}},"loc":{"start":{"line":450,"column":25},"end":{"line":464,"column":1}},"line":450},"73":{"name":"(anonymous_73)","decl":{"start":{"line":465,"column":50},"end":{"line":465,"column":51}},"loc":{"start":{"line":465,"column":57},"end":{"line":465,"column":74}},"line":465}},"branchMap":{"0":{"loc":{"start":{"line":6,"column":4},"end":{"line":17,"column":5}},"type":"if","locations":[{"start":{"line":6,"column":4},"end":{"line":17,"column":5}},{"start":{"line":6,"column":4},"end":{"line":17,"column":5}}],"line":6},"1":{"loc":{"start":{"line":6,"column":8},"end":{"line":6,"column":79}},"type":"binary-expr","locations":[{"start":{"line":6,"column":8},"end":{"line":6,"column":29}},{"start":{"line":6,"column":33},"end":{"line":6,"column":54}},{"start":{"line":6,"column":58},"end":{"line":6,"column":79}}],"line":6},"2":{"loc":{"start":{"line":9,"column":9},"end":{"line":17,"column":5}},"type":"if","locations":[{"start":{"line":9,"column":9},"end":{"line":17,"column":5}},{"start":{"line":9,"column":9},"end":{"line":17,"column":5}}],"line":9},"3":{"loc":{"start":{"line":12,"column":9},"end":{"line":17,"column":5}},"type":"if","locations":[{"start":{"line":12,"column":9},"end":{"line":17,"column":5}},{"start":{"line":12,"column":9},"end":{"line":17,"column":5}}],"line":12},"4":{"loc":{"start":{"line":37,"column":8},"end":{"line":38,"column":49}},"type":"if","locations":[{"start":{"line":37,"column":8},"end":{"line":38,"column":49}},{"start":{"line":37,"column":8},"end":{"line":38,"column":49}}],"line":37},"5":{"loc":{"start":{"line":90,"column":8},"end":{"line":96,"column":9}},"type":"if","locations":[{"start":{"line":90,"column":8},"end":{"line":96,"column":9}},{"start":{"line":90,"column":8},"end":{"line":96,"column":9}}],"line":90},"6":{"loc":{"start":{"line":152,"column":13},"end":{"line":152,"column":54}},"type":"binary-expr","locations":[{"start":{"line":152,"column":13},"end":{"line":152,"column":28}},{"start":{"line":152,"column":33},"end":{"line":152,"column":53}}],"line":152},"7":{"loc":{"start":{"line":159,"column":8},"end":{"line":161,"column":9}},"type":"if","locations":[{"start":{"line":159,"column":8},"end":{"line":161,"column":9}},{"start":{"line":159,"column":8},"end":{"line":161,"column":9}}],"line":159},"8":{"loc":{"start":{"line":167,"column":8},"end":{"line":170,"column":9}},"type":"if","locations":[{"start":{"line":167,"column":8},"end":{"line":170,"column":9}},{"start":{"line":167,"column":8},"end":{"line":170,"column":9}}],"line":167},"9":{"loc":{"start":{"line":171,"column":8},"end":{"line":174,"column":9}},"type":"if","locations":[{"start":{"line":171,"column":8},"end":{"line":174,"column":9}},{"start":{"line":171,"column":8},"end":{"line":174,"column":9}}],"line":171},"10":{"loc":{"start":{"line":175,"column":8},"end":{"line":178,"column":9}},"type":"if","locations":[{"start":{"line":175,"column":8},"end":{"line":178,"column":9}},{"start":{"line":175,"column":8},"end":{"line":178,"column":9}}],"line":175},"11":{"loc":{"start":{"line":179,"column":8},"end":{"line":182,"column":9}},"type":"if","locations":[{"start":{"line":179,"column":8},"end":{"line":182,"column":9}},{"start":{"line":179,"column":8},"end":{"line":182,"column":9}}],"line":179},"12":{"loc":{"start":{"line":183,"column":8},"end":{"line":186,"column":9}},"type":"if","locations":[{"start":{"line":183,"column":8},"end":{"line":186,"column":9}},{"start":{"line":183,"column":8},"end":{"line":186,"column":9}}],"line":183},"13":{"loc":{"start":{"line":187,"column":8},"end":{"line":189,"column":9}},"type":"if","locations":[{"start":{"line":187,"column":8},"end":{"line":189,"column":9}},{"start":{"line":187,"column":8},"end":{"line":189,"column":9}}],"line":187},"14":{"loc":{"start":{"line":250,"column":13},"end":{"line":250,"column":27}},"type":"default-arg","locations":[{"start":{"line":250,"column":22},"end":{"line":250,"column":27}}],"line":250},"15":{"loc":{"start":{"line":305,"column":8},"end":{"line":307,"column":9}},"type":"if","locations":[{"start":{"line":305,"column":8},"end":{"line":307,"column":9}},{"start":{"line":305,"column":8},"end":{"line":307,"column":9}}],"line":305},"16":{"loc":{"start":{"line":317,"column":8},"end":{"line":319,"column":9}},"type":"if","locations":[{"start":{"line":317,"column":8},"end":{"line":319,"column":9}},{"start":{"line":317,"column":8},"end":{"line":319,"column":9}}],"line":317},"17":{"loc":{"start":{"line":322,"column":12},"end":{"line":333,"column":13}},"type":"if","locations":[{"start":{"line":322,"column":12},"end":{"line":333,"column":13}},{"start":{"line":322,"column":12},"end":{"line":333,"column":13}}],"line":322},"18":{"loc":{"start":{"line":325,"column":17},"end":{"line":333,"column":13}},"type":"if","locations":[{"start":{"line":325,"column":17},"end":{"line":333,"column":13}},{"start":{"line":325,"column":17},"end":{"line":333,"column":13}}],"line":325},"19":{"loc":{"start":{"line":328,"column":17},"end":{"line":333,"column":13}},"type":"if","locations":[{"start":{"line":328,"column":17},"end":{"line":333,"column":13}},{"start":{"line":328,"column":17},"end":{"line":333,"column":13}}],"line":328},"20":{"loc":{"start":{"line":331,"column":17},"end":{"line":333,"column":13}},"type":"if","locations":[{"start":{"line":331,"column":17},"end":{"line":333,"column":13}},{"start":{"line":331,"column":17},"end":{"line":333,"column":13}}],"line":331},"21":{"loc":{"start":{"line":337,"column":8},"end":{"line":339,"column":9}},"type":"if","locations":[{"start":{"line":337,"column":8},"end":{"line":339,"column":9}},{"start":{"line":337,"column":8},"end":{"line":339,"column":9}}],"line":337},"22":{"loc":{"start":{"line":348,"column":8},"end":{"line":362,"column":9}},"type":"if","locations":[{"start":{"line":348,"column":8},"end":{"line":362,"column":9}},{"start":{"line":348,"column":8},"end":{"line":362,"column":9}}],"line":348},"23":{"loc":{"start":{"line":351,"column":13},"end":{"line":362,"column":9}},"type":"if","locations":[{"start":{"line":351,"column":13},"end":{"line":362,"column":9}},{"start":{"line":351,"column":13},"end":{"line":362,"column":9}}],"line":351},"24":{"loc":{"start":{"line":354,"column":13},"end":{"line":362,"column":9}},"type":"if","locations":[{"start":{"line":354,"column":13},"end":{"line":362,"column":9}},{"start":{"line":354,"column":13},"end":{"line":362,"column":9}}],"line":354},"25":{"loc":{"start":{"line":357,"column":13},"end":{"line":362,"column":9}},"type":"if","locations":[{"start":{"line":357,"column":13},"end":{"line":362,"column":9}},{"start":{"line":357,"column":13},"end":{"line":362,"column":9}}],"line":357},"26":{"loc":{"start":{"line":379,"column":8},"end":{"line":381,"column":9}},"type":"if","locations":[{"start":{"line":379,"column":8},"end":{"line":381,"column":9}},{"start":{"line":379,"column":8},"end":{"line":381,"column":9}}],"line":379},"27":{"loc":{"start":{"line":390,"column":8},"end":{"line":401,"column":9}},"type":"if","locations":[{"start":{"line":390,"column":8},"end":{"line":401,"column":9}},{"start":{"line":390,"column":8},"end":{"line":401,"column":9}}],"line":390},"28":{"loc":{"start":{"line":393,"column":13},"end":{"line":401,"column":9}},"type":"if","locations":[{"start":{"line":393,"column":13},"end":{"line":401,"column":9}},{"start":{"line":393,"column":13},"end":{"line":401,"column":9}}],"line":393},"29":{"loc":{"start":{"line":396,"column":13},"end":{"line":401,"column":9}},"type":"if","locations":[{"start":{"line":396,"column":13},"end":{"line":401,"column":9}},{"start":{"line":396,"column":13},"end":{"line":401,"column":9}}],"line":396},"30":{"loc":{"start":{"line":399,"column":13},"end":{"line":401,"column":9}},"type":"if","locations":[{"start":{"line":399,"column":13},"end":{"line":401,"column":9}},{"start":{"line":399,"column":13},"end":{"line":401,"column":9}}],"line":399},"31":{"loc":{"start":{"line":406,"column":12},"end":{"line":408,"column":13}},"type":"if","locations":[{"start":{"line":406,"column":12},"end":{"line":408,"column":13}},{"start":{"line":406,"column":12},"end":{"line":408,"column":13}}],"line":406},"32":{"loc":{"start":{"line":416,"column":12},"end":{"line":421,"column":13}},"type":"if","locations":[{"start":{"line":416,"column":12},"end":{"line":421,"column":13}},{"start":{"line":416,"column":12},"end":{"line":421,"column":13}}],"line":416},"33":{"loc":{"start":{"line":428,"column":12},"end":{"line":441,"column":13}},"type":"if","locations":[{"start":{"line":428,"column":12},"end":{"line":441,"column":13}},{"start":{"line":428,"column":12},"end":{"line":441,"column":13}}],"line":428},"34":{"loc":{"start":{"line":429,"column":16},"end":{"line":437,"column":17}},"type":"if","locations":[{"start":{"line":429,"column":16},"end":{"line":437,"column":17}},{"start":{"line":429,"column":16},"end":{"line":437,"column":17}}],"line":429},"35":{"loc":{"start":{"line":432,"column":21},"end":{"line":437,"column":17}},"type":"if","locations":[{"start":{"line":432,"column":21},"end":{"line":437,"column":17}},{"start":{"line":432,"column":21},"end":{"line":437,"column":17}}],"line":432},"36":{"loc":{"start":{"line":464,"column":18},"end":{"line":464,"column":69}},"type":"binary-expr","locations":[{"start":{"line":464,"column":18},"end":{"line":464,"column":38}},{"start":{"line":464,"column":43},"end":{"line":464,"column":68}}],"line":464}},"s":{"0":1,"1":1,"2":1,"3":12,"4":2,"5":10,"6":1,"7":9,"8":9,"9":0,"10":1,"11":23,"12":23,"13":23,"14":23,"15":23,"16":23,"17":0,"18":40,"19":21,"20":11,"21":10,"22":0,"23":27,"24":8,"25":0,"26":0,"27":1,"28":10,"29":16,"30":1,"31":3,"32":4,"33":1,"34":5,"35":10,"36":1,"37":0,"38":0,"39":0,"40":0,"41":0,"42":1,"43":0,"44":0,"45":1,"46":0,"47":0,"48":1,"49":1,"50":1,"51":1,"52":0,"53":0,"54":1,"55":0,"56":0,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":1,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":1,"111":0,"112":0,"113":1,"114":4,"115":4,"116":4,"117":4,"118":4,"119":4,"120":4,"121":12,"122":23,"123":25,"124":12,"125":4,"126":4,"127":4,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":6,"168":6,"169":18,"170":18,"171":13,"172":5,"173":2,"174":3,"175":3,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":4,"185":4,"186":12,"187":0,"188":12,"189":4,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":8,"200":1,"201":1,"202":1,"203":1,"204":1,"205":1,"206":1,"207":1,"208":1,"209":1,"210":1,"211":1,"212":1,"213":1,"214":1,"215":1,"216":13,"217":1},"f":{"0":12,"1":23,"2":40,"3":21,"4":0,"5":27,"6":8,"7":0,"8":0,"9":10,"10":16,"11":3,"12":4,"13":5,"14":10,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":1,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":4,"49":4,"50":12,"51":23,"52":25,"53":12,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":6,"64":18,"65":0,"66":0,"67":4,"68":12,"69":0,"70":0,"71":8,"72":1,"73":13},"b":{"0":[2,10],"1":[12,10,10],"2":[1,9],"3":[9,0],"4":[11,10],"5":[0,0],"6":[1,1],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[13,5],"28":[2,3],"29":[3,0],"30":[0,0],"31":[0,0],"32":[0,12],"33":[0,0],"34":[0,0],"35":[0,0],"36":[1,1]},"inputSourceMap":{"version":3,"file":"C:/Users/myland/code/scryptlib/src/scryptTypes.ts","sources":["C:/Users/myland/code/scryptlib/src/scryptTypes.ts"],"names":[],"mappings":"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","sourcesContent":["import { parseLiteral, getValidatedHexString, bsv, intValue2hex, checkStruct, flatternStruct, typeOfArg } from './utils';\nimport { StructEntity } from './compilerWrapper';\n\nexport type TypeResolver = (type: string) => string;\n\nexport type ValueType = number | bigint | boolean | string | StructObject;\n\n\nexport function toScryptType(a: ValueType): ScryptType {\n  if (typeof a === 'number' || typeof a === 'bigint' || typeof a === 'string') {\n    return new Int(a);\n  } else if (typeof a === 'boolean') {\n    return new Bool(a);\n  } else if (a instanceof ScryptType) {\n    return a;\n  } else {\n    throw `${a} cannot be convert to ScryptType`;\n  }\n}\n\nexport class ScryptType {\n\n  protected _value: ValueType;\n  protected _literal: string;\n  protected _asm: string;\n  protected _type: string;\n  protected _typeResolver: TypeResolver;\n\n  constructor(value: ValueType) {\n    try {\n      this._value = value;\n      this._literal = this.toLiteral();\n      const [asm, _, scrType] = parseLiteral(this._literal);\n      this._type = scrType;\n      this._asm = asm;\n    } catch (error) {\n      throw new Error(`can't get type from ${this._literal}, ${error.message}`);\n    }\n  }\n\n  get value(): ValueType {\n    return this._value;\n  }\n\n  get finalType(): string {\n    if (this._typeResolver)\n      return this._typeResolver(this.type);\n    return this.type;\n  }\n\n  get literal(): string {\n    return this._literal;\n  }\n\n  get type(): string {\n    return this._type;\n  }\n\n  toASM(): string {\n    return this._asm;\n  }\n\n  toJSON(): string | unknown {\n    return this.toLiteral();\n  }\n\n  toLiteral(): string {\n    return '';\n  }\n}\n\nexport class Int extends ScryptType {\n  constructor(intVal: number | bigint | string) {\n    super(intVal);\n  }\n  toLiteral(): string {\n    return this._value.toString();\n  }\n}\n\nexport class Bool extends ScryptType {\n  constructor(boolVal: boolean) {\n    super(boolVal);\n  }\n  toLiteral(): string {\n    return this._value.toString();\n  }\n}\n\nexport class Bytes extends ScryptType {\n  constructor(bytesVal: string) {\n    super(bytesVal);\n  }\n  toLiteral(): string {\n    return `b'${getValidatedHexString(this._value.toString())}'`;\n  }\n}\n\nexport class PrivKey extends ScryptType {\n  constructor(intVal: bigint | string) {\n    super(intVal);\n  }\n  toLiteral(): string {\n    if (typeof this._value === 'string') {\n      return `PrivKey(${this._value})`;\n    } else {\n      const v = this._value as bigint;\n      return `PrivKey(0x${intValue2hex(v)})`;\n    }\n  }\n}\n\nexport class PubKey extends ScryptType {\n  constructor(bytesVal: string) {\n    super(bytesVal);\n  }\n  toLiteral(): string {\n    return `PubKey(b'${getValidatedHexString(this._value.toString())}')`;\n  }\n}\n\nexport class Sig extends ScryptType {\n  constructor(bytesVal: string) {\n    super(bytesVal);\n  }\n  toLiteral(): string {\n    return `Sig(b'${getValidatedHexString(this._value.toString())}')`;\n  }\n}\n\nexport class Ripemd160 extends ScryptType {\n  constructor(bytesVal: string) {\n    super(bytesVal);\n  }\n  toLiteral(): string {\n    return `Ripemd160(b'${getValidatedHexString(this._value.toString())}')`;\n  }\n}\n\nexport class Sha1 extends ScryptType {\n  constructor(bytesVal: string) {\n    super(bytesVal);\n  }\n  toLiteral(): string {\n    return `Sha1(b'${getValidatedHexString(this._value.toString())}')`;\n  }\n}\n\nexport class Sha256 extends ScryptType {\n  constructor(bytesVal: string) {\n    super(bytesVal);\n  }\n  toLiteral(): string {\n    return `Sha256(b'${getValidatedHexString(this._value.toString())}')`;\n  }\n}\n\nexport enum SigHash {\n  ALL = 0x01,\n  NONE = 0x02,\n  SINGLE = 0x03,\n  FORKID = 0x40,\n  ANYONECANPAY = 0x80,\n}\n\nexport class SigHashType extends ScryptType {\n\n  constructor(intVal: number) {\n    super(intVal);\n  }\n\n  toLiteral(): string {\n    let hexStr = this._value.toString(16);\n    if (hexStr.length % 2) {\n      hexStr = '0' + hexStr;\n    }\n    return `SigHashType(b'${hexStr}')`;\n  }\n\n  toString(): string {\n    const types: string[] = [];\n    let value = this._value as number;\n\n    if ((value & SigHash.ANYONECANPAY) === SigHash.ANYONECANPAY) {\n      types.push('SigHash.ANYONECANPAY');\n      value = value - SigHash.ANYONECANPAY;\n    }\n\n    if ((value & SigHash.SINGLE) === SigHash.SINGLE) {\n      types.push('SigHash.SINGLE');\n      value = value - SigHash.SINGLE;\n    }\n\n    if ((value & SigHash.NONE) === SigHash.NONE) {\n      types.push('SigHash.NONE');\n      value = value - SigHash.NONE;\n    }\n\n    if ((value & SigHash.ALL) === SigHash.ALL) {\n      types.push('SigHash.ALL');\n      value = value - SigHash.ALL;\n    }\n\n    if ((value & SigHash.FORKID) === SigHash.FORKID) {\n      types.push('SigHash.FORKID');\n      value = value - SigHash.FORKID;\n    }\n\n    if (value === 0) {\n      return types.join(' | ');\n    }\n\n    throw new Error(`unknown sighash type value: ${this._value}`);\n  }\n\n}\n\ninterface Outpoint { hash: string, index: number, hex: string }\n\nexport class SigHashPreimage extends ScryptType {\n\n  constructor(bytesVal: string) {\n    super(bytesVal);\n    this._buf = Buffer.from(bytesVal, 'hex');\n  }\n\n  // raw data\n  private _buf: Buffer;\n\n  private getReader(buf: Buffer) {\n    return new bsv.encoding.BufferReader(buf);\n  }\n\n  // nVersion of the transaction\n  get nVersion(): number {\n    return this.getReader(this._buf.slice(0, 4)).readUInt32LE();\n  }\n\n  // hashPrevouts\n  get hashPrevouts(): string {\n    return this._buf.slice(4, 4 + 32).toString('hex');\n  }\n\n  // hashSequence\n  get hashSequence(): string {\n    return this._buf.slice(36, 36 + 32).toString('hex');\n  }\n\n  // outpoint\n  get outpoint(): Outpoint {\n    const buf = this._buf.slice(68, 68 + 32 + 4);\n    const hex = buf.toString('hex');\n    const index = this.getReader(buf.slice(32, 32 + 4)).readUInt32LE();\n    const hash = Buffer.from(buf.slice(0, 32)).reverse().toString('hex');\n    return {\n      hash,\n      index,\n      hex\n    };\n  }\n\n  // scriptCode of the input\n  get scriptCode(): string {\n    return this.getReader(this._buf.slice(104, this._buf.length - 52)).readVarLengthBuffer().toString('hex');\n  }\n\n  // value of the output spent by this input\n  get amount(): number {\n    return this.getReader(this._buf.slice(this._buf.length - 44 - 8, this._buf.length - 44)).readUInt32LE();\n  }\n\n  // nSequence of the input\n  get nSequence(): number {\n    return this.getReader(this._buf.slice(this._buf.length - 40 - 4, this._buf.length - 40)).readUInt32LE();\n  }\n\n  // hashOutputs\n  get hashOutputs(): string {\n    return this._buf.slice(this._buf.length - 8 - 32, this._buf.length - 8).toString('hex');\n  }\n\n  // nLocktime of the transaction\n  get nLocktime(): number {\n    return this.getReader(this._buf.slice(this._buf.length - 4 - 4, this._buf.length - 4)).readUInt32LE();\n  }\n\n  // sighash type of the signature\n  get sighashType(): number {\n    return this.getReader(this._buf.slice(this._buf.length - 4, this._buf.length)).readUInt32LE();\n  }\n\n  toString(format = 'hex'): string {\n    return this._buf.toString(format);\n  }\n\n  toLiteral(): string {\n    return `SigHashPreimage(b'${getValidatedHexString(this._value.toString())}')`;\n  }\n\n  toJSONObject() {\n    return {\n      nVersion: this.nVersion,\n      hashPrevouts: this.hashPrevouts,\n      hashSequence: this.hashSequence,\n      outpoint: this.outpoint,\n      scriptCode: this.scriptCode,\n      amount: this.amount,\n      nSequence: this.nSequence,\n      hashOutputs: this.hashOutputs,\n      nLocktime: this.nLocktime,\n      sighashType: new SigHashType(this.sighashType).toString()\n    };\n  }\n\n}\n\nexport class OpCodeType extends ScryptType {\n  constructor(bytesVal: string) {\n    super(bytesVal);\n  }\n  toLiteral(): string {\n    return `OpCodeType(b'${getValidatedHexString(this._value.toString())}')`;\n  }\n}\n\n\nexport type BasicType = ScryptType | boolean | number | bigint;\n\nexport type SingletonParamType = BasicType | BasicType[];\n\n\nexport type StructObject = Record<string, SingletonParamType>;\n\n\n\nexport class Struct extends ScryptType {\n\n  sorted = false;\n\n  public static structAst: StructEntity;\n  constructor(o: StructObject) {\n    super(o);\n  }\n\n\n  protected bind(): void {\n    const structAst: StructEntity = Object.getPrototypeOf(this).constructor.structAst;\n    checkStruct(structAst, this, this._typeResolver);\n    const ordered = {};\n    const unordered = this.value;\n    Object.keys(this.value).sort((a: string, b: string) => {\n      return (structAst.params.findIndex(e => {\n        return e.name === a;\n      }) - structAst.params.findIndex(e => {\n        return e.name === b;\n      }));\n\n    }).forEach(function (key) {\n      ordered[key] = unordered[key];\n    });\n    this.sorted = true;\n    this._type = structAst.name;\n    this._value = ordered;\n  }\n\n  toASM(): string {\n    if (!this.sorted) {\n      throw 'unbinded Struct can\\'t call toASM';\n    }\n\n    this._asm = flatternStruct(this, '').map(v => {\n      return v.value.toASM();\n    }).join(' ');\n    return this._asm;\n  }\n\n  /**\n   * @deprecated use  flatternStruct, see toASM\n   */\n  toArray(): ScryptType[] {\n    if (!this.sorted) {\n      throw 'unbinded Struct can\\'t call toArray';\n    }\n\n    const v: StructObject = this.value as StructObject;\n\n    return Object.keys(v).map((key) => {\n      if (v[key] instanceof ScryptType) {\n        return v[key] as ScryptType;\n      } else if (typeof v[key] === 'boolean') {\n        return new Bool(v[key] as boolean);\n      } else if (typeof v[key] === 'number') {\n        return new Int(v[key] as number);\n      } else if (typeof v[key] === 'bigint') {\n        return new Int(v[key] as bigint);\n      }\n    });\n  }\n\n\n  memberByIndex(index: number): string {\n    if (!this.sorted) {\n      throw 'unbinded Struct can\\'t call memberByIndex';\n    }\n\n    const v: StructObject = this.value as StructObject;\n\n    return Object.keys(v)[index];\n  }\n\n  /**\n  * @deprecated use  getMemberFinalType\n  */\n  getMemberType(key: string): string {\n    const v: StructObject = this.value as StructObject;\n\n    if (v[key] instanceof ScryptType) {\n      return (v[key] as ScryptType).type;\n    } else if (typeof v[key] === 'boolean') {\n      return new Bool(v[key] as boolean).type;\n    } else if (typeof v[key] === 'number') {\n      return new Int(v[key] as number).type;\n    } else if (typeof v[key] === 'bigint') {\n      return new Int(v[key] as bigint).type;\n    } else {\n      return typeof v[key];\n    }\n  }\n\n  /**\n   * Get the real member type of the structure\n   */\n  getMemberFinalType(key: string): string {\n    const member = this.memberByKey(key);\n    return typeOfArg(member);\n  }\n\n  /**\n   * Get the member type declared by the structure by structAst\n   */\n  getMemberAstFinalType(key: string): string {\n    const structAst: StructEntity = Object.getPrototypeOf(this).constructor.structAst;\n    const paramEntity = structAst.params.find(p => {\n      return p.name === key;\n    });\n\n    if (!paramEntity) {\n      throw new Error(`${key} is member of struct ${structAst.name}`);\n    }\n\n    return this._typeResolver(paramEntity.type);\n  }\n\n\n  getMembers(): string[] {\n    const v: StructObject = this.value as StructObject;\n    return Object.keys(v);\n  }\n\n  memberByKey(key: string): SingletonParamType | undefined {\n    const v: StructObject = this.value as StructObject;\n\n    if (v[key] instanceof ScryptType) {\n      return v[key] as ScryptType;\n    } else if (typeof v[key] === 'boolean') {\n      return new Bool(v[key] as boolean);\n    } else if (typeof v[key] === 'number') {\n      return new Int(v[key] as number);\n    } else if (typeof v[key] === 'bigint') {\n      return new Int(v[key] as bigint);\n    }\n\n    return v[key];\n  }\n\n\n  static arrayToLiteral(a: Array<ValueType>): string {\n\n    const al = a.map(i => {\n      if (Array.isArray(i)) {\n        return Struct.arrayToLiteral(i);\n      }\n      return toScryptType(i).toLiteral();\n    }).join(',');\n\n    return `[${al}]`;\n  }\n\n\n  toLiteral(): string {\n    const v = this.value;\n    const l = Object.keys(this.value).map(key => {\n      if (Array.isArray(v[key])) {\n        return Struct.arrayToLiteral(v[key]);\n      } else {\n        return toScryptType(v[key]).toLiteral();\n      }\n    }).join(',');\n\n    return `{${l}}`;\n  }\n\n  toJSON(): unknown {\n\n    const v = this.value;\n    return Array.from(Object.keys(v)).reduce((obj, key) => {\n      if (v[key] instanceof ScryptType) {\n        if (Struct.isStruct(v[key])) {\n          return Object.assign(obj, { [key]: (v[key] as ScryptType).toJSON() });\n        } else if (Array.isArray(v[key])) {\n          return Object.assign(obj, { [key]: JSON.stringify(v[key]) });\n        } else {\n          return Object.assign(obj, { [key]: (v[key] as ScryptType).toLiteral() });\n        }\n\n      } else {\n        return Object.assign(obj, { [key]: v[key] });\n      }\n    }, {});\n\n  }\n\n  static isStruct(arg: SupportedParamType): boolean {\n    return arg instanceof Struct;\n  }\n}\n\n\nexport type SupportedParamType = SingletonParamType | SingletonParamType[];\n\n\n\nexport enum VariableType {\n  BOOL = 'bool',\n  INT = 'int',\n  BYTES = 'bytes',\n  PUBKEY = 'PubKey',\n  PRIVKEY = 'PrivKey',\n  SIG = 'Sig',\n  RIPEMD160 = 'Ripemd160',\n  SHA1 = 'Sha1',\n  SHA256 = 'Sha256',\n  SIGHASHTYPE = 'SigHashType',\n  SIGHASHPREIMAGE = 'SigHashPreimage',\n  OPCODETYPE = 'OpCodeType',\n  STRUCT = 'struct'\n}\n\n\n\nexport const BasicType = Object.keys(VariableType).map(key => VariableType[key]);\n\nexport const BasicScryptType = {\n  [VariableType.BOOL]: Bool,\n  [VariableType.INT]: Int,\n  [VariableType.BYTES]: Bytes,\n  [VariableType.PUBKEY]: PubKey,\n  [VariableType.PRIVKEY]: PrivKey,\n  [VariableType.SIG]: Sig,\n  [VariableType.RIPEMD160]: Ripemd160,\n  [VariableType.SHA1]: Sha1,\n  [VariableType.SHA256]: Sha256,\n  [VariableType.SIGHASHTYPE]: SigHashType,\n  [VariableType.OPCODETYPE]: OpCodeType,\n  [VariableType.SIGHASHPREIMAGE]: SigHashPreimage\n};\n\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d25ca70f980647e1be3b4ea99b504c19ae8b8b27"},"C:\\Users\\myland\\code\\scryptlib\\src\\compilerWrapper.ts":{"path":"C:\\Users\\myland\\code\\scryptlib\\src\\compilerWrapper.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":398}},"2":{"start":{"line":4,"column":15},"end":{"line":4,"column":30}},"3":{"start":{"line":5,"column":24},"end":{"line":5,"column":48}},"4":{"start":{"line":6,"column":13},"end":{"line":6,"column":26}},"5":{"start":{"line":7,"column":22},"end":{"line":7,"column":44}},"6":{"start":{"line":8,"column":11},"end":{"line":8,"column":24}},"7":{"start":{"line":9,"column":12},"end":{"line":9,"column":26}},"8":{"start":{"line":10,"column":16},"end":{"line":10,"column":34}},"9":{"start":{"line":11,"column":24},"end":{"line":11,"column":51}},"10":{"start":{"line":12,"column":16},"end":{"line":12,"column":38}},"11":{"start":{"line":13,"column":23},"end":{"line":13,"column":174}},"12":{"start":{"line":14,"column":25},"end":{"line":14,"column":143}},"13":{"start":{"line":15,"column":25},"end":{"line":15,"column":56}},"14":{"start":{"line":16,"column":20},"end":{"line":16,"column":140}},"15":{"start":{"line":17,"column":22},"end":{"line":17,"column":88}},"16":{"start":{"line":19,"column":19},"end":{"line":19,"column":114}},"17":{"start":{"line":21,"column":45},"end":{"line":21,"column":46}},"18":{"start":{"line":23,"column":0},"end":{"line":28,"column":83}},"19":{"start":{"line":24,"column":4},"end":{"line":24,"column":52}},"20":{"start":{"line":25,"column":4},"end":{"line":25,"column":56}},"21":{"start":{"line":26,"column":4},"end":{"line":26,"column":56}},"22":{"start":{"line":27,"column":4},"end":{"line":27,"column":44}},"23":{"start":{"line":30,"column":0},"end":{"line":33,"column":62}},"24":{"start":{"line":31,"column":4},"end":{"line":31,"column":33}},"25":{"start":{"line":32,"column":4},"end":{"line":32,"column":37}},"26":{"start":{"line":35,"column":0},"end":{"line":39,"column":71}},"27":{"start":{"line":36,"column":4},"end":{"line":36,"column":37}},"28":{"start":{"line":37,"column":4},"end":{"line":37,"column":35}},"29":{"start":{"line":38,"column":4},"end":{"line":38,"column":37}},"30":{"start":{"line":41,"column":0},"end":{"line":44,"column":74}},"31":{"start":{"line":42,"column":4},"end":{"line":42,"column":43}},"32":{"start":{"line":43,"column":4},"end":{"line":43,"column":49}},"33":{"start":{"line":49,"column":15},"end":{"line":49,"column":25}},"34":{"start":{"line":50,"column":23},"end":{"line":50,"column":34}},"35":{"start":{"line":51,"column":19},"end":{"line":51,"column":45}},"36":{"start":{"line":52,"column":26},"end":{"line":52,"column":48}},"37":{"start":{"line":53,"column":27},"end":{"line":53,"column":54}},"38":{"start":{"line":54,"column":22},"end":{"line":54,"column":50}},"39":{"start":{"line":55,"column":20},"end":{"line":55,"column":47}},"40":{"start":{"line":56,"column":24},"end":{"line":56,"column":26}},"41":{"start":{"line":57,"column":4},"end":{"line":205,"column":5}},"42":{"start":{"line":58,"column":30},"end":{"line":58,"column":115}},"43":{"start":{"line":59,"column":26},"end":{"line":59,"column":67}},"44":{"start":{"line":60,"column":20},"end":{"line":60,"column":247}},"45":{"start":{"line":61,"column":21},"end":{"line":61,"column":116}},"46":{"start":{"line":63,"column":8},"end":{"line":63,"column":51}},"47":{"start":{"line":64,"column":21},"end":{"line":64,"column":49}},"48":{"start":{"line":65,"column":8},"end":{"line":70,"column":9}},"49":{"start":{"line":66,"column":12},"end":{"line":66,"column":74}},"50":{"start":{"line":67,"column":12},"end":{"line":69,"column":13}},"51":{"start":{"line":68,"column":16},"end":{"line":68,"column":30}},"52":{"start":{"line":71,"column":8},"end":{"line":86,"column":9}},"53":{"start":{"line":72,"column":35},"end":{"line":72,"column":70}},"54":{"start":{"line":73,"column":12},"end":{"line":73,"column":48}},"55":{"start":{"line":74,"column":27},"end":{"line":74,"column":132}},"56":{"start":{"line":75,"column":30},"end":{"line":75,"column":58}},"57":{"start":{"line":76,"column":12},"end":{"line":76,"column":36}},"58":{"start":{"line":77,"column":12},"end":{"line":77,"column":43}},"59":{"start":{"line":78,"column":12},"end":{"line":78,"column":37}},"60":{"start":{"line":79,"column":12},"end":{"line":79,"column":43}},"61":{"start":{"line":80,"column":12},"end":{"line":80,"column":67}},"62":{"start":{"line":81,"column":35},"end":{"line":81,"column":83}},"63":{"start":{"line":82,"column":44},"end":{"line":82,"column":103}},"64":{"start":{"line":83,"column":12},"end":{"line":83,"column":29}},"65":{"start":{"line":84,"column":12},"end":{"line":84,"column":35}},"66":{"start":{"line":85,"column":12},"end":{"line":85,"column":70}},"67":{"start":{"line":87,"column":21},"end":{"line":87,"column":25}},"68":{"start":{"line":88,"column":8},"end":{"line":149,"column":9}},"69":{"start":{"line":89,"column":35},"end":{"line":89,"column":70}},"70":{"start":{"line":90,"column":12},"end":{"line":90,"column":48}},"71":{"start":{"line":91,"column":12},"end":{"line":91,"column":75}},"72":{"start":{"line":92,"column":28},"end":{"line":92,"column":42}},"73":{"start":{"line":93,"column":12},"end":{"line":128,"column":15}},"74":{"start":{"line":94,"column":16},"end":{"line":98,"column":17}},"75":{"start":{"line":95,"column":20},"end":{"line":97,"column":22}},"76":{"start":{"line":99,"column":30},"end":{"line":99,"column":55}},"77":{"start":{"line":100,"column":16},"end":{"line":126,"column":17}},"78":{"start":{"line":101,"column":38},"end":{"line":101,"column":70}},"79":{"start":{"line":103,"column":35},"end":{"line":103,"column":54}},"80":{"start":{"line":104,"column":20},"end":{"line":106,"column":21}},"81":{"start":{"line":105,"column":24},"end":{"line":105,"column":58}},"82":{"start":{"line":107,"column":20},"end":{"line":109,"column":21}},"83":{"start":{"line":108,"column":24},"end":{"line":108,"column":56}},"84":{"start":{"line":110,"column":20},"end":{"line":112,"column":21}},"85":{"start":{"line":111,"column":24},"end":{"line":111,"column":58}},"86":{"start":{"line":113,"column":32},"end":{"line":119,"column":33}},"87":{"start":{"line":120,"column":20},"end":{"line":125,"column":22}},"88":{"start":{"line":127,"column":16},"end":{"line":127,"column":77}},"89":{"start":{"line":129,"column":12},"end":{"line":148,"column":13}},"90":{"start":{"line":130,"column":16},"end":{"line":147,"column":19}},"91":{"start":{"line":131,"column":34},"end":{"line":131,"column":59}},"92":{"start":{"line":132,"column":20},"end":{"line":146,"column":21}},"93":{"start":{"line":133,"column":42},"end":{"line":133,"column":74}},"94":{"start":{"line":134,"column":36},"end":{"line":140,"column":37}},"95":{"start":{"line":141,"column":24},"end":{"line":145,"column":26}},"96":{"start":{"line":150,"column":8},"end":{"line":178,"column":9}},"97":{"start":{"line":151,"column":12},"end":{"line":151,"column":42}},"98":{"start":{"line":152,"column":35},"end":{"line":152,"column":71}},"99":{"start":{"line":153,"column":12},"end":{"line":153,"column":49}},"100":{"start":{"line":154,"column":32},"end":{"line":167,"column":13}},"101":{"start":{"line":164,"column":44},"end":{"line":164,"column":65}},"102":{"start":{"line":168,"column":12},"end":{"line":174,"column":13}},"103":{"start":{"line":169,"column":16},"end":{"line":173,"column":19}},"104":{"start":{"line":171,"column":58},"end":{"line":171,"column":105}},"105":{"start":{"line":172,"column":57},"end":{"line":172,"column":65}},"106":{"start":{"line":175,"column":12},"end":{"line":175,"column":85}},"107":{"start":{"line":176,"column":12},"end":{"line":176,"column":65}},"108":{"start":{"line":177,"column":12},"end":{"line":177,"column":41}},"109":{"start":{"line":179,"column":8},"end":{"line":179,"column":22}},"110":{"start":{"line":182,"column":8},"end":{"line":203,"column":9}},"111":{"start":{"line":183,"column":12},"end":{"line":194,"column":15}},"112":{"start":{"line":184,"column":29},"end":{"line":184,"column":52}},"113":{"start":{"line":185,"column":16},"end":{"line":193,"column":17}},"114":{"start":{"line":186,"column":20},"end":{"line":192,"column":21}},"115":{"start":{"line":188,"column":24},"end":{"line":188,"column":109}},"116":{"start":{"line":191,"column":24},"end":{"line":191,"column":46}},"117":{"start":{"line":198,"column":12},"end":{"line":202,"column":15}},"118":{"start":{"line":199,"column":16},"end":{"line":201,"column":17}},"119":{"start":{"line":200,"column":20},"end":{"line":200,"column":42}},"120":{"start":{"line":207,"column":0},"end":{"line":207,"column":26}},"121":{"start":{"line":209,"column":17},"end":{"line":209,"column":70}},"122":{"start":{"line":210,"column":4},"end":{"line":210,"column":50}},"123":{"start":{"line":212,"column":0},"end":{"line":212,"column":42}},"124":{"start":{"line":214,"column":4},"end":{"line":224,"column":5}},"125":{"start":{"line":215,"column":8},"end":{"line":223,"column":9}},"126":{"start":{"line":216,"column":12},"end":{"line":216,"column":79}},"127":{"start":{"line":219,"column":33},"end":{"line":219,"column":78}},"128":{"start":{"line":220,"column":24},"end":{"line":220,"column":77}},"129":{"start":{"line":221,"column":12},"end":{"line":221,"column":78}},"130":{"start":{"line":222,"column":12},"end":{"line":222,"column":37}},"131":{"start":{"line":225,"column":4},"end":{"line":225,"column":19}},"132":{"start":{"line":228,"column":4},"end":{"line":230,"column":5}},"133":{"start":{"line":229,"column":8},"end":{"line":229,"column":22}},"134":{"start":{"line":231,"column":4},"end":{"line":250,"column":5}},"135":{"start":{"line":232,"column":22},"end":{"line":232,"column":35}},"136":{"start":{"line":233,"column":8},"end":{"line":249,"column":9}},"137":{"start":{"line":234,"column":28},"end":{"line":234,"column":66}},"138":{"start":{"line":235,"column":12},"end":{"line":244,"column":13}},"139":{"start":{"line":236,"column":16},"end":{"line":236,"column":34}},"140":{"start":{"line":239,"column":16},"end":{"line":243,"column":18}},"141":{"start":{"line":245,"column":12},"end":{"line":245,"column":33}},"142":{"start":{"line":247,"column":13},"end":{"line":249,"column":9}},"143":{"start":{"line":248,"column":12},"end":{"line":248,"column":51}},"144":{"start":{"line":251,"column":4},"end":{"line":251,"column":18}},"145":{"start":{"line":254,"column":4},"end":{"line":254,"column":56}},"146":{"start":{"line":257,"column":4},"end":{"line":259,"column":5}},"147":{"start":{"line":258,"column":8},"end":{"line":258,"column":49}},"148":{"start":{"line":260,"column":4},"end":{"line":262,"column":5}},"149":{"start":{"line":261,"column":8},"end":{"line":261,"column":21}},"150":{"start":{"line":263,"column":4},"end":{"line":263,"column":46}},"151":{"start":{"line":267,"column":4},"end":{"line":281,"column":5}},"152":{"start":{"line":268,"column":8},"end":{"line":271,"column":10}},"153":{"start":{"line":270,"column":69},"end":{"line":270,"column":113}},"154":{"start":{"line":275,"column":8},"end":{"line":280,"column":9}},"155":{"start":{"line":276,"column":12},"end":{"line":279,"column":14}},"156":{"start":{"line":278,"column":62},"end":{"line":278,"column":127}},"157":{"start":{"line":284,"column":19},"end":{"line":284,"column":20}},"158":{"start":{"line":285,"column":23},"end":{"line":295,"column":6}},"159":{"start":{"line":286,"column":21},"end":{"line":286,"column":49}},"160":{"start":{"line":288,"column":23},"end":{"line":293,"column":9}},"161":{"start":{"line":292,"column":43},"end":{"line":292,"column":87}},"162":{"start":{"line":294,"column":8},"end":{"line":294,"column":22}},"163":{"start":{"line":296,"column":4},"end":{"line":296,"column":22}},"164":{"start":{"line":299,"column":25},"end":{"line":299,"column":78}},"165":{"start":{"line":300,"column":4},"end":{"line":305,"column":5}},"166":{"start":{"line":301,"column":8},"end":{"line":304,"column":10}},"167":{"start":{"line":306,"column":23},"end":{"line":306,"column":65}},"168":{"start":{"line":307,"column":27},"end":{"line":307,"column":66}},"169":{"start":{"line":308,"column":4},"end":{"line":308,"column":36}},"170":{"start":{"line":309,"column":4},"end":{"line":315,"column":7}},"171":{"start":{"line":310,"column":8},"end":{"line":314,"column":11}},"172":{"start":{"line":311,"column":12},"end":{"line":313,"column":15}},"173":{"start":{"line":316,"column":4},"end":{"line":319,"column":6}},"174":{"start":{"line":321,"column":0},"end":{"line":321,"column":46}},"175":{"start":{"line":323,"column":33},"end":{"line":323,"column":93}},"176":{"start":{"line":324,"column":30},"end":{"line":324,"column":78}},"177":{"start":{"line":325,"column":4},"end":{"line":332,"column":5}},"178":{"start":{"line":326,"column":8},"end":{"line":326,"column":62}},"179":{"start":{"line":328,"column":9},"end":{"line":332,"column":5}},"180":{"start":{"line":329,"column":43},"end":{"line":329,"column":86}},"181":{"start":{"line":330,"column":25},"end":{"line":330,"column":118}},"182":{"start":{"line":331,"column":8},"end":{"line":331,"column":64}},"183":{"start":{"line":333,"column":4},"end":{"line":333,"column":29}},"184":{"start":{"line":336,"column":4},"end":{"line":352,"column":5}},"185":{"start":{"line":337,"column":43},"end":{"line":337,"column":76}},"186":{"start":{"line":338,"column":22},"end":{"line":350,"column":10}},"187":{"start":{"line":339,"column":12},"end":{"line":349,"column":13}},"188":{"start":{"line":340,"column":16},"end":{"line":340,"column":38}},"189":{"start":{"line":343,"column":16},"end":{"line":348,"column":17}},"190":{"start":{"line":344,"column":20},"end":{"line":344,"column":48}},"191":{"start":{"line":347,"column":20},"end":{"line":347,"column":65}},"192":{"start":{"line":351,"column":8},"end":{"line":351,"column":63}},"193":{"start":{"line":353,"column":4},"end":{"line":353,"column":16}},"194":{"start":{"line":355,"column":0},"end":{"line":355,"column":68}},"195":{"start":{"line":357,"column":19},"end":{"line":357,"column":28}},"196":{"start":{"line":358,"column":4},"end":{"line":360,"column":7}},"197":{"start":{"line":359,"column":8},"end":{"line":359,"column":41}},"198":{"start":{"line":361,"column":4},"end":{"line":366,"column":15}},"199":{"start":{"line":362,"column":8},"end":{"line":365,"column":12}},"200":{"start":{"line":362,"column":59},"end":{"line":365,"column":9}},"201":{"start":{"line":364,"column":43},"end":{"line":364,"column":87}},"202":{"start":{"line":368,"column":0},"end":{"line":368,"column":52}},"203":{"start":{"line":370,"column":19},"end":{"line":370,"column":28}},"204":{"start":{"line":371,"column":4},"end":{"line":373,"column":7}},"205":{"start":{"line":372,"column":8},"end":{"line":372,"column":41}},"206":{"start":{"line":374,"column":4},"end":{"line":379,"column":15}},"207":{"start":{"line":375,"column":8},"end":{"line":378,"column":12}},"208":{"start":{"line":375,"column":57},"end":{"line":378,"column":9}},"209":{"start":{"line":381,"column":0},"end":{"line":381,"column":50}},"210":{"start":{"line":383,"column":19},"end":{"line":383,"column":28}},"211":{"start":{"line":384,"column":4},"end":{"line":386,"column":7}},"212":{"start":{"line":385,"column":8},"end":{"line":385,"column":41}},"213":{"start":{"line":387,"column":4},"end":{"line":396,"column":84}},"214":{"start":{"line":388,"column":8},"end":{"line":395,"column":11}},"215":{"start":{"line":389,"column":12},"end":{"line":394,"column":15}},"216":{"start":{"line":389,"column":71},"end":{"line":389,"column":123}},"217":{"start":{"line":390,"column":16},"end":{"line":393,"column":18}},"218":{"start":{"line":396,"column":45},"end":{"line":396,"column":77}},"219":{"start":{"line":398,"column":0},"end":{"line":398,"column":68}},"220":{"start":{"line":400,"column":4},"end":{"line":409,"column":5}},"221":{"start":{"line":402,"column":12},"end":{"line":402,"column":56}},"222":{"start":{"line":404,"column":12},"end":{"line":404,"column":52}},"223":{"start":{"line":406,"column":12},"end":{"line":406,"column":50}},"224":{"start":{"line":408,"column":12},"end":{"line":408,"column":60}},"225":{"start":{"line":411,"column":0},"end":{"line":411,"column":48}},"226":{"start":{"line":413,"column":20},"end":{"line":413,"column":32}},"227":{"start":{"line":414,"column":26},"end":{"line":414,"column":68}},"228":{"start":{"line":415,"column":4},"end":{"line":417,"column":5}},"229":{"start":{"line":416,"column":8},"end":{"line":416,"column":103}},"230":{"start":{"line":418,"column":4},"end":{"line":418,"column":25}},"231":{"start":{"line":421,"column":25},"end":{"line":421,"column":45}},"232":{"start":{"line":422,"column":19},"end":{"line":430,"column":10}},"233":{"start":{"line":423,"column":8},"end":{"line":428,"column":9}},"234":{"start":{"line":424,"column":28},"end":{"line":424,"column":63}},"235":{"start":{"line":425,"column":12},"end":{"line":427,"column":13}},"236":{"start":{"line":426,"column":16},"end":{"line":426,"column":39}},"237":{"start":{"line":429,"column":8},"end":{"line":429,"column":24}},"238":{"start":{"line":432,"column":4},"end":{"line":432,"column":56}},"239":{"start":{"line":433,"column":4},"end":{"line":433,"column":38}},"240":{"start":{"line":436,"column":26},"end":{"line":436,"column":47}},"241":{"start":{"line":437,"column":19},"end":{"line":437,"column":50}},"242":{"start":{"line":438,"column":4},"end":{"line":441,"column":5}},"243":{"start":{"line":439,"column":8},"end":{"line":440,"column":73}},"244":{"start":{"line":442,"column":20},"end":{"line":442,"column":76}},"245":{"start":{"line":443,"column":4},"end":{"line":445,"column":5}},"246":{"start":{"line":444,"column":8},"end":{"line":444,"column":100}},"247":{"start":{"line":446,"column":4},"end":{"line":446,"column":19}},"248":{"start":{"line":448,"column":0},"end":{"line":448,"column":46}},"249":{"start":{"line":450,"column":20},"end":{"line":450,"column":39}},"250":{"start":{"line":451,"column":16},"end":{"line":451,"column":42}},"251":{"start":{"line":452,"column":25},"end":{"line":452,"column":140}},"252":{"start":{"line":453,"column":4},"end":{"line":455,"column":5}},"253":{"start":{"line":454,"column":8},"end":{"line":454,"column":38}},"254":{"start":{"line":456,"column":4},"end":{"line":458,"column":5}},"255":{"start":{"line":457,"column":8},"end":{"line":457,"column":35}},"256":{"start":{"line":459,"column":19},"end":{"line":495,"column":5}},"257":{"start":{"line":471,"column":25},"end":{"line":471,"column":78}},"258":{"start":{"line":472,"column":12},"end":{"line":489,"column":13}},"259":{"start":{"line":473,"column":30},"end":{"line":473,"column":51}},"260":{"start":{"line":474,"column":16},"end":{"line":488,"column":17}},"261":{"start":{"line":475,"column":38},"end":{"line":475,"column":70}},"262":{"start":{"line":476,"column":32},"end":{"line":482,"column":33}},"263":{"start":{"line":483,"column":20},"end":{"line":487,"column":22}},"264":{"start":{"line":490,"column":12},"end":{"line":493,"column":14}},"265":{"start":{"line":496,"column":4},"end":{"line":496,"column":18}},"266":{"start":{"line":498,"column":0},"end":{"line":498,"column":48}},"267":{"start":{"line":500,"column":21},"end":{"line":516,"column":6}},"268":{"start":{"line":501,"column":25},"end":{"line":501,"column":68}},"269":{"start":{"line":502,"column":22},"end":{"line":502,"column":64}},"270":{"start":{"line":503,"column":8},"end":{"line":503,"column":228}},"271":{"start":{"line":504,"column":8},"end":{"line":515,"column":10}},"272":{"start":{"line":517,"column":4},"end":{"line":578,"column":5}},"273":{"start":{"line":518,"column":8},"end":{"line":532,"column":10}},"274":{"start":{"line":534,"column":9},"end":{"line":578,"column":5}},"275":{"start":{"line":535,"column":29},"end":{"line":550,"column":10}},"276":{"start":{"line":536,"column":29},"end":{"line":536,"column":72}},"277":{"start":{"line":537,"column":31},"end":{"line":537,"column":76}},"278":{"start":{"line":538,"column":30},"end":{"line":538,"column":74}},"279":{"start":{"line":539,"column":12},"end":{"line":549,"column":14}},"280":{"start":{"line":551,"column":8},"end":{"line":554,"column":10}},"281":{"start":{"line":557,"column":31},"end":{"line":573,"column":10}},"282":{"start":{"line":558,"column":26},"end":{"line":558,"column":68}},"283":{"start":{"line":559,"column":29},"end":{"line":559,"column":72}},"284":{"start":{"line":560,"column":12},"end":{"line":560,"column":210}},"285":{"start":{"line":561,"column":12},"end":{"line":572,"column":14}},"286":{"start":{"line":574,"column":8},"end":{"line":577,"column":10}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":23,"column":1},"end":{"line":23,"column":2}},"loc":{"start":{"line":23,"column":29},"end":{"line":28,"column":1}},"line":23},"1":{"name":"(anonymous_1)","decl":{"start":{"line":30,"column":1},"end":{"line":30,"column":2}},"loc":{"start":{"line":30,"column":22},"end":{"line":33,"column":1}},"line":30},"2":{"name":"(anonymous_2)","decl":{"start":{"line":35,"column":1},"end":{"line":35,"column":2}},"loc":{"start":{"line":35,"column":25},"end":{"line":39,"column":1}},"line":35},"3":{"name":"(anonymous_3)","decl":{"start":{"line":41,"column":1},"end":{"line":41,"column":2}},"loc":{"start":{"line":41,"column":26},"end":{"line":44,"column":1}},"line":41},"4":{"name":"compile","decl":{"start":{"line":45,"column":9},"end":{"line":45,"column":16}},"loc":{"start":{"line":48,"column":3},"end":{"line":206,"column":1}},"line":48},"5":{"name":"(anonymous_5)","decl":{"start":{"line":93,"column":43},"end":{"line":93,"column":44}},"loc":{"start":{"line":93,"column":51},"end":{"line":128,"column":13}},"line":93},"6":{"name":"(anonymous_6)","decl":{"start":{"line":130,"column":64},"end":{"line":130,"column":65}},"loc":{"start":{"line":130,"column":72},"end":{"line":147,"column":17}},"line":130},"7":{"name":"(anonymous_7)","decl":{"start":{"line":164,"column":36},"end":{"line":164,"column":37}},"loc":{"start":{"line":164,"column":44},"end":{"line":164,"column":65}},"line":164},"8":{"name":"(anonymous_8)","decl":{"start":{"line":171,"column":48},"end":{"line":171,"column":49}},"loc":{"start":{"line":171,"column":58},"end":{"line":171,"column":105}},"line":171},"9":{"name":"(anonymous_9)","decl":{"start":{"line":172,"column":49},"end":{"line":172,"column":50}},"loc":{"start":{"line":172,"column":57},"end":{"line":172,"column":65}},"line":172},"10":{"name":"(anonymous_10)","decl":{"start":{"line":183,"column":45},"end":{"line":183,"column":46}},"loc":{"start":{"line":183,"column":59},"end":{"line":194,"column":13}},"line":183},"11":{"name":"(anonymous_11)","decl":{"start":{"line":198,"column":47},"end":{"line":198,"column":48}},"loc":{"start":{"line":198,"column":55},"end":{"line":202,"column":13}},"line":198},"12":{"name":"compilerVersion","decl":{"start":{"line":208,"column":9},"end":{"line":208,"column":24}},"loc":{"start":{"line":208,"column":30},"end":{"line":211,"column":1}},"line":208},"13":{"name":"addSourceLocation","decl":{"start":{"line":213,"column":9},"end":{"line":213,"column":26}},"loc":{"start":{"line":213,"column":59},"end":{"line":226,"column":1}},"line":213},"14":{"name":"_addSourceLocationProperty","decl":{"start":{"line":227,"column":9},"end":{"line":227,"column":35}},"loc":{"start":{"line":227,"column":49},"end":{"line":252,"column":1}},"line":227},"15":{"name":"getOutputFilePath","decl":{"start":{"line":253,"column":9},"end":{"line":253,"column":26}},"loc":{"start":{"line":253,"column":44},"end":{"line":255,"column":1}},"line":253},"16":{"name":"getFullFilePath","decl":{"start":{"line":256,"column":9},"end":{"line":256,"column":24}},"loc":{"start":{"line":256,"column":61},"end":{"line":264,"column":1}},"line":256},"17":{"name":"getConstructorDeclaration","decl":{"start":{"line":265,"column":9},"end":{"line":265,"column":34}},"loc":{"start":{"line":265,"column":49},"end":{"line":282,"column":1}},"line":265},"18":{"name":"(anonymous_18)","decl":{"start":{"line":270,"column":62},"end":{"line":270,"column":63}},"loc":{"start":{"line":270,"column":67},"end":{"line":270,"column":115}},"line":270},"19":{"name":"(anonymous_19)","decl":{"start":{"line":278,"column":55},"end":{"line":278,"column":56}},"loc":{"start":{"line":278,"column":60},"end":{"line":278,"column":129}},"line":278},"20":{"name":"getPublicFunctionDeclaration","decl":{"start":{"line":283,"column":9},"end":{"line":283,"column":37}},"loc":{"start":{"line":283,"column":52},"end":{"line":297,"column":1}},"line":283},"21":{"name":"(anonymous_21)","decl":{"start":{"line":286,"column":16},"end":{"line":286,"column":17}},"loc":{"start":{"line":286,"column":21},"end":{"line":286,"column":49}},"line":286},"22":{"name":"(anonymous_22)","decl":{"start":{"line":287,"column":13},"end":{"line":287,"column":14}},"loc":{"start":{"line":287,"column":18},"end":{"line":295,"column":5}},"line":287},"23":{"name":"(anonymous_23)","decl":{"start":{"line":292,"column":36},"end":{"line":292,"column":37}},"loc":{"start":{"line":292,"column":41},"end":{"line":292,"column":89}},"line":292},"24":{"name":"getABIDeclaration","decl":{"start":{"line":298,"column":9},"end":{"line":298,"column":26}},"loc":{"start":{"line":298,"column":59},"end":{"line":320,"column":1}},"line":298},"25":{"name":"(anonymous_25)","decl":{"start":{"line":309,"column":23},"end":{"line":309,"column":24}},"loc":{"start":{"line":309,"column":30},"end":{"line":315,"column":5}},"line":309},"26":{"name":"(anonymous_26)","decl":{"start":{"line":310,"column":36},"end":{"line":310,"column":37}},"loc":{"start":{"line":310,"column":45},"end":{"line":314,"column":9}},"line":310},"27":{"name":"resolveAbiParamType","decl":{"start":{"line":322,"column":9},"end":{"line":322,"column":28}},"loc":{"start":{"line":322,"column":68},"end":{"line":334,"column":1}},"line":322},"28":{"name":"resolveArrayTypeWithConstInt","decl":{"start":{"line":335,"column":9},"end":{"line":335,"column":37}},"loc":{"start":{"line":335,"column":70},"end":{"line":354,"column":1}},"line":335},"29":{"name":"(anonymous_29)","decl":{"start":{"line":338,"column":37},"end":{"line":338,"column":38}},"loc":{"start":{"line":338,"column":45},"end":{"line":350,"column":9}},"line":338},"30":{"name":"getStructDeclaration","decl":{"start":{"line":356,"column":9},"end":{"line":356,"column":29}},"loc":{"start":{"line":356,"column":55},"end":{"line":367,"column":1}},"line":356},"31":{"name":"(anonymous_31)","decl":{"start":{"line":358,"column":40},"end":{"line":358,"column":41}},"loc":{"start":{"line":358,"column":47},"end":{"line":360,"column":5}},"line":358},"32":{"name":"(anonymous_32)","decl":{"start":{"line":361,"column":22},"end":{"line":361,"column":23}},"loc":{"start":{"line":361,"column":29},"end":{"line":366,"column":5}},"line":361},"33":{"name":"(anonymous_33)","decl":{"start":{"line":362,"column":53},"end":{"line":362,"column":54}},"loc":{"start":{"line":362,"column":59},"end":{"line":365,"column":9}},"line":362},"34":{"name":"(anonymous_34)","decl":{"start":{"line":364,"column":36},"end":{"line":364,"column":37}},"loc":{"start":{"line":364,"column":41},"end":{"line":364,"column":89}},"line":364},"35":{"name":"getAliasDeclaration","decl":{"start":{"line":369,"column":9},"end":{"line":369,"column":28}},"loc":{"start":{"line":369,"column":54},"end":{"line":380,"column":1}},"line":369},"36":{"name":"(anonymous_36)","decl":{"start":{"line":371,"column":40},"end":{"line":371,"column":41}},"loc":{"start":{"line":371,"column":47},"end":{"line":373,"column":5}},"line":371},"37":{"name":"(anonymous_37)","decl":{"start":{"line":374,"column":22},"end":{"line":374,"column":23}},"loc":{"start":{"line":374,"column":29},"end":{"line":379,"column":5}},"line":374},"38":{"name":"(anonymous_38)","decl":{"start":{"line":375,"column":51},"end":{"line":375,"column":52}},"loc":{"start":{"line":375,"column":57},"end":{"line":378,"column":9}},"line":375},"39":{"name":"getStaticConstIntDeclaration","decl":{"start":{"line":382,"column":9},"end":{"line":382,"column":37}},"loc":{"start":{"line":382,"column":63},"end":{"line":397,"column":1}},"line":382},"40":{"name":"(anonymous_40)","decl":{"start":{"line":384,"column":40},"end":{"line":384,"column":41}},"loc":{"start":{"line":384,"column":47},"end":{"line":386,"column":5}},"line":384},"41":{"name":"(anonymous_41)","decl":{"start":{"line":387,"column":22},"end":{"line":387,"column":23}},"loc":{"start":{"line":387,"column":38},"end":{"line":396,"column":5}},"line":387},"42":{"name":"(anonymous_42)","decl":{"start":{"line":388,"column":55},"end":{"line":388,"column":56}},"loc":{"start":{"line":388,"column":67},"end":{"line":395,"column":9}},"line":388},"43":{"name":"(anonymous_43)","decl":{"start":{"line":389,"column":65},"end":{"line":389,"column":66}},"loc":{"start":{"line":389,"column":71},"end":{"line":389,"column":123}},"line":389},"44":{"name":"(anonymous_44)","decl":{"start":{"line":389,"column":130},"end":{"line":389,"column":131}},"loc":{"start":{"line":389,"column":135},"end":{"line":394,"column":13}},"line":389},"45":{"name":"(anonymous_45)","decl":{"start":{"line":396,"column":29},"end":{"line":396,"column":30}},"loc":{"start":{"line":396,"column":45},"end":{"line":396,"column":77}},"line":396},"46":{"name":"getPlatformScryptc","decl":{"start":{"line":399,"column":9},"end":{"line":399,"column":27}},"loc":{"start":{"line":399,"column":30},"end":{"line":410,"column":1}},"line":399},"47":{"name":"vscodeExtensionPath","decl":{"start":{"line":412,"column":9},"end":{"line":412,"column":28}},"loc":{"start":{"line":412,"column":31},"end":{"line":419,"column":1}},"line":412},"48":{"name":"findVscodeScrypt","decl":{"start":{"line":420,"column":9},"end":{"line":420,"column":25}},"loc":{"start":{"line":420,"column":41},"end":{"line":434,"column":1}},"line":420},"49":{"name":"(anonymous_49)","decl":{"start":{"line":422,"column":58},"end":{"line":422,"column":59}},"loc":{"start":{"line":422,"column":78},"end":{"line":430,"column":5}},"line":422},"50":{"name":"getDefaultScryptc","decl":{"start":{"line":435,"column":9},"end":{"line":435,"column":26}},"loc":{"start":{"line":435,"column":29},"end":{"line":447,"column":1}},"line":435},"51":{"name":"desc2CompileResult","decl":{"start":{"line":449,"column":9},"end":{"line":449,"column":27}},"loc":{"start":{"line":449,"column":41},"end":{"line":497,"column":1}},"line":449},"52":{"name":"(anonymous_52)","decl":{"start":{"line":470,"column":21},"end":{"line":470,"column":22}},"loc":{"start":{"line":470,"column":40},"end":{"line":494,"column":9}},"line":470},"53":{"name":"getErrorsAndWarnings","decl":{"start":{"line":499,"column":9},"end":{"line":499,"column":29}},"loc":{"start":{"line":499,"column":62},"end":{"line":579,"column":1}},"line":499},"54":{"name":"(anonymous_54)","decl":{"start":{"line":500,"column":59},"end":{"line":500,"column":60}},"loc":{"start":{"line":500,"column":68},"end":{"line":516,"column":5}},"line":500},"55":{"name":"(anonymous_55)","decl":{"start":{"line":535,"column":70},"end":{"line":535,"column":71}},"loc":{"start":{"line":535,"column":79},"end":{"line":550,"column":9}},"line":535},"56":{"name":"(anonymous_56)","decl":{"start":{"line":557,"column":74},"end":{"line":557,"column":75}},"loc":{"start":{"line":557,"column":83},"end":{"line":573,"column":9}},"line":557}},"branchMap":{"0":{"loc":{"start":{"line":28,"column":22},"end":{"line":28,"column":81}},"type":"binary-expr","locations":[{"start":{"line":28,"column":22},"end":{"line":28,"column":46}},{"start":{"line":28,"column":51},"end":{"line":28,"column":80}}],"line":28},"1":{"loc":{"start":{"line":33,"column":15},"end":{"line":33,"column":60}},"type":"binary-expr","locations":[{"start":{"line":33,"column":15},"end":{"line":33,"column":32}},{"start":{"line":33,"column":37},"end":{"line":33,"column":59}}],"line":33},"2":{"loc":{"start":{"line":39,"column":18},"end":{"line":39,"column":69}},"type":"binary-expr","locations":[{"start":{"line":39,"column":18},"end":{"line":39,"column":38}},{"start":{"line":39,"column":43},"end":{"line":39,"column":68}}],"line":39},"3":{"loc":{"start":{"line":44,"column":19},"end":{"line":44,"column":72}},"type":"binary-expr","locations":[{"start":{"line":44,"column":19},"end":{"line":44,"column":40}},{"start":{"line":44,"column":45},"end":{"line":44,"column":71}}],"line":44},"4":{"loc":{"start":{"line":45,"column":25},"end":{"line":48,"column":1}},"type":"default-arg","locations":[{"start":{"line":45,"column":36},"end":{"line":48,"column":1}}],"line":45},"5":{"loc":{"start":{"line":52,"column":26},"end":{"line":52,"column":48}},"type":"binary-expr","locations":[{"start":{"line":52,"column":26},"end":{"line":52,"column":38}},{"start":{"line":52,"column":42},"end":{"line":52,"column":48}}],"line":52},"6":{"loc":{"start":{"line":54,"column":22},"end":{"line":54,"column":50}},"type":"binary-expr","locations":[{"start":{"line":54,"column":22},"end":{"line":54,"column":40}},{"start":{"line":54,"column":44},"end":{"line":54,"column":50}}],"line":54},"7":{"loc":{"start":{"line":55,"column":20},"end":{"line":55,"column":47}},"type":"binary-expr","locations":[{"start":{"line":55,"column":20},"end":{"line":55,"column":36}},{"start":{"line":55,"column":40},"end":{"line":55,"column":47}}],"line":55},"8":{"loc":{"start":{"line":58,"column":30},"end":{"line":58,"column":115}},"type":"cond-expr","locations":[{"start":{"line":58,"column":61},"end":{"line":58,"column":75}},{"start":{"line":58,"column":78},"end":{"line":58,"column":115}}],"line":58},"9":{"loc":{"start":{"line":59,"column":26},"end":{"line":59,"column":67}},"type":"binary-expr","locations":[{"start":{"line":59,"column":26},"end":{"line":59,"column":44}},{"start":{"line":59,"column":48},"end":{"line":59,"column":67}}],"line":59},"10":{"loc":{"start":{"line":60,"column":44},"end":{"line":60,"column":88}},"type":"cond-expr","locations":[{"start":{"line":60,"column":76},"end":{"line":60,"column":83}},{"start":{"line":60,"column":86},"end":{"line":60,"column":88}}],"line":60},"11":{"loc":{"start":{"line":60,"column":44},"end":{"line":60,"column":73}},"type":"binary-expr","locations":[{"start":{"line":60,"column":44},"end":{"line":60,"column":56}},{"start":{"line":60,"column":60},"end":{"line":60,"column":73}}],"line":60},"12":{"loc":{"start":{"line":60,"column":92},"end":{"line":60,"column":136}},"type":"cond-expr","locations":[{"start":{"line":60,"column":124},"end":{"line":60,"column":131}},{"start":{"line":60,"column":134},"end":{"line":60,"column":136}}],"line":60},"13":{"loc":{"start":{"line":60,"column":92},"end":{"line":60,"column":121}},"type":"binary-expr","locations":[{"start":{"line":60,"column":92},"end":{"line":60,"column":104}},{"start":{"line":60,"column":108},"end":{"line":60,"column":121}}],"line":60},"14":{"loc":{"start":{"line":60,"column":140},"end":{"line":60,"column":180}},"type":"cond-expr","locations":[{"start":{"line":60,"column":166},"end":{"line":60,"column":168}},{"start":{"line":60,"column":171},"end":{"line":60,"column":180}}],"line":60},"15":{"loc":{"start":{"line":60,"column":205},"end":{"line":60,"column":245}},"type":"cond-expr","locations":[{"start":{"line":60,"column":224},"end":{"line":60,"column":240}},{"start":{"line":60,"column":243},"end":{"line":60,"column":245}}],"line":60},"16":{"loc":{"start":{"line":65,"column":8},"end":{"line":70,"column":9}},"type":"if","locations":[{"start":{"line":65,"column":8},"end":{"line":70,"column":9}},{"start":{"line":65,"column":8},"end":{"line":70,"column":9}}],"line":65},"17":{"loc":{"start":{"line":65,"column":12},"end":{"line":65,"column":72}},"type":"binary-expr","locations":[{"start":{"line":65,"column":12},"end":{"line":65,"column":39}},{"start":{"line":65,"column":43},"end":{"line":65,"column":72}}],"line":65},"18":{"loc":{"start":{"line":67,"column":12},"end":{"line":69,"column":13}},"type":"if","locations":[{"start":{"line":67,"column":12},"end":{"line":69,"column":13}},{"start":{"line":67,"column":12},"end":{"line":69,"column":13}}],"line":67},"19":{"loc":{"start":{"line":71,"column":8},"end":{"line":86,"column":9}},"type":"if","locations":[{"start":{"line":71,"column":8},"end":{"line":86,"column":9}},{"start":{"line":71,"column":8},"end":{"line":86,"column":9}}],"line":71},"20":{"loc":{"start":{"line":71,"column":12},"end":{"line":71,"column":41}},"type":"binary-expr","locations":[{"start":{"line":71,"column":12},"end":{"line":71,"column":24}},{"start":{"line":71,"column":28},"end":{"line":71,"column":41}}],"line":71},"21":{"loc":{"start":{"line":88,"column":8},"end":{"line":149,"column":9}},"type":"if","locations":[{"start":{"line":88,"column":8},"end":{"line":149,"column":9}},{"start":{"line":88,"column":8},"end":{"line":149,"column":9}}],"line":88},"22":{"loc":{"start":{"line":88,"column":12},"end":{"line":88,"column":41}},"type":"binary-expr","locations":[{"start":{"line":88,"column":12},"end":{"line":88,"column":24}},{"start":{"line":88,"column":28},"end":{"line":88,"column":41}}],"line":88},"23":{"loc":{"start":{"line":94,"column":16},"end":{"line":98,"column":17}},"type":"if","locations":[{"start":{"line":94,"column":16},"end":{"line":98,"column":17}},{"start":{"line":94,"column":16},"end":{"line":98,"column":17}}],"line":94},"24":{"loc":{"start":{"line":100,"column":16},"end":{"line":126,"column":17}},"type":"if","locations":[{"start":{"line":100,"column":16},"end":{"line":126,"column":17}},{"start":{"line":100,"column":16},"end":{"line":126,"column":17}}],"line":100},"25":{"loc":{"start":{"line":100,"column":20},"end":{"line":100,"column":41}},"type":"binary-expr","locations":[{"start":{"line":100,"column":20},"end":{"line":100,"column":25}},{"start":{"line":100,"column":29},"end":{"line":100,"column":41}}],"line":100},"26":{"loc":{"start":{"line":104,"column":20},"end":{"line":106,"column":21}},"type":"if","locations":[{"start":{"line":104,"column":20},"end":{"line":106,"column":21}},{"start":{"line":104,"column":20},"end":{"line":106,"column":21}}],"line":104},"27":{"loc":{"start":{"line":107,"column":20},"end":{"line":109,"column":21}},"type":"if","locations":[{"start":{"line":107,"column":20},"end":{"line":109,"column":21}},{"start":{"line":107,"column":20},"end":{"line":109,"column":21}}],"line":107},"28":{"loc":{"start":{"line":110,"column":20},"end":{"line":112,"column":21}},"type":"if","locations":[{"start":{"line":110,"column":20},"end":{"line":112,"column":21}},{"start":{"line":110,"column":20},"end":{"line":112,"column":21}}],"line":110},"29":{"loc":{"start":{"line":113,"column":32},"end":{"line":119,"column":33}},"type":"cond-expr","locations":[{"start":{"line":113,"column":53},"end":{"line":119,"column":21}},{"start":{"line":119,"column":24},"end":{"line":119,"column":33}}],"line":113},"30":{"loc":{"start":{"line":114,"column":30},"end":{"line":114,"column":122}},"type":"cond-expr","locations":[{"start":{"line":114,"column":51},"end":{"line":114,"column":110}},{"start":{"line":114,"column":113},"end":{"line":114,"column":122}}],"line":114},"31":{"loc":{"start":{"line":115,"column":30},"end":{"line":115,"column":90}},"type":"cond-expr","locations":[{"start":{"line":115,"column":51},"end":{"line":115,"column":78}},{"start":{"line":115,"column":81},"end":{"line":115,"column":90}}],"line":115},"32":{"loc":{"start":{"line":116,"column":33},"end":{"line":116,"column":96}},"type":"cond-expr","locations":[{"start":{"line":116,"column":54},"end":{"line":116,"column":84}},{"start":{"line":116,"column":87},"end":{"line":116,"column":96}}],"line":116},"33":{"loc":{"start":{"line":117,"column":32},"end":{"line":117,"column":91}},"type":"cond-expr","locations":[{"start":{"line":117,"column":53},"end":{"line":117,"column":79}},{"start":{"line":117,"column":82},"end":{"line":117,"column":91}}],"line":117},"34":{"loc":{"start":{"line":118,"column":35},"end":{"line":118,"column":97}},"type":"cond-expr","locations":[{"start":{"line":118,"column":56},"end":{"line":118,"column":85}},{"start":{"line":118,"column":88},"end":{"line":118,"column":97}}],"line":118},"35":{"loc":{"start":{"line":129,"column":12},"end":{"line":148,"column":13}},"type":"if","locations":[{"start":{"line":129,"column":12},"end":{"line":148,"column":13}},{"start":{"line":129,"column":12},"end":{"line":148,"column":13}}],"line":129},"36":{"loc":{"start":{"line":132,"column":20},"end":{"line":146,"column":21}},"type":"if","locations":[{"start":{"line":132,"column":20},"end":{"line":146,"column":21}},{"start":{"line":132,"column":20},"end":{"line":146,"column":21}}],"line":132},"37":{"loc":{"start":{"line":132,"column":24},"end":{"line":132,"column":45}},"type":"binary-expr","locations":[{"start":{"line":132,"column":24},"end":{"line":132,"column":29}},{"start":{"line":132,"column":33},"end":{"line":132,"column":45}}],"line":132},"38":{"loc":{"start":{"line":134,"column":36},"end":{"line":140,"column":37}},"type":"cond-expr","locations":[{"start":{"line":134,"column":57},"end":{"line":140,"column":25}},{"start":{"line":140,"column":28},"end":{"line":140,"column":37}}],"line":134},"39":{"loc":{"start":{"line":135,"column":34},"end":{"line":135,"column":126}},"type":"cond-expr","locations":[{"start":{"line":135,"column":55},"end":{"line":135,"column":114}},{"start":{"line":135,"column":117},"end":{"line":135,"column":126}}],"line":135},"40":{"loc":{"start":{"line":136,"column":34},"end":{"line":136,"column":94}},"type":"cond-expr","locations":[{"start":{"line":136,"column":55},"end":{"line":136,"column":82}},{"start":{"line":136,"column":85},"end":{"line":136,"column":94}}],"line":136},"41":{"loc":{"start":{"line":137,"column":37},"end":{"line":137,"column":100}},"type":"cond-expr","locations":[{"start":{"line":137,"column":58},"end":{"line":137,"column":88}},{"start":{"line":137,"column":91},"end":{"line":137,"column":100}}],"line":137},"42":{"loc":{"start":{"line":138,"column":36},"end":{"line":138,"column":95}},"type":"cond-expr","locations":[{"start":{"line":138,"column":57},"end":{"line":138,"column":83}},{"start":{"line":138,"column":86},"end":{"line":138,"column":95}}],"line":138},"43":{"loc":{"start":{"line":139,"column":39},"end":{"line":139,"column":101}},"type":"cond-expr","locations":[{"start":{"line":139,"column":60},"end":{"line":139,"column":89}},{"start":{"line":139,"column":92},"end":{"line":139,"column":101}}],"line":139},"44":{"loc":{"start":{"line":150,"column":8},"end":{"line":178,"column":9}},"type":"if","locations":[{"start":{"line":150,"column":8},"end":{"line":178,"column":9}},{"start":{"line":150,"column":8},"end":{"line":178,"column":9}}],"line":150},"45":{"loc":{"start":{"line":156,"column":49},"end":{"line":156,"column":110}},"type":"cond-expr","locations":[{"start":{"line":156,"column":70},"end":{"line":156,"column":88}},{"start":{"line":156,"column":91},"end":{"line":156,"column":110}}],"line":156},"46":{"loc":{"start":{"line":159,"column":25},"end":{"line":159,"column":45}},"type":"binary-expr","locations":[{"start":{"line":159,"column":25},"end":{"line":159,"column":39}},{"start":{"line":159,"column":43},"end":{"line":159,"column":45}}],"line":159},"47":{"loc":{"start":{"line":160,"column":23},"end":{"line":160,"column":41}},"type":"binary-expr","locations":[{"start":{"line":160,"column":23},"end":{"line":160,"column":35}},{"start":{"line":160,"column":39},"end":{"line":160,"column":41}}],"line":160},"48":{"loc":{"start":{"line":161,"column":21},"end":{"line":161,"column":37}},"type":"binary-expr","locations":[{"start":{"line":161,"column":21},"end":{"line":161,"column":31}},{"start":{"line":161,"column":35},"end":{"line":161,"column":37}}],"line":161},"49":{"loc":{"start":{"line":162,"column":27},"end":{"line":162,"column":64}},"type":"binary-expr","locations":[{"start":{"line":162,"column":27},"end":{"line":162,"column":45}},{"start":{"line":162,"column":49},"end":{"line":162,"column":64}}],"line":162},"50":{"loc":{"start":{"line":168,"column":12},"end":{"line":174,"column":13}},"type":"if","locations":[{"start":{"line":168,"column":12},"end":{"line":174,"column":13}},{"start":{"line":168,"column":12},"end":{"line":174,"column":13}}],"line":168},"51":{"loc":{"start":{"line":168,"column":16},"end":{"line":168,"column":40}},"type":"binary-expr","locations":[{"start":{"line":168,"column":16},"end":{"line":168,"column":30}},{"start":{"line":168,"column":34},"end":{"line":168,"column":40}}],"line":168},"52":{"loc":{"start":{"line":182,"column":8},"end":{"line":203,"column":9}},"type":"if","locations":[{"start":{"line":182,"column":8},"end":{"line":203,"column":9}},{"start":{"line":182,"column":8},"end":{"line":203,"column":9}}],"line":182},"53":{"loc":{"start":{"line":185,"column":16},"end":{"line":193,"column":17}},"type":"if","locations":[{"start":{"line":185,"column":16},"end":{"line":193,"column":17}},{"start":{"line":185,"column":16},"end":{"line":193,"column":17}}],"line":185},"54":{"loc":{"start":{"line":186,"column":20},"end":{"line":192,"column":21}},"type":"if","locations":[{"start":{"line":186,"column":20},"end":{"line":192,"column":21}},{"start":{"line":186,"column":20},"end":{"line":192,"column":21}}],"line":186},"55":{"loc":{"start":{"line":199,"column":16},"end":{"line":201,"column":17}},"type":"if","locations":[{"start":{"line":199,"column":16},"end":{"line":201,"column":17}},{"start":{"line":199,"column":16},"end":{"line":201,"column":17}}],"line":199},"56":{"loc":{"start":{"line":215,"column":8},"end":{"line":223,"column":9}},"type":"if","locations":[{"start":{"line":215,"column":8},"end":{"line":223,"column":9}},{"start":{"line":215,"column":8},"end":{"line":223,"column":9}}],"line":215},"57":{"loc":{"start":{"line":219,"column":33},"end":{"line":219,"column":78}},"type":"cond-expr","locations":[{"start":{"line":219,"column":56},"end":{"line":219,"column":67}},{"start":{"line":219,"column":70},"end":{"line":219,"column":78}}],"line":219},"58":{"loc":{"start":{"line":228,"column":4},"end":{"line":230,"column":5}},"type":"if","locations":[{"start":{"line":228,"column":4},"end":{"line":230,"column":5}},{"start":{"line":228,"column":4},"end":{"line":230,"column":5}}],"line":228},"59":{"loc":{"start":{"line":233,"column":8},"end":{"line":249,"column":9}},"type":"if","locations":[{"start":{"line":233,"column":8},"end":{"line":249,"column":9}},{"start":{"line":233,"column":8},"end":{"line":249,"column":9}}],"line":233},"60":{"loc":{"start":{"line":235,"column":12},"end":{"line":244,"column":13}},"type":"if","locations":[{"start":{"line":235,"column":12},"end":{"line":244,"column":13}},{"start":{"line":235,"column":12},"end":{"line":244,"column":13}}],"line":235},"61":{"loc":{"start":{"line":247,"column":13},"end":{"line":249,"column":9}},"type":"if","locations":[{"start":{"line":247,"column":13},"end":{"line":249,"column":9}},{"start":{"line":247,"column":13},"end":{"line":249,"column":9}}],"line":247},"62":{"loc":{"start":{"line":257,"column":4},"end":{"line":259,"column":5}},"type":"if","locations":[{"start":{"line":257,"column":4},"end":{"line":259,"column":5}},{"start":{"line":257,"column":4},"end":{"line":259,"column":5}}],"line":257},"63":{"loc":{"start":{"line":260,"column":4},"end":{"line":262,"column":5}},"type":"if","locations":[{"start":{"line":260,"column":4},"end":{"line":262,"column":5}},{"start":{"line":260,"column":4},"end":{"line":262,"column":5}}],"line":260},"64":{"loc":{"start":{"line":267,"column":4},"end":{"line":281,"column":5}},"type":"if","locations":[{"start":{"line":267,"column":4},"end":{"line":281,"column":5}},{"start":{"line":267,"column":4},"end":{"line":281,"column":5}}],"line":267},"65":{"loc":{"start":{"line":275,"column":8},"end":{"line":280,"column":9}},"type":"if","locations":[{"start":{"line":275,"column":8},"end":{"line":280,"column":9}},{"start":{"line":275,"column":8},"end":{"line":280,"column":9}}],"line":275},"66":{"loc":{"start":{"line":291,"column":19},"end":{"line":291,"column":75}},"type":"cond-expr","locations":[{"start":{"line":291,"column":53},"end":{"line":291,"column":62}},{"start":{"line":291,"column":65},"end":{"line":291,"column":75}}],"line":291},"67":{"loc":{"start":{"line":300,"column":4},"end":{"line":305,"column":5}},"type":"if","locations":[{"start":{"line":300,"column":4},"end":{"line":305,"column":5}},{"start":{"line":300,"column":4},"end":{"line":305,"column":5}}],"line":300},"68":{"loc":{"start":{"line":325,"column":4},"end":{"line":332,"column":5}},"type":"if","locations":[{"start":{"line":325,"column":4},"end":{"line":332,"column":5}},{"start":{"line":325,"column":4},"end":{"line":332,"column":5}}],"line":325},"69":{"loc":{"start":{"line":328,"column":9},"end":{"line":332,"column":5}},"type":"if","locations":[{"start":{"line":328,"column":9},"end":{"line":332,"column":5}},{"start":{"line":328,"column":9},"end":{"line":332,"column":5}}],"line":328},"70":{"loc":{"start":{"line":330,"column":25},"end":{"line":330,"column":118}},"type":"cond-expr","locations":[{"start":{"line":330,"column":62},"end":{"line":330,"column":103}},{"start":{"line":330,"column":106},"end":{"line":330,"column":118}}],"line":330},"71":{"loc":{"start":{"line":336,"column":4},"end":{"line":352,"column":5}},"type":"if","locations":[{"start":{"line":336,"column":4},"end":{"line":352,"column":5}},{"start":{"line":336,"column":4},"end":{"line":352,"column":5}}],"line":336},"72":{"loc":{"start":{"line":339,"column":12},"end":{"line":349,"column":13}},"type":"if","locations":[{"start":{"line":339,"column":12},"end":{"line":349,"column":13}},{"start":{"line":339,"column":12},"end":{"line":349,"column":13}}],"line":339},"73":{"loc":{"start":{"line":343,"column":16},"end":{"line":348,"column":17}},"type":"if","locations":[{"start":{"line":343,"column":16},"end":{"line":348,"column":17}},{"start":{"line":343,"column":16},"end":{"line":348,"column":17}}],"line":343},"74":{"loc":{"start":{"line":389,"column":71},"end":{"line":389,"column":123}},"type":"binary-expr","locations":[{"start":{"line":389,"column":71},"end":{"line":389,"column":87}},{"start":{"line":389,"column":91},"end":{"line":389,"column":123}}],"line":389},"75":{"loc":{"start":{"line":400,"column":4},"end":{"line":409,"column":5}},"type":"switch","locations":[{"start":{"line":401,"column":8},"end":{"line":402,"column":56}},{"start":{"line":403,"column":8},"end":{"line":404,"column":52}},{"start":{"line":405,"column":8},"end":{"line":406,"column":50}},{"start":{"line":407,"column":8},"end":{"line":408,"column":60}}],"line":400},"76":{"loc":{"start":{"line":415,"column":4},"end":{"line":417,"column":5}},"type":"if","locations":[{"start":{"line":415,"column":4},"end":{"line":417,"column":5}},{"start":{"line":415,"column":4},"end":{"line":417,"column":5}}],"line":415},"77":{"loc":{"start":{"line":423,"column":8},"end":{"line":428,"column":9}},"type":"if","locations":[{"start":{"line":423,"column":8},"end":{"line":428,"column":9}},{"start":{"line":423,"column":8},"end":{"line":428,"column":9}}],"line":423},"78":{"loc":{"start":{"line":425,"column":12},"end":{"line":427,"column":13}},"type":"if","locations":[{"start":{"line":425,"column":12},"end":{"line":427,"column":13}},{"start":{"line":425,"column":12},"end":{"line":427,"column":13}}],"line":425},"79":{"loc":{"start":{"line":438,"column":4},"end":{"line":441,"column":5}},"type":"if","locations":[{"start":{"line":438,"column":4},"end":{"line":441,"column":5}},{"start":{"line":438,"column":4},"end":{"line":441,"column":5}}],"line":438},"80":{"loc":{"start":{"line":443,"column":4},"end":{"line":445,"column":5}},"type":"if","locations":[{"start":{"line":443,"column":4},"end":{"line":445,"column":5}},{"start":{"line":443,"column":4},"end":{"line":445,"column":5}}],"line":443},"81":{"loc":{"start":{"line":453,"column":4},"end":{"line":455,"column":5}},"type":"if","locations":[{"start":{"line":453,"column":4},"end":{"line":455,"column":5}},{"start":{"line":453,"column":4},"end":{"line":455,"column":5}}],"line":453},"82":{"loc":{"start":{"line":456,"column":4},"end":{"line":458,"column":5}},"type":"if","locations":[{"start":{"line":456,"column":4},"end":{"line":458,"column":5}},{"start":{"line":456,"column":4},"end":{"line":458,"column":5}}],"line":456},"83":{"loc":{"start":{"line":467,"column":19},"end":{"line":467,"column":59}},"type":"binary-expr","locations":[{"start":{"line":467,"column":19},"end":{"line":467,"column":40}},{"start":{"line":467,"column":44},"end":{"line":467,"column":59}}],"line":467},"84":{"loc":{"start":{"line":471,"column":25},"end":{"line":471,"column":78}},"type":"binary-expr","locations":[{"start":{"line":471,"column":25},"end":{"line":471,"column":46}},{"start":{"line":471,"column":50},"end":{"line":471,"column":78}}],"line":471},"85":{"loc":{"start":{"line":472,"column":12},"end":{"line":489,"column":13}},"type":"if","locations":[{"start":{"line":472,"column":12},"end":{"line":489,"column":13}},{"start":{"line":472,"column":12},"end":{"line":489,"column":13}}],"line":472},"86":{"loc":{"start":{"line":474,"column":16},"end":{"line":488,"column":17}},"type":"if","locations":[{"start":{"line":474,"column":16},"end":{"line":488,"column":17}},{"start":{"line":474,"column":16},"end":{"line":488,"column":17}}],"line":474},"87":{"loc":{"start":{"line":474,"column":20},"end":{"line":474,"column":41}},"type":"binary-expr","locations":[{"start":{"line":474,"column":20},"end":{"line":474,"column":25}},{"start":{"line":474,"column":29},"end":{"line":474,"column":41}}],"line":474},"88":{"loc":{"start":{"line":476,"column":32},"end":{"line":482,"column":33}},"type":"cond-expr","locations":[{"start":{"line":476,"column":53},"end":{"line":482,"column":21}},{"start":{"line":482,"column":24},"end":{"line":482,"column":33}}],"line":476},"89":{"loc":{"start":{"line":478,"column":30},"end":{"line":478,"column":90}},"type":"cond-expr","locations":[{"start":{"line":478,"column":51},"end":{"line":478,"column":78}},{"start":{"line":478,"column":81},"end":{"line":478,"column":90}}],"line":478},"90":{"loc":{"start":{"line":479,"column":33},"end":{"line":479,"column":96}},"type":"cond-expr","locations":[{"start":{"line":479,"column":54},"end":{"line":479,"column":84}},{"start":{"line":479,"column":87},"end":{"line":479,"column":96}}],"line":479},"91":{"loc":{"start":{"line":480,"column":32},"end":{"line":480,"column":91}},"type":"cond-expr","locations":[{"start":{"line":480,"column":53},"end":{"line":480,"column":79}},{"start":{"line":480,"column":82},"end":{"line":480,"column":91}}],"line":480},"92":{"loc":{"start":{"line":481,"column":35},"end":{"line":481,"column":97}},"type":"cond-expr","locations":[{"start":{"line":481,"column":56},"end":{"line":481,"column":85}},{"start":{"line":481,"column":88},"end":{"line":481,"column":97}}],"line":481},"93":{"loc":{"start":{"line":517,"column":4},"end":{"line":578,"column":5}},"type":"if","locations":[{"start":{"line":517,"column":4},"end":{"line":578,"column":5}},{"start":{"line":517,"column":4},"end":{"line":578,"column":5}}],"line":517},"94":{"loc":{"start":{"line":534,"column":9},"end":{"line":578,"column":5}},"type":"if","locations":[{"start":{"line":534,"column":9},"end":{"line":578,"column":5}},{"start":{"line":534,"column":9},"end":{"line":578,"column":5}}],"line":534}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":0,"50":0,"51":0,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1,"73":1,"74":236,"75":0,"76":236,"77":236,"78":236,"79":236,"80":236,"81":0,"82":236,"83":0,"84":236,"85":3,"86":236,"87":236,"88":0,"89":1,"90":1,"91":7,"92":7,"93":7,"94":7,"95":7,"96":1,"97":1,"98":1,"99":1,"100":1,"101":236,"102":1,"103":1,"104":1,"105":236,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":3,"113":3,"114":3,"115":1,"116":2,"117":0,"118":0,"119":0,"120":1,"121":2,"122":2,"123":1,"124":1,"125":1,"126":0,"127":1,"128":1,"129":1,"130":1,"131":1,"132":135,"133":0,"134":135,"135":1327,"136":1327,"137":70,"138":70,"139":0,"140":70,"141":70,"142":1257,"143":134,"144":135,"145":3,"146":221,"147":221,"148":0,"149":0,"150":0,"151":1,"152":0,"153":0,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":0,"167":1,"168":1,"169":1,"170":1,"171":2,"172":2,"173":1,"174":1,"175":2,"176":2,"177":2,"178":0,"179":2,"180":0,"181":0,"182":0,"183":2,"184":2,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":2,"194":1,"195":1,"196":1,"197":0,"198":1,"199":1,"200":1,"201":2,"202":1,"203":1,"204":1,"205":0,"206":1,"207":1,"208":0,"209":1,"210":1,"211":1,"212":0,"213":1,"214":1,"215":1,"216":1,"217":0,"218":0,"219":1,"220":2,"221":2,"222":0,"223":0,"224":0,"225":1,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":1,"249":8,"250":8,"251":8,"252":8,"253":0,"254":8,"255":0,"256":8,"257":577,"258":577,"259":577,"260":577,"261":577,"262":577,"263":577,"264":0,"265":8,"266":1,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0},"f":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":236,"6":7,"7":236,"8":1,"9":236,"10":3,"11":0,"12":2,"13":1,"14":135,"15":3,"16":221,"17":1,"18":0,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":2,"26":2,"27":2,"28":2,"29":0,"30":1,"31":0,"32":1,"33":1,"34":2,"35":1,"36":0,"37":1,"38":0,"39":1,"40":0,"41":1,"42":1,"43":1,"44":0,"45":0,"46":2,"47":0,"48":0,"49":0,"50":0,"51":8,"52":577,"53":0,"54":0,"55":0,"56":0},"b":{"0":[1,1],"1":[1,1],"2":[1,1],"3":[1,1],"4":[0],"5":[1,1],"6":[1,0],"7":[1,1],"8":[0,1],"9":[1,0],"10":[1,0],"11":[1,1],"12":[1,0],"13":[1,1],"14":[0,1],"15":[0,1],"16":[0,1],"17":[1,1],"18":[0,0],"19":[1,0],"20":[1,1],"21":[1,0],"22":[1,1],"23":[0,236],"24":[236,0],"25":[236,236],"26":[0,236],"27":[0,236],"28":[3,233],"29":[213,23],"30":[213,0],"31":[213,0],"32":[213,0],"33":[213,0],"34":[213,0],"35":[1,0],"36":[7,0],"37":[7,7],"38":[7,0],"39":[7,0],"40":[7,0],"41":[7,0],"42":[7,0],"43":[7,0],"44":[1,0],"45":[1,0],"46":[1,0],"47":[1,0],"48":[1,0],"49":[1,1],"50":[1,0],"51":[1,1],"52":[1,0],"53":[3,0],"54":[1,2],"55":[0,0],"56":[0,1],"57":[1,0],"58":[0,135],"59":[70,1257],"60":[0,70],"61":[134,1123],"62":[221,0],"63":[0,0],"64":[0,1],"65":[1,0],"66":[0,1],"67":[0,1],"68":[0,2],"69":[0,2],"70":[0,0],"71":[0,2],"72":[0,0],"73":[0,0],"74":[1,0],"75":[2,0,0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,8],"82":[0,8],"83":[8,0],"84":[577,577],"85":[577,0],"86":[577,0],"87":[577,577],"88":[434,143],"89":[434,0],"90":[434,0],"91":[434,0],"92":[434,0],"93":[0,0],"94":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/myland/code/scryptlib/src/compilerWrapper.ts","sources":["C:/Users/myland/code/scryptlib/src/compilerWrapper.ts"],"names":[],"mappings":"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","sourcesContent":["import { basename, dirname, join } from 'path';\nimport { execSync } from 'child_process';\nimport { readFileSync, writeFileSync, unlinkSync, existsSync, renameSync, readdirSync } from 'fs';\nimport { oc } from 'ts-optchain';\nimport { ContractDescription } from './contract';\nimport * as os from 'os';\nimport md5 = require('md5');\nimport { path2uri, isArrayType, arrayTypeAndSizeStr, toLiteralArrayType, resolveType, isStructType, getStructNameByType, arrayTypeAndSize } from './utils';\nimport compareVersions = require('compare-versions');\nimport JSONbig = require('json-bigint');\nconst SYNTAX_ERR_REG = /(?<filePath>[^\\s]+):(?<line>\\d+):(?<column>\\d+):\\n([^\\n]+\\n){3}(unexpected (?<unexpected>[^\\n]+)\\nexpecting (?<expecting>[^\\n]+)|(?<message>[^\\n]+))/g;\nconst SEMANTIC_ERR_REG = /Error:(\\s|\\n)*(?<filePath>[^\\s]+):(?<line>\\d+):(?<column>\\d+):(?<line1>\\d+):(?<column1>\\d+):*\\n(?<message>[^\\n]+)\\n/g;\nconst INTERNAL_ERR_REG = /Internal error:(?<message>.+)/;\nconst WARNING_REG = /Warning:(\\s|\\n)*(?<filePath>[^\\s]+):(?<line>\\d+):(?<column>\\d+):(?<line1>\\d+):(?<column1>\\d+):*\\n(?<message>[^\\n]+)\\n/g;\nconst JSONbigAlways = JSONbig({ alwaysParseAsBig: true, constructorAction: 'preserve' });\n\n\n//SOURCE_REG parser src eg: [0:6:3:8:4#Bar.constructor:0]\nconst SOURCE_REG = /^(?<fileIndex>-?\\d+):(?<line>\\d+):(?<col>\\d+):(?<endLine>\\d+):(?<endCol>\\d+)(#(?<tagStr>.+))?/;\n\n// see VERSIONLOG.md\nconst CURRENT_CONTRACT_DESCRIPTION_VERSION = 4;\nexport enum CompileErrorType {\n  SyntaxError = 'SyntaxError',\n  SemanticError = 'SemanticError',\n  InternalError = 'InternalError',\n  Warning = 'Warning'\n}\n\n\nexport enum BuildType {\n  Debug = 'debug',\n  Release = 'release'\n}\n\nexport interface CompileErrorBase {\n  type: string;\n  filePath: string;\n  position: [{\n    line: number;\n    column: number;\n  }, {\n    line: number;\n    column: number;\n  }?];\n  message: string;\n}\n\nexport interface SyntaxError extends CompileErrorBase {\n  type: CompileErrorType.SyntaxError;\n  unexpected: string;\n  expecting: string;\n}\n\nexport interface SemanticError extends CompileErrorBase {\n  type: CompileErrorType.SemanticError;\n}\n\nexport interface InternalError extends CompileErrorBase {\n  type: CompileErrorType.InternalError;\n}\n\nexport interface Warning extends CompileErrorBase {\n  type: CompileErrorType.Warning;\n}\n\nexport type CompileError = SyntaxError | SemanticError | InternalError | Warning;\n\nexport interface CompileResult {\n  asm?: OpCode[];\n  ast?: Record<string, unknown>;\n  dependencyAsts?: Record<string, unknown>;\n  abi?: Array<ABIEntity>;\n  errors: CompileError[];\n  warnings: Warning[];\n  compilerVersion?: string;\n  contract?: string;\n  md5?: string;\n  structs?: any;\n  alias?: any;\n  file?: string;\n  buildType?: string;\n  autoTypedVars?: AutoTypedVar[];\n}\n\nexport enum DebugModeTag {\n  FuncStart = 'F0',\n  FuncEnd = 'F1',\n  LoopStart = 'L0'\n}\n\n\nexport interface Pos {\n  file: string;\n  line: number;\n  endLine: number;\n  column: number;\n  endColumn: number;\n}\n\nexport interface OpCode {\n  opcode: string;\n  stack?: string[];\n  pos?: Pos;\n  debugTag?: DebugModeTag;\n}\n\nexport interface AutoTypedVar {\n  name: string;\n  pos: Pos;\n  type: string;\n}\n\nexport interface ABI {\n  contract: string, abi: Array<ABIEntity>\n}\n\nexport enum ABIEntityType {\n  FUNCTION = 'function',\n  CONSTRUCTOR = 'constructor'\n}\nexport type ParamEntity = {\n  name: string;\n  type: string;\n}\nexport interface ABIEntity {\n  type: ABIEntityType;\n  name?: string;\n  params: Array<ParamEntity>;\n  index?: number;\n}\n\nexport interface StructEntity {\n  name: string;\n  params: Array<ParamEntity>;\n}\n\nexport interface AliasEntity {\n  name: string;\n  type: string;\n}\n\nexport function compile(\n  source: {\n    path: string,\n    content?: string,\n  },\n  settings: {\n    ast?: boolean,\n    asm?: boolean,\n    debug?: boolean,\n    desc?: boolean,\n    outputDir?: string,\n    outputToFiles?: boolean,\n    cwd?: string,\n    cmdPrefix?: string,\n    cmdArgs?: string,\n    buildType?: string,\n    timeout?: number  // in ms\n  } = {\n    asm: true,\n    debug: true,\n  }\n): CompileResult {\n  const st = Date.now();\n  const sourcePath = source.path;\n  const srcDir = dirname(sourcePath);\n  const curWorkingDir = settings.cwd || srcDir;\n  const sourceFileName = basename(sourcePath);\n  const outputDir = settings.outputDir || srcDir;\n  const timeout = settings.timeout || 1200000;\n  const outputFiles = {};\n  try {\n    const sourceContent = source.content !== undefined ? source.content : readFileSync(sourcePath, 'utf8');\n    const cmdPrefix = settings.cmdPrefix || getDefaultScryptc();\n    const cmd = `${cmdPrefix} compile ${settings.asm || settings.desc ? '--asm' : ''} ${settings.ast || settings.desc ? '--ast' : ''} ${settings.debug == false ? '' : '--debug'} -r -o \"${outputDir}\" ${settings.cmdArgs ? settings.cmdArgs : ''}`;\n    let output = execSync(cmd, { input: sourceContent, cwd: curWorkingDir, timeout }).toString();\n    // Because the output of the compiler on the win32 platform uses crlf as a newline， here we change \\r\\n to \\n. make SYNTAX_ERR_REG、SEMANTIC_ERR_REG、IMPORT_ERR_REG work.\n    output = output.split(/\\r?\\n/g).join('\\n');\n    let result: CompileResult = { errors: [], warnings: [] };\n    if (output.startsWith('Error:') || output.startsWith('Warning:')) {\n      result = getErrorsAndWarnings(output, srcDir, sourceFileName);\n\n      if (result.errors.length > 0) {\n        return result;\n      }\n\n    }\n\n\n\n    if (settings.ast || settings.desc) {\n      const outputFilePath = getOutputFilePath(outputDir, 'ast');\n      outputFiles['ast'] = outputFilePath;\n\n\n      const allAst = addSourceLocation(JSONbigAlways.parse(readFileSync(outputFilePath, 'utf8')), srcDir, sourceFileName);\n\n      const sourceUri = path2uri(sourcePath);\n      result.file = sourceUri;\n      result.ast = allAst[sourceUri];\n      delete allAst[sourceUri];\n      result.dependencyAsts = allAst;\n      result.alias = getAliasDeclaration(result.ast, allAst);\n\n      const staticConstInt = getStaticConstIntDeclaration(result.ast, allAst);\n      const { contract: name, abi } = getABIDeclaration(result.ast, result.alias, staticConstInt);\n\n      result.abi = abi;\n      result.contract = name;\n      result.structs = getStructDeclaration(result.ast, allAst);\n\n    }\n\n    let asmObj = null;\n\n    if (settings.asm || settings.desc) {\n      const outputFilePath = getOutputFilePath(outputDir, 'asm');\n      outputFiles['asm'] = outputFilePath;\n\n      asmObj = JSON.parse(readFileSync(outputFilePath, 'utf8'));\n      const sources = asmObj.sources;\n      result.asm = asmObj.output.map(item => {\n\n        if (!settings.debug) {\n          return {\n            opcode: item.opcode\n          };\n        }\n\n        const match = SOURCE_REG.exec(item.src);\n\n        if (match && match.groups) {\n          const fileIndex = parseInt(match.groups.fileIndex);\n\n          let debugTag: DebugModeTag | undefined;\n\n          const tagStr = match.groups.tagStr;\n          if (/\\w+\\.\\w+:0/.test(tagStr)) {\n            debugTag = DebugModeTag.FuncStart;\n          }\n          if (/\\w+\\.\\w+:1/.test(tagStr)) {\n            debugTag = DebugModeTag.FuncEnd;\n          }\n          if (/loop:0/.test(tagStr)) {\n            debugTag = DebugModeTag.LoopStart;\n          }\n\n          const pos: Pos | undefined = sources[fileIndex] ? {\n            file: sources[fileIndex] ? getFullFilePath(sources[fileIndex], srcDir, sourceFileName) : undefined,\n            line: sources[fileIndex] ? parseInt(match.groups.line) : undefined,\n            endLine: sources[fileIndex] ? parseInt(match.groups.endLine) : undefined,\n            column: sources[fileIndex] ? parseInt(match.groups.col) : undefined,\n            endColumn: sources[fileIndex] ? parseInt(match.groups.endCol) : undefined,\n          } : undefined;\n\n          return {\n            opcode: item.opcode,\n            stack: item.stack,\n            pos: pos,\n            debugTag\n          };\n        }\n        throw new Error('Compile Failed: Asm output parsing Error!');\n      });\n\n\n      if (settings.debug) {\n        result.autoTypedVars = asmObj.autoTypedVars.map(item => {\n          const match = SOURCE_REG.exec(item.src);\n          if (match && match.groups) {\n            const fileIndex = parseInt(match.groups.fileIndex);\n\n            const pos: Pos | undefined = sources[fileIndex] ? {\n              file: sources[fileIndex] ? getFullFilePath(sources[fileIndex], srcDir, sourceFileName) : undefined,\n              line: sources[fileIndex] ? parseInt(match.groups.line) : undefined,\n              endLine: sources[fileIndex] ? parseInt(match.groups.endLine) : undefined,\n              column: sources[fileIndex] ? parseInt(match.groups.col) : undefined,\n              endColumn: sources[fileIndex] ? parseInt(match.groups.endCol) : undefined,\n            } : undefined;\n            return {\n              name: item.name,\n              type: item.type,\n              pos: pos\n            };\n          }\n        });\n      }\n    }\n\n    if (settings.desc) {\n      settings.outputToFiles = true;\n      const outputFilePath = getOutputFilePath(outputDir, 'desc');\n      outputFiles['desc'] = outputFilePath;\n      const description: ContractDescription = {\n        version: CURRENT_CONTRACT_DESCRIPTION_VERSION,\n        compilerVersion: compilerVersion(settings.cmdPrefix ? settings.cmdPrefix : getDefaultScryptc()),\n        contract: result.contract,\n        md5: md5(sourceContent),\n        structs: result.structs || [],\n        alias: result.alias || [],\n        abi: result.abi || [],\n        buildType: settings.buildType || BuildType.Debug,\n        file: '',\n        asm: result.asm.map(item => item['opcode'].trim()).join(' '),\n        sources: [],\n        sourceMap: []\n      };\n\n      if (settings.debug && asmObj) {\n        Object.assign(description, {\n          file: result.file,\n          sources: asmObj.sources.map(source => getFullFilePath(source, srcDir, sourceFileName)),\n          sourceMap: asmObj.output.map(item => item.src),\n        });\n      }\n      writeFileSync(outputFilePath, JSON.stringify(description, null, 4));\n\n      result.compilerVersion = description.compilerVersion;\n      result.md5 = description.md5;\n    }\n\n    return result;\n  } finally {\n    if (settings.outputToFiles) {\n      Object.keys(outputFiles).forEach(outputType => {\n        const file = outputFiles[outputType];\n        if (existsSync(file)) {\n          if (settings[outputType]) {\n            // rename all output files\n            renameSync(file, file.replace('stdin', basename(sourcePath, '.scrypt')));\n          } else {\n            unlinkSync(file);\n          }\n        }\n      });\n    } else {\n      // cleanup all output files\n      Object.values<string>(outputFiles).forEach(file => {\n        if (existsSync(file)) {\n          unlinkSync(file);\n        }\n      });\n    }\n    // console.log('compile time spent: ', Date.now() - st)\n  }\n}\n\nexport function compilerVersion(cwd?: string): string {\n  const text = execSync(`${cwd} version`).toString();\n  return /Version:\\s*([^\\s]+)\\s*/.exec(text)[1];\n}\n\nfunction addSourceLocation(astRoot, basePath: string, curFileName: string) {\n  for (const fileName in astRoot) {\n    if (fileName === 'std') {\n      astRoot['std'] = _addSourceLocationProperty(astRoot['std'], 'std');\n    } else {\n      const realFileName = fileName === 'stdin' ? curFileName : fileName;\n      const uri = path2uri(join(basePath, realFileName));\n      astRoot[uri] = _addSourceLocationProperty(astRoot[fileName], uri);\n      delete astRoot[fileName];\n    }\n  }\n  return astRoot;\n}\n\nfunction _addSourceLocationProperty(astObj, uri: string | null) {\n\n  if (!(typeof astObj === 'object')) { return astObj; }\n  for (const field in astObj) {\n    const value = astObj[field];\n    if (field === 'src') {\n      const matches = /:(\\d+):(\\d+):(\\d+):(\\d+)/.exec(value);\n      if (!matches) {\n        astObj.loc = null;\n      } else {\n        astObj.loc = {\n          source: uri,\n          start: { line: parseInt(matches[1]), column: parseInt(matches[2]) },\n          end: { line: parseInt(matches[3]), column: parseInt(matches[4]) }\n        };\n      }\n      delete astObj['src'];\n    } else if (typeof value === 'object') {\n      _addSourceLocationProperty(value, uri);\n    }\n  }\n\n  return astObj;\n}\n\nfunction getOutputFilePath(baseDir: string, target: 'ast' | 'asm' | 'desc'): string {\n  return join(baseDir, `stdin_${target}.json`);\n}\n\nfunction getFullFilePath(relativePath: string, baseDir: string, curFileName: string): string {\n  if (relativePath.endsWith('stdin')) {\n    return join(baseDir, curFileName); // replace 'stdin' with real current compiling file name.\n  }\n\n  if (relativePath === 'std') {\n    return 'std'; // \n  }\n\n  return join(baseDir, relativePath);\n}\n\nfunction getConstructorDeclaration(mainContract): ABIEntity {\n  // explict constructor\n  if (mainContract['constructor']) {\n    return {\n      type: ABIEntityType.CONSTRUCTOR,\n      params: mainContract['constructor']['params'].map(p => { return { name: p['name'], type: p['type'] }; }),\n    };\n  } else {\n    // implicit constructor\n    if (mainContract['properties']) {\n      return {\n        type: ABIEntityType.CONSTRUCTOR,\n        params: mainContract['properties'].map(p => { return { name: p['name'].replace('this.', ''), type: p['type'] }; }),\n      };\n    }\n  }\n}\n\nfunction getPublicFunctionDeclaration(mainContract): ABIEntity[] {\n  let pubIndex = 0;\n  const interfaces: ABIEntity[] =\n    mainContract['functions']\n      .filter(f => f['visibility'] === 'Public')\n      .map(f => {\n        const entity: ABIEntity = {\n          type: ABIEntityType.FUNCTION,\n          name: f['name'],\n          index: f['nodeType'] === 'Constructor' ? undefined : pubIndex++,\n          params: f['params'].map(p => { return { name: p['name'], type: p['type'] }; }),\n        };\n        return entity;\n      });\n  return interfaces;\n}\n\n\n\nexport function getABIDeclaration(astRoot, alias: AliasEntity[], staticConstInt: Record<string, number>): ABI {\n  const mainContract = astRoot['contracts'][astRoot['contracts'].length - 1];\n  if (!mainContract) {\n    return {\n      contract: '',\n      abi: []\n    };\n  }\n\n  const interfaces: ABIEntity[] = getPublicFunctionDeclaration(mainContract);\n  const constructorABI = getConstructorDeclaration(mainContract);\n\n  interfaces.push(constructorABI);\n\n  interfaces.forEach(abi => {\n    abi.params = abi.params.map(param => {\n      return Object.assign(param, {\n        type: resolveAbiParamType(mainContract['name'], param.type, alias, staticConstInt)\n      });\n    });\n  });\n\n  return {\n    contract: mainContract['name'],\n    abi: interfaces\n  };\n}\n\n\nfunction resolveAbiParamType(contract: string, type: string, alias: AliasEntity[], staticConstInt: Record<string, number>): string {\n  const resolvedConstIntType = resolveArrayTypeWithConstInt(contract, type, staticConstInt);\n  const resolvedAliasType = resolveType(alias, resolvedConstIntType);\n\n  if (isStructType(resolvedAliasType)) {\n    return getStructNameByType(resolvedAliasType);\n  } else if (isArrayType(resolvedAliasType)) {\n    const [elemTypeName, arraySizes] = arrayTypeAndSize(resolvedAliasType);\n    const elemType = isStructType(elemTypeName) ? getStructNameByType(elemTypeName) : elemTypeName;\n    return toLiteralArrayType(elemType, arraySizes);\n  }\n\n  return resolvedAliasType;\n}\n\nexport function resolveArrayTypeWithConstInt(contract: string, type: string, staticConstInt: Record<string, number>): string {\n\n  if (isArrayType(type)) {\n    const [elemTypeName, arraySizes] = arrayTypeAndSizeStr(type);\n\n    const sizes = arraySizes.map(size => {\n      if (/^(\\d)+$/.test(size)) {\n        return parseInt(size);\n      } else {\n        if (size.indexOf('.') > 0) {\n          return staticConstInt[size];\n        } else {\n          return staticConstInt[`${contract}.${size}`];\n        }\n      }\n    });\n\n    return toLiteralArrayType(elemTypeName, sizes);\n  }\n  return type;\n}\n\n\nexport function getStructDeclaration(astRoot, dependencyAsts): Array<StructEntity> {\n\n\n  const allAst = [astRoot];\n\n  Object.keys(dependencyAsts).forEach(key => {\n    allAst.push(dependencyAsts[key]);\n  });\n\n  return allAst.map(ast => {\n    return oc(ast).structs([]).map(s => ({\n      name: s['name'],\n      params: s['fields'].map(p => { return { name: p['name'], type: p['type'] }; }),\n    }));\n  }).flat(1);\n}\n\n\nexport function getAliasDeclaration(astRoot, dependencyAsts): Array<AliasEntity> {\n\n  const allAst = [astRoot];\n\n  Object.keys(dependencyAsts).forEach(key => {\n    allAst.push(dependencyAsts[key]);\n  });\n\n  return allAst.map(ast => {\n    return oc(ast).alias([]).map(s => ({\n      name: s['alias'],\n      type: s['type'],\n    }));\n  }).flat(1);\n}\n\nexport function getStaticConstIntDeclaration(astRoot, dependencyAsts): Record<string, number> {\n\n  const allAst = [astRoot];\n  Object.keys(dependencyAsts).forEach(key => {\n    allAst.push(dependencyAsts[key]);\n  });\n\n  return allAst.map((ast, index) => {\n    return oc(ast).contracts([]).map(contract => {\n      return oc(contract).statics([]).filter(s => (\n        s.const === true && s.expr.nodeType === 'IntLiteral'\n      )).map(s => {\n\n        return {\n          name: `${contract.name}.${s.name}`,\n          value: s.expr.value\n        };\n      });\n    });\n  }).flat(Infinity).reduce((acc, item) => (acc[item.name] = item.value, acc), {} as Record<string, number>);\n}\n\n\nexport function getPlatformScryptc(): string {\n  switch (os.platform()) {\n  case 'win32':\n    return 'compiler/scryptc/win32/scryptc.exe';\n  case 'linux':\n    return 'compiler/scryptc/linux/scryptc';\n  case 'darwin':\n    return 'compiler/scryptc/mac/scryptc';\n  default:\n    throw `sCrypt doesn't support ${os.platform()}`;\n  }\n}\n\nfunction vscodeExtensionPath(): string {\n  const homedir = os.homedir();\n  const extensionPath = join(homedir, '.vscode/extensions');\n  if (!existsSync(extensionPath)) {\n    throw 'No Visual Studio Code extensions found. Please ensure Visual Studio Code is installed.';\n  }\n  return extensionPath;\n}\n\nfunction findVscodeScrypt(extensionPath: string): string {\n  const sCryptPrefix = 'bsv-scrypt.scrypt-';\n  let versions = readdirSync(extensionPath).reduce((filtered, item) => {\n    if (item.indexOf(sCryptPrefix) > -1) {\n      const version = item.substring(sCryptPrefix.length);\n      if (compareVersions.validate(version)) {\n        filtered.push(version);\n      }\n    }\n    return filtered;\n  }, []);\n\n  // compareVersions is ascending, so reverse.\n  versions = versions.sort(compareVersions).reverse();\n  return sCryptPrefix + versions[0];\n}\n\nexport function getDefaultScryptc(): string {\n\n\n  const extensionPath = vscodeExtensionPath();\n\n  const sCrypt = findVscodeScrypt(extensionPath);\n  if (!sCrypt) {\n    throw `No sCrypt extension found. Please install it at extension marketplace:\n\t\thttps://marketplace.visualstudio.com/items?itemName=bsv-scrypt.sCrypt`;\n  }\n\n  const scryptc = join(extensionPath, sCrypt, getPlatformScryptc());\n\n  if (!existsSync(scryptc)) {\n    throw 'No sCrypt compiler found. Please update your sCrypt extension to the latest version';\n  }\n\n  return scryptc;\n}\n\n\n\nexport function desc2CompileResult(description: ContractDescription): CompileResult {\n  const sources = description.sources;\n  const asm = description.asm.split(' ');\n  const errorMessage = 'Contract description version deprecated,  Please update your sCrypt extension to the latest version and recompile';\n  if (description.version === undefined) {\n    throw new Error(errorMessage);\n  }\n\n  if (description.version < CURRENT_CONTRACT_DESCRIPTION_VERSION) {\n    console.warn(errorMessage);\n  }\n\n  const result: CompileResult = {\n    compilerVersion: description.compilerVersion,\n    contract: description.contract,\n    md5: description.md5,\n    abi: description.abi,\n    structs: description.structs,\n    alias: description.alias,\n    file: description.file,\n    buildType: description.buildType || BuildType.Debug,\n    errors: [],\n    warnings: [],\n    asm: asm.map((opcode, index) => {\n      const item = description.sourceMap && description.sourceMap[index];\n      if (item) {\n        const match = SOURCE_REG.exec(item);\n        if (match && match.groups) {\n          const fileIndex = parseInt(match.groups.fileIndex);\n\n          const pos: Pos | undefined = sources[fileIndex] ? {\n            file: sources[fileIndex],\n            line: sources[fileIndex] ? parseInt(match.groups.line) : undefined,\n            endLine: sources[fileIndex] ? parseInt(match.groups.endLine) : undefined,\n            column: sources[fileIndex] ? parseInt(match.groups.col) : undefined,\n            endColumn: sources[fileIndex] ? parseInt(match.groups.endCol) : undefined,\n          } : undefined;\n\n          return {\n            pos: pos,\n            opcode: opcode,\n            stack: []\n          };\n        }\n      }\n\n      return {\n        opcode: opcode,\n        stack: []\n      };\n    })\n  };\n  return result;\n}\n\nfunction getErrorsAndWarnings(output: string, srcDir: string, sourceFileName: string): CompileResult {\n  const warnings: Warning[] = [...output.matchAll(WARNING_REG)].map(match => {\n    const filePath = oc(match.groups).filePath('');\n    let message = oc(match.groups).message('');\n\n    message = message.replace(/Variable `(?<varName>\\w+)` shadows existing binding at (?<fileIndex>[^\\s]+):(?<line>\\d+):(?<column>\\d+):(?<line1>\\d+):(?<column1>\\d+)/,\n      'Variable `$1` shadows existing binding at $3:$4:$5:$6');\n    return {\n      type: CompileErrorType.Warning,\n      filePath: getFullFilePath(filePath, srcDir, sourceFileName),\n      position: [{\n        line: parseInt(oc(match.groups).line('-1')),\n        column: parseInt(oc(match.groups).column('-1')),\n      }, {\n        line: parseInt(oc(match.groups).line1('-1')),\n        column: parseInt(oc(match.groups).column1('-1')),\n      }],\n      message: message\n    };\n  });\n\n\n  if (output.match(INTERNAL_ERR_REG)) {\n    return {\n      warnings: warnings,\n      errors: [{\n        type: CompileErrorType.InternalError,\n        filePath: getFullFilePath('stdin', srcDir, sourceFileName),\n        message: `Compiler internal error: ${oc(output.match(INTERNAL_ERR_REG).groups).message('')}`,\n        position: [{\n          line: 1,\n          column: 1\n        }, {\n          line: 1,\n          column: 1\n        }]\n      }]\n    };\n  } else if (output.includes('Syntax error:')) {\n    const syntaxErrors: CompileError[] = [...output.matchAll(SYNTAX_ERR_REG)].map(match => {\n      const filePath = oc(match.groups).filePath('');\n      const unexpected = oc(match.groups).unexpected('');\n      const expecting = oc(match.groups).expecting('');\n      return {\n        type: CompileErrorType.SyntaxError,\n        filePath: getFullFilePath(filePath, srcDir, sourceFileName),\n        position: [{\n          line: parseInt(oc(match.groups).line('-1')),\n          column: parseInt(oc(match.groups).column('-1')),\n        }],\n        message: oc(match.groups).message(`unexpected ${unexpected}\\nexpecting ${expecting}`),\n        unexpected,\n        expecting,\n      };\n    });\n    return {\n      warnings: warnings,\n      errors: syntaxErrors\n    };\n  }\n  else {\n\n    const semanticErrors: CompileError[] = [...output.matchAll(SEMANTIC_ERR_REG)].map(match => {\n      let message = oc(match.groups).message('');\n      const filePath = oc(match.groups).filePath('');\n\n      message = message.replace(/Symbol `(?<varName>\\w+)` already defined at (?<fileIndex>[^\\s]+):(?<line>\\d+):(?<column>\\d+):(?<line1>\\d+):(?<column1>\\d+)/,\n        'Symbol `$1` already defined at $3:$4:$5:$6');\n\n      return {\n        type: CompileErrorType.SemanticError,\n        filePath: getFullFilePath(filePath, srcDir, sourceFileName),\n        position: [{\n          line: parseInt(oc(match.groups).line('-1')),\n          column: parseInt(oc(match.groups).column('-1')),\n        }, {\n          line: parseInt(oc(match.groups).line1('-1')),\n          column: parseInt(oc(match.groups).column1('-1')),\n        }],\n        message: message\n      };\n    });\n    return {\n      warnings: warnings,\n      errors: semanticErrors\n    };\n  }\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"535651be6aa2642ffb1af939f2d53a79b60383ec"},"C:\\Users\\myland\\code\\scryptlib\\src\\abi.ts":{"path":"C:\\Users\\myland\\code\\scryptlib\\src\\abi.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":49}},"2":{"start":{"line":4,"column":22},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":16},"end":{"line":5,"column":34}},"4":{"start":{"line":6,"column":19},"end":{"line":6,"column":40}},"5":{"start":{"line":7,"column":22},"end":{"line":7,"column":46}},"6":{"start":{"line":8,"column":26},"end":{"line":8,"column":54}},"7":{"start":{"line":9,"column":11},"end":{"line":9,"column":32}},"8":{"start":{"line":11,"column":4},"end":{"line":11,"column":75}},"9":{"start":{"line":15,"column":8},"end":{"line":15,"column":37}},"10":{"start":{"line":16,"column":8},"end":{"line":16,"column":29}},"11":{"start":{"line":17,"column":8},"end":{"line":17,"column":23}},"12":{"start":{"line":18,"column":8},"end":{"line":20,"column":9}},"13":{"start":{"line":19,"column":12},"end":{"line":19,"column":112}},"14":{"start":{"line":21,"column":8},"end":{"line":21,"column":41}},"15":{"start":{"line":22,"column":8},"end":{"line":35,"column":19}},"16":{"start":{"line":23,"column":12},"end":{"line":25,"column":13}},"17":{"start":{"line":24,"column":16},"end":{"line":24,"column":53}},"18":{"start":{"line":26,"column":12},"end":{"line":26,"column":46}},"19":{"start":{"line":28,"column":12},"end":{"line":34,"column":15}},"20":{"start":{"line":29,"column":16},"end":{"line":33,"column":18}},"21":{"start":{"line":36,"column":8},"end":{"line":38,"column":9}},"22":{"start":{"line":37,"column":12},"end":{"line":37,"column":62}},"23":{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},"24":{"start":{"line":40,"column":12},"end":{"line":40,"column":66}},"25":{"start":{"line":44,"column":8},"end":{"line":44,"column":121}},"26":{"start":{"line":47,"column":8},"end":{"line":47,"column":117}},"27":{"start":{"line":50,"column":8},"end":{"line":54,"column":9}},"28":{"start":{"line":51,"column":24},"end":{"line":51,"column":41}},"29":{"start":{"line":52,"column":23},"end":{"line":52,"column":51}},"30":{"start":{"line":53,"column":12},"end":{"line":53,"column":77}},"31":{"start":{"line":57,"column":8},"end":{"line":62,"column":9}},"32":{"start":{"line":58,"column":12},"end":{"line":58,"column":46}},"33":{"start":{"line":61,"column":12},"end":{"line":61,"column":48}},"34":{"start":{"line":65,"column":8},"end":{"line":65,"column":28}},"35":{"start":{"line":68,"column":8},"end":{"line":68,"column":56}},"36":{"start":{"line":71,"column":8},"end":{"line":71,"column":39}},"37":{"start":{"line":74,"column":32},"end":{"line":74,"column":72}},"38":{"start":{"line":75,"column":28},"end":{"line":75,"column":39}},"39":{"start":{"line":76,"column":24},"end":{"line":76,"column":39}},"40":{"start":{"line":77,"column":21},"end":{"line":77,"column":93}},"41":{"start":{"line":78,"column":24},"end":{"line":78,"column":82}},"42":{"start":{"line":79,"column":24},"end":{"line":79,"column":51}},"43":{"start":{"line":80,"column":25},"end":{"line":80,"column":92}},"44":{"start":{"line":81,"column":22},"end":{"line":81,"column":111}},"45":{"start":{"line":82,"column":8},"end":{"line":82,"column":113}},"46":{"start":{"line":85,"column":8},"end":{"line":94,"column":9}},"47":{"start":{"line":86,"column":27},"end":{"line":86,"column":103}},"48":{"start":{"line":87,"column":12},"end":{"line":92,"column":13}},"49":{"start":{"line":88,"column":33},"end":{"line":88,"column":68}},"50":{"start":{"line":89,"column":16},"end":{"line":91,"column":17}},"51":{"start":{"line":90,"column":20},"end":{"line":90,"column":122}},"52":{"start":{"line":93,"column":12},"end":{"line":93,"column":26}},"53":{"start":{"line":95,"column":8},"end":{"line":98,"column":10}},"54":{"start":{"line":101,"column":0},"end":{"line":101,"column":36}},"55":{"start":{"line":104,"column":8},"end":{"line":104,"column":23}},"56":{"start":{"line":105,"column":8},"end":{"line":105,"column":27}},"57":{"start":{"line":108,"column":31},"end":{"line":108,"column":120}},"58":{"start":{"line":108,"column":57},"end":{"line":108,"column":116}},"59":{"start":{"line":109,"column":24},"end":{"line":109,"column":67}},"60":{"start":{"line":110,"column":8},"end":{"line":112,"column":9}},"61":{"start":{"line":111,"column":12},"end":{"line":111,"column":125}},"62":{"start":{"line":114,"column":25},"end":{"line":114,"column":27}},"63":{"start":{"line":115,"column":22},"end":{"line":115,"column":24}},"64":{"start":{"line":116,"column":8},"end":{"line":151,"column":11}},"65":{"start":{"line":117,"column":24},"end":{"line":117,"column":35}},"66":{"start":{"line":118,"column":30},"end":{"line":118,"column":73}},"67":{"start":{"line":119,"column":12},"end":{"line":150,"column":13}},"68":{"start":{"line":120,"column":51},"end":{"line":120,"column":86}},"69":{"start":{"line":121,"column":16},"end":{"line":135,"column":17}},"70":{"start":{"line":122,"column":20},"end":{"line":131,"column":21}},"71":{"start":{"line":124,"column":24},"end":{"line":127,"column":27}},"72":{"start":{"line":125,"column":28},"end":{"line":125,"column":74}},"73":{"start":{"line":126,"column":28},"end":{"line":126,"column":48}},"74":{"start":{"line":130,"column":24},"end":{"line":130,"column":100}},"75":{"start":{"line":134,"column":20},"end":{"line":134,"column":96}},"76":{"start":{"line":137,"column":17},"end":{"line":150,"column":13}},"77":{"start":{"line":138,"column":29},"end":{"line":138,"column":32}},"78":{"start":{"line":139,"column":16},"end":{"line":141,"column":17}},"79":{"start":{"line":140,"column":20},"end":{"line":140,"column":95}},"80":{"start":{"line":142,"column":16},"end":{"line":145,"column":19}},"81":{"start":{"line":143,"column":20},"end":{"line":143,"column":71}},"82":{"start":{"line":144,"column":20},"end":{"line":144,"column":40}},"83":{"start":{"line":148,"column":16},"end":{"line":148,"column":37}},"84":{"start":{"line":149,"column":16},"end":{"line":149,"column":32}},"85":{"start":{"line":152,"column":20},"end":{"line":152,"column":31}},"86":{"start":{"line":153,"column":8},"end":{"line":159,"column":11}},"87":{"start":{"line":154,"column":12},"end":{"line":156,"column":13}},"88":{"start":{"line":155,"column":16},"end":{"line":155,"column":125}},"89":{"start":{"line":157,"column":23},"end":{"line":157,"column":169}},"90":{"start":{"line":158,"column":12},"end":{"line":158,"column":77}},"91":{"start":{"line":160,"column":8},"end":{"line":160,"column":92}},"92":{"start":{"line":163,"column":31},"end":{"line":163,"column":120}},"93":{"start":{"line":163,"column":57},"end":{"line":163,"column":116}},"94":{"start":{"line":164,"column":24},"end":{"line":164,"column":67}},"95":{"start":{"line":165,"column":27},"end":{"line":165,"column":36}},"96":{"start":{"line":166,"column":35},"end":{"line":166,"column":57}},"97":{"start":{"line":167,"column":27},"end":{"line":167,"column":43}},"98":{"start":{"line":168,"column":8},"end":{"line":170,"column":9}},"99":{"start":{"line":169,"column":12},"end":{"line":169,"column":116}},"100":{"start":{"line":171,"column":8},"end":{"line":175,"column":11}},"101":{"start":{"line":172,"column":12},"end":{"line":174,"column":13}},"102":{"start":{"line":173,"column":16},"end":{"line":173,"column":58}},"103":{"start":{"line":176,"column":34},"end":{"line":176,"column":74}},"104":{"start":{"line":177,"column":21},"end":{"line":177,"column":23}},"105":{"start":{"line":178,"column":8},"end":{"line":190,"column":11}},"106":{"start":{"line":179,"column":30},"end":{"line":179,"column":59}},"107":{"start":{"line":180,"column":12},"end":{"line":189,"column":13}},"108":{"start":{"line":181,"column":32},"end":{"line":181,"column":71}},"109":{"start":{"line":182,"column":16},"end":{"line":182,"column":110}},"110":{"start":{"line":184,"column":17},"end":{"line":189,"column":13}},"111":{"start":{"line":185,"column":16},"end":{"line":185,"column":111}},"112":{"start":{"line":188,"column":16},"end":{"line":188,"column":95}},"113":{"start":{"line":191,"column":8},"end":{"line":191,"column":92}},"114":{"start":{"line":194,"column":8},"end":{"line":207,"column":9}},"115":{"start":{"line":195,"column":12},"end":{"line":206,"column":13}},"116":{"start":{"line":196,"column":16},"end":{"line":198,"column":17}},"117":{"start":{"line":197,"column":20},"end":{"line":197,"column":135}},"118":{"start":{"line":199,"column":26},"end":{"line":199,"column":64}},"119":{"start":{"line":200,"column":16},"end":{"line":204,"column":17}},"120":{"start":{"line":202,"column":41},"end":{"line":202,"column":53}},"121":{"start":{"line":203,"column":20},"end":{"line":203,"column":74}},"122":{"start":{"line":205,"column":16},"end":{"line":205,"column":91}},"123":{"start":{"line":208,"column":8},"end":{"line":208,"column":68}},"124":{"start":{"line":211,"column":8},"end":{"line":211,"column":87}},"125":{"start":{"line":211,"column":36},"end":{"line":211,"column":75}},"126":{"start":{"line":214,"column":8},"end":{"line":216,"column":9}},"127":{"start":{"line":215,"column":12},"end":{"line":215,"column":55}},"128":{"start":{"line":217,"column":18},"end":{"line":217,"column":32}},"129":{"start":{"line":218,"column":8},"end":{"line":220,"column":9}},"130":{"start":{"line":218,"column":31},"end":{"line":218,"column":47}},"131":{"start":{"line":219,"column":12},"end":{"line":219,"column":72}},"132":{"start":{"line":221,"column":26},"end":{"line":221,"column":73}},"133":{"start":{"line":222,"column":43},"end":{"line":222,"column":78}},"134":{"start":{"line":223,"column":8},"end":{"line":230,"column":9}},"135":{"start":{"line":224,"column":12},"end":{"line":226,"column":25}},"136":{"start":{"line":225,"column":16},"end":{"line":225,"column":87}},"137":{"start":{"line":229,"column":12},"end":{"line":229,"column":65}},"138":{"start":{"line":233,"column":26},"end":{"line":233,"column":75}},"139":{"start":{"line":234,"column":8},"end":{"line":242,"column":9}},"140":{"start":{"line":235,"column":12},"end":{"line":241,"column":13}},"141":{"start":{"line":236,"column":16},"end":{"line":236,"column":63}},"142":{"start":{"line":239,"column":35},"end":{"line":239,"column":57}},"143":{"start":{"line":240,"column":16},"end":{"line":240,"column":106}},"144":{"start":{"line":243,"column":8},"end":{"line":254,"column":9}},"145":{"start":{"line":244,"column":12},"end":{"line":253,"column":13}},"146":{"start":{"line":245,"column":29},"end":{"line":245,"column":32}},"147":{"start":{"line":246,"column":16},"end":{"line":248,"column":17}},"148":{"start":{"line":247,"column":20},"end":{"line":247,"column":101}},"149":{"start":{"line":251,"column":35},"end":{"line":251,"column":43}},"150":{"start":{"line":252,"column":16},"end":{"line":252,"column":149}},"151":{"start":{"line":255,"column":27},"end":{"line":255,"column":49}},"152":{"start":{"line":256,"column":8},"end":{"line":258,"column":9}},"153":{"start":{"line":257,"column":12},"end":{"line":257,"column":119}},"154":{"start":{"line":259,"column":26},"end":{"line":259,"column":36}},"155":{"start":{"line":260,"column":8},"end":{"line":262,"column":9}},"156":{"start":{"line":261,"column":12},"end":{"line":261,"column":46}},"157":{"start":{"line":263,"column":8},"end":{"line":265,"column":9}},"158":{"start":{"line":264,"column":12},"end":{"line":264,"column":45}},"159":{"start":{"line":266,"column":8},"end":{"line":268,"column":9}},"160":{"start":{"line":267,"column":12},"end":{"line":267,"column":45}},"161":{"start":{"line":269,"column":8},"end":{"line":271,"column":9}},"162":{"start":{"line":270,"column":12},"end":{"line":270,"column":45}},"163":{"start":{"line":272,"column":8},"end":{"line":272,"column":27}},"164":{"start":{"line":275,"column":0},"end":{"line":275,"column":28}}},"fnMap":{"0":{"name":"escapeRegExp","decl":{"start":{"line":10,"column":9},"end":{"line":10,"column":21}},"loc":{"start":{"line":10,"column":46},"end":{"line":12,"column":1}},"line":10},"1":{"name":"(anonymous_1)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":45},"end":{"line":42,"column":5}},"line":14},"2":{"name":"(anonymous_2)","decl":{"start":{"line":22,"column":80},"end":{"line":22,"column":81}},"loc":{"start":{"line":22,"column":92},"end":{"line":27,"column":9}},"line":22},"3":{"name":"(anonymous_3)","decl":{"start":{"line":27,"column":15},"end":{"line":27,"column":16}},"loc":{"start":{"line":27,"column":27},"end":{"line":35,"column":9}},"line":27},"4":{"name":"(anonymous_4)","decl":{"start":{"line":28,"column":37},"end":{"line":28,"column":38}},"loc":{"start":{"line":28,"column":55},"end":{"line":34,"column":13}},"line":28},"5":{"name":"(anonymous_5)","decl":{"start":{"line":43,"column":4},"end":{"line":43,"column":5}},"loc":{"start":{"line":43,"column":26},"end":{"line":45,"column":5}},"line":43},"6":{"name":"(anonymous_6)","decl":{"start":{"line":46,"column":4},"end":{"line":46,"column":5}},"loc":{"start":{"line":46,"column":24},"end":{"line":48,"column":5}},"line":46},"7":{"name":"(anonymous_7)","decl":{"start":{"line":49,"column":4},"end":{"line":49,"column":5}},"loc":{"start":{"line":49,"column":23},"end":{"line":55,"column":5}},"line":49},"8":{"name":"(anonymous_8)","decl":{"start":{"line":56,"column":4},"end":{"line":56,"column":5}},"loc":{"start":{"line":56,"column":12},"end":{"line":63,"column":5}},"line":56},"9":{"name":"(anonymous_9)","decl":{"start":{"line":64,"column":4},"end":{"line":64,"column":5}},"loc":{"start":{"line":64,"column":15},"end":{"line":66,"column":5}},"line":64},"10":{"name":"(anonymous_10)","decl":{"start":{"line":67,"column":4},"end":{"line":67,"column":5}},"loc":{"start":{"line":67,"column":15},"end":{"line":69,"column":5}},"line":67},"11":{"name":"(anonymous_11)","decl":{"start":{"line":70,"column":4},"end":{"line":70,"column":5}},"loc":{"start":{"line":70,"column":12},"end":{"line":72,"column":5}},"line":70},"12":{"name":"(anonymous_12)","decl":{"start":{"line":73,"column":4},"end":{"line":73,"column":5}},"loc":{"start":{"line":73,"column":35},"end":{"line":83,"column":5}},"line":73},"13":{"name":"(anonymous_13)","decl":{"start":{"line":84,"column":4},"end":{"line":84,"column":5}},"loc":{"start":{"line":84,"column":22},"end":{"line":99,"column":5}},"line":84},"14":{"name":"(anonymous_14)","decl":{"start":{"line":103,"column":4},"end":{"line":103,"column":5}},"loc":{"start":{"line":103,"column":28},"end":{"line":106,"column":5}},"line":103},"15":{"name":"(anonymous_15)","decl":{"start":{"line":107,"column":4},"end":{"line":107,"column":5}},"loc":{"start":{"line":107,"column":58},"end":{"line":161,"column":5}},"line":107},"16":{"name":"(anonymous_16)","decl":{"start":{"line":108,"column":47},"end":{"line":108,"column":48}},"loc":{"start":{"line":108,"column":57},"end":{"line":108,"column":116}},"line":108},"17":{"name":"(anonymous_17)","decl":{"start":{"line":116,"column":24},"end":{"line":116,"column":25}},"loc":{"start":{"line":116,"column":42},"end":{"line":151,"column":9}},"line":116},"18":{"name":"(anonymous_18)","decl":{"start":{"line":124,"column":82},"end":{"line":124,"column":83}},"loc":{"start":{"line":124,"column":94},"end":{"line":127,"column":25}},"line":124},"19":{"name":"(anonymous_19)","decl":{"start":{"line":142,"column":65},"end":{"line":142,"column":66}},"loc":{"start":{"line":142,"column":70},"end":{"line":145,"column":17}},"line":142},"20":{"name":"(anonymous_20)","decl":{"start":{"line":153,"column":25},"end":{"line":153,"column":26}},"loc":{"start":{"line":153,"column":43},"end":{"line":159,"column":9}},"line":153},"21":{"name":"(anonymous_21)","decl":{"start":{"line":162,"column":4},"end":{"line":162,"column":5}},"loc":{"start":{"line":162,"column":63},"end":{"line":192,"column":5}},"line":162},"22":{"name":"(anonymous_22)","decl":{"start":{"line":163,"column":47},"end":{"line":163,"column":48}},"loc":{"start":{"line":163,"column":57},"end":{"line":163,"column":116}},"line":163},"23":{"name":"(anonymous_23)","decl":{"start":{"line":171,"column":35},"end":{"line":171,"column":36}},"loc":{"start":{"line":171,"column":54},"end":{"line":175,"column":9}},"line":171},"24":{"name":"(anonymous_24)","decl":{"start":{"line":178,"column":24},"end":{"line":178,"column":25}},"loc":{"start":{"line":178,"column":42},"end":{"line":190,"column":9}},"line":178},"25":{"name":"(anonymous_25)","decl":{"start":{"line":193,"column":4},"end":{"line":193,"column":5}},"loc":{"start":{"line":193,"column":48},"end":{"line":209,"column":5}},"line":193},"26":{"name":"(anonymous_26)","decl":{"start":{"line":210,"column":4},"end":{"line":210,"column":5}},"loc":{"start":{"line":210,"column":38},"end":{"line":212,"column":5}},"line":210},"27":{"name":"(anonymous_27)","decl":{"start":{"line":211,"column":24},"end":{"line":211,"column":25}},"loc":{"start":{"line":211,"column":36},"end":{"line":211,"column":75}},"line":211},"28":{"name":"(anonymous_28)","decl":{"start":{"line":213,"column":4},"end":{"line":213,"column":5}},"loc":{"start":{"line":213,"column":38},"end":{"line":231,"column":5}},"line":213},"29":{"name":"(anonymous_29)","decl":{"start":{"line":218,"column":24},"end":{"line":218,"column":25}},"loc":{"start":{"line":218,"column":31},"end":{"line":218,"column":47}},"line":218},"30":{"name":"(anonymous_30)","decl":{"start":{"line":224,"column":78},"end":{"line":224,"column":79}},"loc":{"start":{"line":224,"column":85},"end":{"line":226,"column":13}},"line":224},"31":{"name":"(anonymous_31)","decl":{"start":{"line":232,"column":4},"end":{"line":232,"column":5}},"loc":{"start":{"line":232,"column":34},"end":{"line":273,"column":5}},"line":232}},"branchMap":{"0":{"loc":{"start":{"line":18,"column":8},"end":{"line":20,"column":9}},"type":"if","locations":[{"start":{"line":18,"column":8},"end":{"line":20,"column":9}},{"start":{"line":18,"column":8},"end":{"line":20,"column":9}}],"line":18},"1":{"loc":{"start":{"line":18,"column":12},"end":{"line":18,"column":94}},"type":"binary-expr","locations":[{"start":{"line":18,"column":12},"end":{"line":18,"column":50}},{"start":{"line":18,"column":54},"end":{"line":18,"column":94}}],"line":18},"2":{"loc":{"start":{"line":23,"column":12},"end":{"line":25,"column":13}},"type":"if","locations":[{"start":{"line":23,"column":12},"end":{"line":25,"column":13}},{"start":{"line":23,"column":12},"end":{"line":25,"column":13}}],"line":23},"3":{"loc":{"start":{"line":36,"column":8},"end":{"line":38,"column":9}},"type":"if","locations":[{"start":{"line":36,"column":8},"end":{"line":38,"column":9}},{"start":{"line":36,"column":8},"end":{"line":38,"column":9}}],"line":36},"4":{"loc":{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},"type":"if","locations":[{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},{"start":{"line":39,"column":8},"end":{"line":41,"column":9}}],"line":39},"5":{"loc":{"start":{"line":44,"column":15},"end":{"line":44,"column":120}},"type":"cond-expr","locations":[{"start":{"line":44,"column":56},"end":{"line":44,"column":65}},{"start":{"line":44,"column":68},"end":{"line":44,"column":120}}],"line":44},"6":{"loc":{"start":{"line":47,"column":15},"end":{"line":47,"column":116}},"type":"cond-expr","locations":[{"start":{"line":47,"column":54},"end":{"line":47,"column":63}},{"start":{"line":47,"column":66},"end":{"line":47,"column":116}}],"line":47},"7":{"loc":{"start":{"line":57,"column":8},"end":{"line":62,"column":9}},"type":"if","locations":[{"start":{"line":57,"column":8},"end":{"line":62,"column":9}},{"start":{"line":57,"column":8},"end":{"line":62,"column":9}}],"line":57},"8":{"loc":{"start":{"line":79,"column":24},"end":{"line":79,"column":51}},"type":"binary-expr","locations":[{"start":{"line":79,"column":24},"end":{"line":79,"column":45}},{"start":{"line":79,"column":49},"end":{"line":79,"column":51}}],"line":79},"9":{"loc":{"start":{"line":80,"column":25},"end":{"line":80,"column":92}},"type":"cond-expr","locations":[{"start":{"line":80,"column":50},"end":{"line":80,"column":80}},{"start":{"line":80,"column":83},"end":{"line":80,"column":92}}],"line":80},"10":{"loc":{"start":{"line":81,"column":40},"end":{"line":81,"column":69}},"type":"binary-expr","locations":[{"start":{"line":81,"column":40},"end":{"line":81,"column":63}},{"start":{"line":81,"column":67},"end":{"line":81,"column":69}}],"line":81},"11":{"loc":{"start":{"line":81,"column":71},"end":{"line":81,"column":86}},"type":"binary-expr","locations":[{"start":{"line":81,"column":71},"end":{"line":81,"column":80}},{"start":{"line":81,"column":84},"end":{"line":81,"column":86}}],"line":81},"12":{"loc":{"start":{"line":85,"column":8},"end":{"line":94,"column":9}},"type":"if","locations":[{"start":{"line":85,"column":8},"end":{"line":94,"column":9}},{"start":{"line":85,"column":8},"end":{"line":94,"column":9}}],"line":85},"13":{"loc":{"start":{"line":87,"column":12},"end":{"line":92,"column":13}},"type":"if","locations":[{"start":{"line":87,"column":12},"end":{"line":92,"column":13}},{"start":{"line":87,"column":12},"end":{"line":92,"column":13}}],"line":87},"14":{"loc":{"start":{"line":89,"column":16},"end":{"line":91,"column":17}},"type":"if","locations":[{"start":{"line":89,"column":16},"end":{"line":91,"column":17}},{"start":{"line":89,"column":16},"end":{"line":91,"column":17}}],"line":89},"15":{"loc":{"start":{"line":110,"column":8},"end":{"line":112,"column":9}},"type":"if","locations":[{"start":{"line":110,"column":8},"end":{"line":112,"column":9}},{"start":{"line":110,"column":8},"end":{"line":112,"column":9}}],"line":110},"16":{"loc":{"start":{"line":119,"column":12},"end":{"line":150,"column":13}},"type":"if","locations":[{"start":{"line":119,"column":12},"end":{"line":150,"column":13}},{"start":{"line":119,"column":12},"end":{"line":150,"column":13}}],"line":119},"17":{"loc":{"start":{"line":121,"column":16},"end":{"line":135,"column":17}},"type":"if","locations":[{"start":{"line":121,"column":16},"end":{"line":135,"column":17}},{"start":{"line":121,"column":16},"end":{"line":135,"column":17}}],"line":121},"18":{"loc":{"start":{"line":122,"column":20},"end":{"line":131,"column":21}},"type":"if","locations":[{"start":{"line":122,"column":20},"end":{"line":131,"column":21}},{"start":{"line":122,"column":20},"end":{"line":131,"column":21}}],"line":122},"19":{"loc":{"start":{"line":137,"column":17},"end":{"line":150,"column":13}},"type":"if","locations":[{"start":{"line":137,"column":17},"end":{"line":150,"column":13}},{"start":{"line":137,"column":17},"end":{"line":150,"column":13}}],"line":137},"20":{"loc":{"start":{"line":139,"column":16},"end":{"line":141,"column":17}},"type":"if","locations":[{"start":{"line":139,"column":16},"end":{"line":141,"column":17}},{"start":{"line":139,"column":16},"end":{"line":141,"column":17}}],"line":139},"21":{"loc":{"start":{"line":154,"column":12},"end":{"line":156,"column":13}},"type":"if","locations":[{"start":{"line":154,"column":12},"end":{"line":156,"column":13}},{"start":{"line":154,"column":12},"end":{"line":156,"column":13}}],"line":154},"22":{"loc":{"start":{"line":157,"column":23},"end":{"line":157,"column":169}},"type":"cond-expr","locations":[{"start":{"line":157,"column":50},"end":{"line":157,"column":108}},{"start":{"line":157,"column":111},"end":{"line":157,"column":169}}],"line":157},"23":{"loc":{"start":{"line":168,"column":8},"end":{"line":170,"column":9}},"type":"if","locations":[{"start":{"line":168,"column":8},"end":{"line":170,"column":9}},{"start":{"line":168,"column":8},"end":{"line":170,"column":9}}],"line":168},"24":{"loc":{"start":{"line":172,"column":12},"end":{"line":174,"column":13}},"type":"if","locations":[{"start":{"line":172,"column":12},"end":{"line":174,"column":13}},{"start":{"line":172,"column":12},"end":{"line":174,"column":13}}],"line":172},"25":{"loc":{"start":{"line":180,"column":12},"end":{"line":189,"column":13}},"type":"if","locations":[{"start":{"line":180,"column":12},"end":{"line":189,"column":13}},{"start":{"line":180,"column":12},"end":{"line":189,"column":13}}],"line":180},"26":{"loc":{"start":{"line":184,"column":17},"end":{"line":189,"column":13}},"type":"if","locations":[{"start":{"line":184,"column":17},"end":{"line":189,"column":13}},{"start":{"line":184,"column":17},"end":{"line":189,"column":13}}],"line":184},"27":{"loc":{"start":{"line":195,"column":12},"end":{"line":206,"column":13}},"type":"if","locations":[{"start":{"line":195,"column":12},"end":{"line":206,"column":13}},{"start":{"line":195,"column":12},"end":{"line":206,"column":13}}],"line":195},"28":{"loc":{"start":{"line":196,"column":16},"end":{"line":198,"column":17}},"type":"if","locations":[{"start":{"line":196,"column":16},"end":{"line":198,"column":17}},{"start":{"line":196,"column":16},"end":{"line":198,"column":17}}],"line":196},"29":{"loc":{"start":{"line":200,"column":16},"end":{"line":204,"column":17}},"type":"if","locations":[{"start":{"line":200,"column":16},"end":{"line":204,"column":17}},{"start":{"line":200,"column":16},"end":{"line":204,"column":17}}],"line":200},"30":{"loc":{"start":{"line":200,"column":20},"end":{"line":200,"column":69}},"type":"binary-expr","locations":[{"start":{"line":200,"column":20},"end":{"line":200,"column":39}},{"start":{"line":200,"column":43},"end":{"line":200,"column":69}}],"line":200},"31":{"loc":{"start":{"line":214,"column":8},"end":{"line":216,"column":9}},"type":"if","locations":[{"start":{"line":214,"column":8},"end":{"line":216,"column":9}},{"start":{"line":214,"column":8},"end":{"line":216,"column":9}}],"line":214},"32":{"loc":{"start":{"line":218,"column":8},"end":{"line":220,"column":9}},"type":"if","locations":[{"start":{"line":218,"column":8},"end":{"line":220,"column":9}},{"start":{"line":218,"column":8},"end":{"line":220,"column":9}}],"line":218},"33":{"loc":{"start":{"line":223,"column":8},"end":{"line":230,"column":9}},"type":"if","locations":[{"start":{"line":223,"column":8},"end":{"line":230,"column":9}},{"start":{"line":223,"column":8},"end":{"line":230,"column":9}}],"line":223},"34":{"loc":{"start":{"line":234,"column":8},"end":{"line":242,"column":9}},"type":"if","locations":[{"start":{"line":234,"column":8},"end":{"line":242,"column":9}},{"start":{"line":234,"column":8},"end":{"line":242,"column":9}}],"line":234},"35":{"loc":{"start":{"line":235,"column":12},"end":{"line":241,"column":13}},"type":"if","locations":[{"start":{"line":235,"column":12},"end":{"line":241,"column":13}},{"start":{"line":235,"column":12},"end":{"line":241,"column":13}}],"line":235},"36":{"loc":{"start":{"line":243,"column":8},"end":{"line":254,"column":9}},"type":"if","locations":[{"start":{"line":243,"column":8},"end":{"line":254,"column":9}},{"start":{"line":243,"column":8},"end":{"line":254,"column":9}}],"line":243},"37":{"loc":{"start":{"line":244,"column":12},"end":{"line":253,"column":13}},"type":"if","locations":[{"start":{"line":244,"column":12},"end":{"line":253,"column":13}},{"start":{"line":244,"column":12},"end":{"line":253,"column":13}}],"line":244},"38":{"loc":{"start":{"line":246,"column":16},"end":{"line":248,"column":17}},"type":"if","locations":[{"start":{"line":246,"column":16},"end":{"line":248,"column":17}},{"start":{"line":246,"column":16},"end":{"line":248,"column":17}}],"line":246},"39":{"loc":{"start":{"line":256,"column":8},"end":{"line":258,"column":9}},"type":"if","locations":[{"start":{"line":256,"column":8},"end":{"line":258,"column":9}},{"start":{"line":256,"column":8},"end":{"line":258,"column":9}}],"line":256},"40":{"loc":{"start":{"line":260,"column":8},"end":{"line":262,"column":9}},"type":"if","locations":[{"start":{"line":260,"column":8},"end":{"line":262,"column":9}},{"start":{"line":260,"column":8},"end":{"line":262,"column":9}}],"line":260},"41":{"loc":{"start":{"line":263,"column":8},"end":{"line":265,"column":9}},"type":"if","locations":[{"start":{"line":263,"column":8},"end":{"line":265,"column":9}},{"start":{"line":263,"column":8},"end":{"line":265,"column":9}}],"line":263},"42":{"loc":{"start":{"line":266,"column":8},"end":{"line":268,"column":9}},"type":"if","locations":[{"start":{"line":266,"column":8},"end":{"line":268,"column":9}},{"start":{"line":266,"column":8},"end":{"line":268,"column":9}}],"line":266},"43":{"loc":{"start":{"line":269,"column":8},"end":{"line":271,"column":9}},"type":"if","locations":[{"start":{"line":269,"column":8},"end":{"line":271,"column":9}},{"start":{"line":269,"column":8},"end":{"line":271,"column":9}}],"line":269}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":8,"9":3,"10":3,"11":3,"12":3,"13":0,"14":3,"15":3,"16":7,"17":7,"18":0,"19":3,"20":4,"21":3,"22":3,"23":3,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":1,"55":8,"56":8,"57":3,"58":7,"59":3,"60":3,"61":0,"62":3,"63":3,"64":3,"65":4,"66":4,"67":4,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":4,"77":2,"78":2,"79":0,"80":2,"81":6,"82":6,"83":2,"84":2,"85":3,"86":3,"87":8,"88":0,"89":8,"90":8,"91":3,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":8,"139":8,"140":0,"141":0,"142":0,"143":0,"144":8,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":8,"152":8,"153":0,"154":8,"155":8,"156":0,"157":8,"158":1,"159":8,"160":0,"161":8,"162":0,"163":8,"164":1},"f":{"0":8,"1":3,"2":7,"3":3,"4":4,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":8,"15":3,"16":7,"17":4,"18":0,"19":6,"20":8,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":8},"b":{"0":[0,3],"1":[3,0],"2":[7,0],"3":[3,0],"4":[0,3],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,3],"16":[0,4],"17":[0,0],"18":[0,0],"19":[2,2],"20":[0,2],"21":[0,8],"22":[0,8],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,8],"35":[0,0],"36":[0,8],"37":[0,0],"38":[0,0],"39":[0,8],"40":[0,8],"41":[1,7],"42":[0,8],"43":[0,8]},"inputSourceMap":{"version":3,"file":"C:/Users/myland/code/scryptlib/src/abi.ts","sources":["C:/Users/myland/code/scryptlib/src/abi.ts"],"names":[],"mappings":"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","sourcesContent":["import { oc } from 'ts-optchain';\nimport { int2Asm, bsv, arrayTypeAndSize, genLaunchConfigFile, getStructNameByType, isArrayType, isStructType, checkArray, flatternArray, typeOfArg, subscript, flatternStruct, resolveType, int2Value, asm2int, createStruct, createArray, asm2ScryptType } from './utils';\nimport { AbstractContract, TxContext, VerifyResult, AsmVarValues, buildTypeResolver } from './contract';\nimport { ScryptType, Bool, Int, SingletonParamType, SupportedParamType, Struct, Bytes } from './scryptTypes';\nimport { ABIEntityType, ABIEntity, ParamEntity, AliasEntity } from './compilerWrapper';\nconst BN = bsv.crypto.BN;\n\nexport interface Script {\n  toASM(): string;\n  toHex(): string;\n}\n\nexport type FileUri = string;\n\n/**\n     * Configuration for a debug session.\n     */\nexport interface DebugConfiguration {\n  type: 'scrypt';\n  request: 'launch';\n  internalConsoleOptions: 'openOnSessionStart',\n  name: string;\n  program: string;\n  constructorArgs: SupportedParamType[];\n  pubFunc: string;\n  pubFuncArgs: SupportedParamType[];\n  asmArgs?: AsmVarValues;\n  txContext?: any;\n}\n\nexport interface DebugLaunch {\n  version: '0.2.0';\n  configurations: DebugConfiguration[];\n}\n\nfunction escapeRegExp(stringToGoIntoTheRegex) {\n  return stringToGoIntoTheRegex.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n\nexport interface Argument {\n  name: string,\n  type: string,\n  value: SupportedParamType\n}\n\nexport type Arguments = Argument[];\n\n\nexport class FunctionCall {\n\n  readonly contract: AbstractContract;\n\n  readonly args: Arguments = [];\n\n  private _unlockingScriptAsm?: string;\n\n  private _lockingScriptAsm?: string;\n\n  get unlockingScript(): Script | undefined {\n    return this._unlockingScriptAsm === undefined ? undefined : bsv.Script.fromASM(this._unlockingScriptAsm);\n  }\n\n  get lockingScript(): Script | undefined {\n    return this._lockingScriptAsm === undefined ? undefined : bsv.Script.fromASM(this._lockingScriptAsm);\n  }\n\n  init(asmVarValues: AsmVarValues): void {\n    for (const key in asmVarValues) {\n      const val = asmVarValues[key];\n      const re = new RegExp(`\\\\$${key}`, 'g');\n      this._lockingScriptAsm = this._lockingScriptAsm.replace(re, val);\n    }\n  }\n\n  constructor(\n    public methodName: string,\n    public params: SupportedParamType[],\n    binding: {\n      contract: AbstractContract;\n      lockingScriptASM?: string;\n      unlockingScriptASM?: string;\n    }\n  ) {\n\n    if (binding.lockingScriptASM === undefined && binding.unlockingScriptASM === undefined) {\n      throw new Error('param binding.lockingScriptASM & binding.unlockingScriptASM cannot both be empty');\n    }\n\n    this.contract = binding.contract;\n\n\n    this.args = Object.getPrototypeOf(this.contract).constructor.abi.filter((entity: ABIEntity) => {\n      if ('constructor' === methodName) {\n        return entity.type === 'constructor';\n      }\n      return entity.name === methodName;\n    }).map((entity: ABIEntity) => {\n      return entity.params.map((param, index) => {\n        return {\n          name: param.name,\n          type: param.type,\n          value: params[index]\n        };\n      });\n    }).flat(1);\n\n    if (binding.lockingScriptASM) {\n      this._lockingScriptAsm = binding.lockingScriptASM;\n    }\n\n    if (binding.unlockingScriptASM) {\n      this._unlockingScriptAsm = binding.unlockingScriptASM;\n    }\n  }\n\n  toASM(): string {\n    if (this.lockingScript) {\n      return this.lockingScript.toASM();\n    } else {\n      return this.unlockingScript.toASM();\n    }\n  }\n\n  toString(): string {\n    return this.toHex();\n  }\n\n  toScript(): Script {\n    return bsv.Script.fromASM(this.toASM());\n  }\n\n  toHex(): string {\n    return this.toScript().toHex();\n  }\n\n\n\n  genLaunchConfigFile(txContext?: TxContext): FileUri {\n\n    const constructorArgs: SupportedParamType[] = this.contract.scriptedConstructor.params;\n\n    const pubFuncArgs: SupportedParamType[] = this.params;\n    const pubFunc: string = this.methodName;\n    const name = `Debug ${Object.getPrototypeOf(this.contract).constructor.contractName}`;\n    const program = `${Object.getPrototypeOf(this.contract).constructor.file}`;\n\n    const asmArgs: AsmVarValues = this.contract.asmArgs || {};\n    const dataPart: string = this.contract.dataPart ? this.contract.dataPart.toASM() : undefined;\n    const txCtx: TxContext = Object.assign({}, this.contract.txContext || {}, txContext || {}, { opReturn: dataPart });\n\n    return genLaunchConfigFile(constructorArgs, pubFuncArgs, pubFunc, name, program, txCtx, asmArgs);\n  }\n\n  verify(txContext?: TxContext): VerifyResult {\n    if (this.unlockingScript) {\n      const result = this.contract.run_verify(this.unlockingScript.toASM(), txContext, this.args);\n\n      if (!result.success) {\n        const debugUrl = this.genLaunchConfigFile(txContext);\n        if (debugUrl) {\n          result.error = result.error + `\\t[Launch Debugger](${debugUrl.replace(/file:/i, 'scryptlaunch:')})\\n`;\n        }\n      }\n      return result;\n    }\n\n    return {\n      success: false,\n      error: 'verification failed, missing unlockingScript'\n    };\n  }\n\n}\n\nexport class ABICoder {\n\n  constructor(public abi: ABIEntity[], public alias: AliasEntity[]) { }\n\n\n  encodeConstructorCall(contract: AbstractContract, asmTemplate: string, ...args: SupportedParamType[]): FunctionCall {\n\n    const constructorABI = this.abi.filter(entity => entity.type === ABIEntityType.CONSTRUCTOR)[0];\n    const cParams = oc(constructorABI).params([]);\n\n    if (args.length !== cParams.length) {\n      throw new Error(`wrong number of arguments for #constructor, expected ${cParams.length} but got ${args.length}`);\n    }\n\n    // handle array type\n    const cParams_: Array<ParamEntity> = [];\n    const args_: SupportedParamType[] = [];\n    cParams.forEach((param, index) => {\n      const arg = args[index];\n      const finalType = resolveType(this.alias, param.type);\n      if (isArrayType(finalType)) {\n        const [elemTypeName, arraySizes] = arrayTypeAndSize(finalType);\n\n        if (Array.isArray(arg)) {\n          if (checkArray(arg, [elemTypeName, arraySizes])) {\n            // flattern array\n            flatternArray(arg, param.name, finalType).forEach((e, idx) => {\n              cParams_.push({ name: e.name, type: e.type });\n              args_.push(e.value);\n            });\n          } else {\n            throw new Error(`constructor ${index}-th parameter should be ${finalType}`);\n          }\n        } else {\n          throw new Error(`constructor ${index}-th parameter should be ${finalType}`);\n        }\n      } else if (isStructType(finalType)) {\n\n        const argS = arg as Struct;\n\n        if (finalType != argS.finalType) {\n          throw new Error(`expect struct ${param.type} but got struct ${argS.type}`);\n        }\n\n        flatternStruct(argS, param.name).forEach(v => {\n          cParams_.push({ name: `${v.name}`, type: v.type });\n          args_.push(v.value);\n        });\n      }\n      else {\n        cParams_.push(param);\n        args_.push(arg);\n      }\n    });\n\n    let lsASM = asmTemplate;\n\n    cParams_.forEach((param, index) => {\n      if (!asmTemplate.includes(`$${param.name}`)) {\n        throw new Error(`abi constructor params mismatch with args provided: missing ${param.name} in ASM tempalte`);\n      }\n\n      const re = param.name.endsWith(']') ? new RegExp(`\\\\B${escapeRegExp(`$${param.name}`)}\\\\B`, 'g') : new RegExp(`\\\\B${escapeRegExp(`$${param.name}`)}\\\\b`, 'g');\n      lsASM = lsASM.replace(re, this.encodeParam(args_[index], param));\n    });\n\n    return new FunctionCall('constructor', args, { contract, lockingScriptASM: lsASM });\n  }\n\n  encodeConstructorCallFromASM(contract: AbstractContract, asmTemplate: string, lsASM: string): FunctionCall {\n    const constructorABI = this.abi.filter(entity => entity.type === ABIEntityType.CONSTRUCTOR)[0];\n    const cParams = oc(constructorABI).params([]);\n\n    const opcodesMap = new Map<string, string>();\n\n    const asmTemplateOpcodes = asmTemplate.split(' ');\n    const asmOpcodes = lsASM.split(' ');\n\n    if (asmTemplateOpcodes.length != asmOpcodes.length) {\n      throw new Error(`the raw script cannot match the contract ${AbstractContract.contractName}`);\n    }\n\n    asmTemplateOpcodes.forEach((opcode, index) => {\n\n      if (opcode.startsWith('$')) {\n        opcodesMap.set(opcode, asmOpcodes[index]);\n      }\n    });\n\n\n    const finalTypeResolver = buildTypeResolver(this.alias);\n\n    const args: SupportedParamType[] = [];\n    cParams.forEach((param, index) => {\n      const finalType = finalTypeResolver(param.type);\n\n\n      if (isStructType(finalType)) {\n\n        const stclass = contract.getTypeClassByType(param.type);\n\n        args.push(createStruct(contract, stclass as typeof Struct, param.name, opcodesMap, finalTypeResolver));\n      } else if (isArrayType(finalType)) {\n\n        args.push(createArray(contract, finalType, param.name, opcodesMap, finalTypeResolver));\n\n      } else {\n        args.push(asm2ScryptType(finalType, opcodesMap.get(`$${param.name}`)));\n      }\n\n    });\n\n\n    return new FunctionCall('constructor', args, { contract, lockingScriptASM: lsASM });\n  }\n\n  encodePubFunctionCall(contract: AbstractContract, name: string, args: SupportedParamType[]): FunctionCall {\n\n    for (const entity of this.abi) {\n      if (entity.name === name) {\n        if (entity.params.length !== args.length) {\n          throw new Error(`wrong number of arguments for #${name}, expected ${entity.params.length} but got ${args.length}`);\n        }\n        let asm = this.encodeParams(args, entity.params);\n        if (this.abi.length > 2 && entity.index !== undefined) {\n          // selector when there are multiple public functions\n          const pubFuncIndex = entity.index;\n          asm += ` ${int2Asm(pubFuncIndex.toString())}`;\n        }\n        return new FunctionCall(name, args, { contract, unlockingScriptASM: asm });\n      }\n    }\n\n    throw new Error(`no function named '${name}' found in abi`);\n  }\n\n  encodeParams(args: SupportedParamType[], paramsEntitys: ParamEntity[]): string {\n    return args.map((arg, i) => this.encodeParam(arg, paramsEntitys[i])).join(' ');\n  }\n\n  encodeParamArray(args: SingletonParamType[], arrayParm: ParamEntity): string {\n    if (args.length === 0) {\n      throw new Error('Empty array not allowed');\n    }\n\n    const t = typeof args[0];\n\n    if (!args.every(arg => typeof arg === t)) {\n      throw new Error('Array arguments are not of the same type');\n    }\n    const finalType = resolveType(this.alias, arrayParm.type);\n\n    const [elemTypeName, arraySizes] = arrayTypeAndSize(finalType);\n    if (checkArray(args, [elemTypeName, arraySizes])) {\n      return flatternArray(args, arrayParm.name, finalType).map(arg => {\n        return this.encodeParam(arg.value, { name: arg.name, type: arg.type });\n      }).join(' ');\n    } else {\n      throw new Error(`checkArray ${arrayParm.type} fail`);\n    }\n  }\n\n\n  encodeParam(arg: SupportedParamType, paramEntity: ParamEntity): string {\n\n    const finalType = resolveType(this.alias, paramEntity.type);\n    if (isArrayType(finalType)) {\n      if (Array.isArray(arg)) {\n        return this.encodeParamArray(arg, paramEntity);\n      } else {\n        const scryptType = typeOfArg(arg);\n        throw new Error(`expect param ${paramEntity.name} as ${finalType} but got ${scryptType}`);\n      }\n    }\n\n    if (isStructType(finalType)) {\n\n      if (Struct.isStruct(arg)) {\n        const argS = arg as Struct;\n        if (finalType != argS.finalType) {\n          throw new Error(`expect struct ${paramEntity.type} but got struct ${argS.type}`);\n        }\n      } else {\n        const scryptType = (arg as ScryptType).type;\n        throw new Error(`expect param ${paramEntity.name} as struct ${getStructNameByType(paramEntity.type)} but got ${scryptType}`);\n      }\n    }\n\n\n    const scryptType = typeOfArg(arg);\n    if (scryptType != finalType) {\n      throw new Error(`wrong argument type, expected ${finalType} or ${paramEntity.type} but got ${scryptType}`);\n    }\n\n    const typeofArg = typeof arg;\n\n    if (typeofArg === 'boolean') {\n      arg = new Bool(arg as boolean);\n    }\n\n    if (typeofArg === 'number') {\n      arg = new Int(arg as number);\n    }\n\n    if (typeofArg === 'bigint') {\n      arg = new Int(arg as bigint);\n    }\n\n    if (typeof arg === 'string') {\n      arg = new Int(arg as string);\n    }\n\n    return (arg as ScryptType).toASM();\n  }\n\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"750f3d7bb62cbd44a73c9a46e54b3ee436851e43"},"C:\\Users\\myland\\code\\scryptlib\\src\\contract.ts":{"path":"C:\\Users\\myland\\code\\scryptlib\\src\\contract.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":146}},"2":{"start":{"line":4,"column":14},"end":{"line":4,"column":30}},"3":{"start":{"line":5,"column":21},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":16},"end":{"line":6,"column":34}},"5":{"start":{"line":7,"column":22},"end":{"line":7,"column":46}},"6":{"start":{"line":8,"column":26},"end":{"line":8,"column":54}},"7":{"start":{"line":11,"column":8},"end":{"line":11,"column":31}},"8":{"start":{"line":12,"column":8},"end":{"line":12,"column":28}},"9":{"start":{"line":15,"column":20},"end":{"line":15,"column":52}},"10":{"start":{"line":16,"column":8},"end":{"line":24,"column":9}},"11":{"start":{"line":17,"column":23},"end":{"line":17,"column":44}},"12":{"start":{"line":18,"column":12},"end":{"line":23,"column":13}},"13":{"start":{"line":19,"column":16},"end":{"line":19,"column":44}},"14":{"start":{"line":22,"column":16},"end":{"line":22,"column":38}},"15":{"start":{"line":25,"column":8},"end":{"line":25,"column":56}},"16":{"start":{"line":28,"column":8},"end":{"line":28,"column":36}},"17":{"start":{"line":31,"column":8},"end":{"line":31,"column":31}},"18":{"start":{"line":35,"column":8},"end":{"line":35,"column":36}},"19":{"start":{"line":36,"column":8},"end":{"line":36,"column":52}},"20":{"start":{"line":39,"column":8},"end":{"line":43,"column":9}},"21":{"start":{"line":40,"column":12},"end":{"line":42,"column":13}},"22":{"start":{"line":41,"column":16},"end":{"line":41,"column":45}},"23":{"start":{"line":46,"column":22},"end":{"line":46,"column":67}},"24":{"start":{"line":47,"column":8},"end":{"line":55,"column":9}},"25":{"start":{"line":48,"column":31},"end":{"line":48,"column":64}},"26":{"start":{"line":49,"column":12},"end":{"line":51,"column":13}},"27":{"start":{"line":50,"column":16},"end":{"line":50,"column":41}},"28":{"start":{"line":54,"column":12},"end":{"line":54,"column":31}},"29":{"start":{"line":58,"column":22},"end":{"line":58,"column":79}},"30":{"start":{"line":59,"column":19},"end":{"line":59,"column":72}},"31":{"start":{"line":60,"column":19},"end":{"line":60,"column":37}},"32":{"start":{"line":61,"column":19},"end":{"line":61,"column":27}},"33":{"start":{"line":62,"column":27},"end":{"line":62,"column":48}},"34":{"start":{"line":63,"column":30},"end":{"line":63,"column":54}},"35":{"start":{"line":64,"column":8},"end":{"line":64,"column":89}},"36":{"start":{"line":65,"column":8},"end":{"line":65,"column":86}},"37":{"start":{"line":66,"column":20},"end":{"line":66,"column":52}},"38":{"start":{"line":67,"column":26},"end":{"line":67,"column":27}},"39":{"start":{"line":68,"column":32},"end":{"line":68,"column":34}},"40":{"start":{"line":69,"column":8},"end":{"line":72,"column":10}},"41":{"start":{"line":70,"column":12},"end":{"line":70,"column":87}},"42":{"start":{"line":71,"column":12},"end":{"line":71,"column":26}},"43":{"start":{"line":73,"column":24},"end":{"line":73,"column":71}},"44":{"start":{"line":74,"column":23},"end":{"line":74,"column":122}},"45":{"start":{"line":75,"column":20},"end":{"line":75,"column":62}},"46":{"start":{"line":77,"column":8},"end":{"line":112,"column":9}},"47":{"start":{"line":78,"column":27},"end":{"line":78,"column":70}},"48":{"start":{"line":80,"column":34},"end":{"line":80,"column":49}},"49":{"start":{"line":81,"column":12},"end":{"line":89,"column":13}},"50":{"start":{"line":82,"column":16},"end":{"line":82,"column":65}},"51":{"start":{"line":83,"column":27},"end":{"line":83,"column":48}},"52":{"start":{"line":84,"column":16},"end":{"line":88,"column":17}},"53":{"start":{"line":85,"column":20},"end":{"line":87,"column":23}},"54":{"start":{"line":86,"column":24},"end":{"line":86,"column":66}},"55":{"start":{"line":90,"column":32},"end":{"line":90,"column":54}},"56":{"start":{"line":91,"column":12},"end":{"line":111,"column":13}},"57":{"start":{"line":92,"column":31},"end":{"line":92,"column":51}},"58":{"start":{"line":93,"column":16},"end":{"line":98,"column":17}},"59":{"start":{"line":94,"column":36},"end":{"line":94,"column":118}},"60":{"start":{"line":95,"column":20},"end":{"line":97,"column":21}},"61":{"start":{"line":96,"column":24},"end":{"line":96,"column":49}},"62":{"start":{"line":100,"column":16},"end":{"line":110,"column":17}},"63":{"start":{"line":101,"column":20},"end":{"line":101,"column":162}},"64":{"start":{"line":102,"column":20},"end":{"line":109,"column":21}},"65":{"start":{"line":103,"column":24},"end":{"line":105,"column":25}},"66":{"start":{"line":104,"column":28},"end":{"line":104,"column":84}},"67":{"start":{"line":106,"column":24},"end":{"line":108,"column":25}},"68":{"start":{"line":107,"column":28},"end":{"line":107,"column":87}},"69":{"start":{"line":113,"column":8},"end":{"line":116,"column":10}},"70":{"start":{"line":119,"column":8},"end":{"line":119,"column":99}},"71":{"start":{"line":122,"column":8},"end":{"line":122,"column":101}},"72":{"start":{"line":125,"column":8},"end":{"line":131,"column":9}},"73":{"start":{"line":127,"column":12},"end":{"line":127,"column":42}},"74":{"start":{"line":130,"column":12},"end":{"line":130,"column":64}},"75":{"start":{"line":134,"column":24},"end":{"line":134,"column":56}},"76":{"start":{"line":136,"column":8},"end":{"line":136,"column":66}},"77":{"start":{"line":139,"column":22},"end":{"line":139,"column":32}},"78":{"start":{"line":140,"column":21},"end":{"line":140,"column":45}},"79":{"start":{"line":141,"column":8},"end":{"line":143,"column":9}},"80":{"start":{"line":142,"column":12},"end":{"line":142,"column":24}},"81":{"start":{"line":144,"column":25},"end":{"line":144,"column":49}},"82":{"start":{"line":145,"column":27},"end":{"line":145,"column":47}},"83":{"start":{"line":146,"column":23},"end":{"line":146,"column":25}},"84":{"start":{"line":147,"column":8},"end":{"line":153,"column":9}},"85":{"start":{"line":147,"column":21},"end":{"line":147,"column":22}},"86":{"start":{"line":148,"column":12},"end":{"line":152,"column":13}},"87":{"start":{"line":148,"column":25},"end":{"line":148,"column":26}},"88":{"start":{"line":149,"column":16},"end":{"line":151,"column":17}},"89":{"start":{"line":150,"column":20},"end":{"line":150,"column":69}},"90":{"start":{"line":154,"column":8},"end":{"line":154,"column":22}},"91":{"start":{"line":157,"column":8},"end":{"line":159,"column":9}},"92":{"start":{"line":158,"column":12},"end":{"line":158,"column":49}},"93":{"start":{"line":160,"column":8},"end":{"line":162,"column":9}},"94":{"start":{"line":161,"column":12},"end":{"line":161,"column":52}},"95":{"start":{"line":163,"column":8},"end":{"line":163,"column":18}},"96":{"start":{"line":166,"column":0},"end":{"line":166,"column":44}},"97":{"start":{"line":167,"column":26},"end":{"line":167,"column":155}},"98":{"start":{"line":169,"column":4},"end":{"line":171,"column":5}},"99":{"start":{"line":170,"column":8},"end":{"line":170,"column":67}},"100":{"start":{"line":172,"column":4},"end":{"line":174,"column":5}},"101":{"start":{"line":173,"column":8},"end":{"line":173,"column":62}},"102":{"start":{"line":175,"column":4},"end":{"line":177,"column":5}},"103":{"start":{"line":176,"column":8},"end":{"line":176,"column":62}},"104":{"start":{"line":178,"column":4},"end":{"line":183,"column":5}},"105":{"start":{"line":179,"column":8},"end":{"line":179,"column":58}},"106":{"start":{"line":182,"column":8},"end":{"line":182,"column":20}},"107":{"start":{"line":184,"column":26},"end":{"line":222,"column":5}},"108":{"start":{"line":186,"column":12},"end":{"line":186,"column":20}},"109":{"start":{"line":187,"column":12},"end":{"line":189,"column":13}},"110":{"start":{"line":188,"column":16},"end":{"line":188,"column":118}},"111":{"start":{"line":198,"column":12},"end":{"line":198,"column":40}},"112":{"start":{"line":199,"column":24},"end":{"line":199,"column":34}},"113":{"start":{"line":200,"column":12},"end":{"line":200,"column":41}},"114":{"start":{"line":201,"column":12},"end":{"line":201,"column":109}},"115":{"start":{"line":202,"column":12},"end":{"line":202,"column":23}},"116":{"start":{"line":209,"column":12},"end":{"line":209,"column":80}},"117":{"start":{"line":216,"column":12},"end":{"line":216,"column":95}},"118":{"start":{"line":220,"column":12},"end":{"line":220,"column":24}},"119":{"start":{"line":223,"column":4},"end":{"line":223,"column":47}},"120":{"start":{"line":224,"column":4},"end":{"line":224,"column":33}},"121":{"start":{"line":225,"column":4},"end":{"line":225,"column":78}},"122":{"start":{"line":225,"column":45},"end":{"line":225,"column":66}},"123":{"start":{"line":226,"column":4},"end":{"line":226,"column":76}},"124":{"start":{"line":227,"column":4},"end":{"line":227,"column":37}},"125":{"start":{"line":228,"column":4},"end":{"line":228,"column":35}},"126":{"start":{"line":229,"column":4},"end":{"line":229,"column":41}},"127":{"start":{"line":230,"column":4},"end":{"line":230,"column":49}},"128":{"start":{"line":231,"column":4},"end":{"line":240,"column":7}},"129":{"start":{"line":232,"column":8},"end":{"line":234,"column":9}},"130":{"start":{"line":233,"column":12},"end":{"line":233,"column":127}},"131":{"start":{"line":235,"column":8},"end":{"line":239,"column":10}},"132":{"start":{"line":236,"column":25},"end":{"line":236,"column":94}},"133":{"start":{"line":237,"column":12},"end":{"line":237,"column":46}},"134":{"start":{"line":238,"column":12},"end":{"line":238,"column":24}},"135":{"start":{"line":241,"column":4},"end":{"line":241,"column":25}},"136":{"start":{"line":243,"column":0},"end":{"line":243,"column":48}},"137":{"start":{"line":249,"column":24},"end":{"line":249,"column":26}},"138":{"start":{"line":250,"column":20},"end":{"line":250,"column":38}},"139":{"start":{"line":251,"column":18},"end":{"line":251,"column":34}},"140":{"start":{"line":252,"column":30},"end":{"line":252,"column":54}},"141":{"start":{"line":253,"column":4},"end":{"line":265,"column":7}},"142":{"start":{"line":254,"column":21},"end":{"line":254,"column":33}},"143":{"start":{"line":255,"column":8},"end":{"line":263,"column":11}},"144":{"start":{"line":258,"column":20},"end":{"line":258,"column":29}},"145":{"start":{"line":259,"column":20},"end":{"line":259,"column":59}},"146":{"start":{"line":260,"column":20},"end":{"line":260,"column":32}},"147":{"start":{"line":264,"column":8},"end":{"line":264,"column":46}},"148":{"start":{"line":266,"column":4},"end":{"line":266,"column":23}},"149":{"start":{"line":268,"column":0},"end":{"line":268,"column":46}},"150":{"start":{"line":270,"column":26},"end":{"line":270,"column":49}},"151":{"start":{"line":271,"column":23},"end":{"line":271,"column":25}},"152":{"start":{"line":272,"column":18},"end":{"line":272,"column":34}},"153":{"start":{"line":273,"column":30},"end":{"line":273,"column":54}},"154":{"start":{"line":274,"column":4},"end":{"line":326,"column":7}},"155":{"start":{"line":275,"column":26},"end":{"line":275,"column":57}},"156":{"start":{"line":276,"column":8},"end":{"line":325,"column":9}},"157":{"start":{"line":277,"column":25},"end":{"line":277,"column":63}},"158":{"start":{"line":278,"column":12},"end":{"line":286,"column":15}},"159":{"start":{"line":281,"column":24},"end":{"line":281,"column":33}},"160":{"start":{"line":282,"column":24},"end":{"line":282,"column":50}},"161":{"start":{"line":283,"column":24},"end":{"line":283,"column":63}},"162":{"start":{"line":288,"column":13},"end":{"line":325,"column":9}},"163":{"start":{"line":290,"column":38},"end":{"line":290,"column":73}},"164":{"start":{"line":291,"column":22},"end":{"line":291,"column":65}},"165":{"start":{"line":292,"column":12},"end":{"line":305,"column":13}},"166":{"start":{"line":293,"column":16},"end":{"line":296,"column":19}},"167":{"start":{"line":298,"column":17},"end":{"line":305,"column":13}},"168":{"start":{"line":299,"column":29},"end":{"line":299,"column":70}},"169":{"start":{"line":300,"column":26},"end":{"line":300,"column":45}},"170":{"start":{"line":301,"column":16},"end":{"line":304,"column":19}},"171":{"start":{"line":308,"column":22},"end":{"line":308,"column":62}},"172":{"start":{"line":309,"column":12},"end":{"line":324,"column":13}},"173":{"start":{"line":310,"column":30},"end":{"line":310,"column":31}},"174":{"start":{"line":311,"column":35},"end":{"line":317,"column":17}},"175":{"start":{"line":313,"column":24},"end":{"line":313,"column":33}},"176":{"start":{"line":314,"column":24},"end":{"line":314,"column":50}},"177":{"start":{"line":315,"column":24},"end":{"line":315,"column":63}},"178":{"start":{"line":318,"column":16},"end":{"line":320,"column":19}},"179":{"start":{"line":323,"column":16},"end":{"line":323,"column":94}},"180":{"start":{"line":327,"column":4},"end":{"line":327,"column":45}},"181":{"start":{"line":328,"column":4},"end":{"line":328,"column":22}},"182":{"start":{"line":330,"column":0},"end":{"line":330,"column":44}},"183":{"start":{"line":332,"column":26},"end":{"line":332,"column":28}},"184":{"start":{"line":333,"column":4},"end":{"line":336,"column":7}},"185":{"start":{"line":334,"column":26},"end":{"line":334,"column":66}},"186":{"start":{"line":335,"column":8},"end":{"line":335,"column":48}},"187":{"start":{"line":337,"column":4},"end":{"line":359,"column":6}},"188":{"start":{"line":338,"column":8},"end":{"line":340,"column":9}},"189":{"start":{"line":339,"column":12},"end":{"line":339,"column":55}},"190":{"start":{"line":341,"column":24},"end":{"line":341,"column":26}},"191":{"start":{"line":342,"column":8},"end":{"line":351,"column":9}},"192":{"start":{"line":343,"column":42},"end":{"line":343,"column":73}},"193":{"start":{"line":344,"column":12},"end":{"line":349,"column":13}},"194":{"start":{"line":345,"column":16},"end":{"line":345,"column":66}},"195":{"start":{"line":348,"column":16},"end":{"line":348,"column":37}},"196":{"start":{"line":350,"column":12},"end":{"line":350,"column":64}},"197":{"start":{"line":350,"column":42},"end":{"line":350,"column":53}},"198":{"start":{"line":352,"column":8},"end":{"line":354,"column":9}},"199":{"start":{"line":353,"column":12},"end":{"line":353,"column":42}},"200":{"start":{"line":355,"column":8},"end":{"line":357,"column":9}},"201":{"start":{"line":356,"column":12},"end":{"line":356,"column":57}},"202":{"start":{"line":358,"column":8},"end":{"line":358,"column":48}},"203":{"start":{"line":361,"column":0},"end":{"line":361,"column":46}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":18},"end":{"line":13,"column":5}},"line":10},"1":{"name":"(anonymous_1)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":24},"end":{"line":26,"column":5}},"line":14},"2":{"name":"(anonymous_2)","decl":{"start":{"line":27,"column":4},"end":{"line":27,"column":5}},"loc":{"start":{"line":27,"column":29},"end":{"line":29,"column":5}},"line":27},"3":{"name":"(anonymous_3)","decl":{"start":{"line":30,"column":4},"end":{"line":30,"column":5}},"loc":{"start":{"line":30,"column":20},"end":{"line":32,"column":5}},"line":30},"4":{"name":"(anonymous_4)","decl":{"start":{"line":34,"column":4},"end":{"line":34,"column":5}},"loc":{"start":{"line":34,"column":33},"end":{"line":37,"column":5}},"line":34},"5":{"name":"(anonymous_5)","decl":{"start":{"line":38,"column":4},"end":{"line":38,"column":5}},"loc":{"start":{"line":38,"column":74},"end":{"line":44,"column":5}},"line":38},"6":{"name":"(anonymous_6)","decl":{"start":{"line":45,"column":4},"end":{"line":45,"column":5}},"loc":{"start":{"line":45,"column":29},"end":{"line":56,"column":5}},"line":45},"7":{"name":"(anonymous_7)","decl":{"start":{"line":57,"column":4},"end":{"line":57,"column":5}},"loc":{"start":{"line":57,"column":52},"end":{"line":117,"column":5}},"line":57},"8":{"name":"(anonymous_8)","decl":{"start":{"line":69,"column":27},"end":{"line":69,"column":28}},"loc":{"start":{"line":69,"column":60},"end":{"line":72,"column":9}},"line":69},"9":{"name":"(anonymous_9)","decl":{"start":{"line":85,"column":42},"end":{"line":85,"column":43}},"loc":{"start":{"line":85,"column":50},"end":{"line":87,"column":21}},"line":85},"10":{"name":"(anonymous_10)","decl":{"start":{"line":118,"column":4},"end":{"line":118,"column":5}},"loc":{"start":{"line":118,"column":31},"end":{"line":120,"column":5}},"line":118},"11":{"name":"(anonymous_11)","decl":{"start":{"line":121,"column":4},"end":{"line":121,"column":5}},"loc":{"start":{"line":121,"column":19},"end":{"line":123,"column":5}},"line":121},"12":{"name":"(anonymous_12)","decl":{"start":{"line":124,"column":4},"end":{"line":124,"column":5}},"loc":{"start":{"line":124,"column":23},"end":{"line":132,"column":5}},"line":124},"13":{"name":"(anonymous_13)","decl":{"start":{"line":133,"column":4},"end":{"line":133,"column":5}},"loc":{"start":{"line":133,"column":19},"end":{"line":137,"column":5}},"line":133},"14":{"name":"(anonymous_14)","decl":{"start":{"line":138,"column":4},"end":{"line":138,"column":5}},"loc":{"start":{"line":138,"column":44},"end":{"line":155,"column":5}},"line":138},"15":{"name":"(anonymous_15)","decl":{"start":{"line":156,"column":4},"end":{"line":156,"column":5}},"loc":{"start":{"line":156,"column":27},"end":{"line":164,"column":5}},"line":156},"16":{"name":"buildContractClass","decl":{"start":{"line":168,"column":9},"end":{"line":168,"column":27}},"loc":{"start":{"line":168,"column":34},"end":{"line":242,"column":1}},"line":168},"17":{"name":"(anonymous_17)","decl":{"start":{"line":185,"column":8},"end":{"line":185,"column":9}},"loc":{"start":{"line":185,"column":35},"end":{"line":190,"column":9}},"line":185},"18":{"name":"(anonymous_18)","decl":{"start":{"line":197,"column":8},"end":{"line":197,"column":9}},"loc":{"start":{"line":197,"column":28},"end":{"line":203,"column":9}},"line":197},"19":{"name":"(anonymous_19)","decl":{"start":{"line":208,"column":8},"end":{"line":208,"column":9}},"loc":{"start":{"line":208,"column":28},"end":{"line":210,"column":9}},"line":208},"20":{"name":"(anonymous_20)","decl":{"start":{"line":215,"column":8},"end":{"line":215,"column":9}},"loc":{"start":{"line":215,"column":22},"end":{"line":217,"column":9}},"line":215},"21":{"name":"(anonymous_21)","decl":{"start":{"line":218,"column":8},"end":{"line":218,"column":9}},"loc":{"start":{"line":218,"column":27},"end":{"line":221,"column":9}},"line":218},"22":{"name":"(anonymous_22)","decl":{"start":{"line":225,"column":37},"end":{"line":225,"column":38}},"loc":{"start":{"line":225,"column":45},"end":{"line":225,"column":66}},"line":225},"23":{"name":"(anonymous_23)","decl":{"start":{"line":231,"column":30},"end":{"line":231,"column":31}},"loc":{"start":{"line":231,"column":40},"end":{"line":240,"column":5}},"line":231},"24":{"name":"(anonymous_24)","decl":{"start":{"line":235,"column":47},"end":{"line":235,"column":48}},"loc":{"start":{"line":235,"column":66},"end":{"line":239,"column":9}},"line":235},"25":{"name":"buildStructsClass","decl":{"start":{"line":248,"column":9},"end":{"line":248,"column":26}},"loc":{"start":{"line":248,"column":33},"end":{"line":267,"column":1}},"line":248},"26":{"name":"(anonymous_26)","decl":{"start":{"line":253,"column":20},"end":{"line":253,"column":21}},"loc":{"start":{"line":253,"column":31},"end":{"line":265,"column":5}},"line":253},"27":{"name":"(anonymous_27)","decl":{"start":{"line":257,"column":16},"end":{"line":257,"column":17}},"loc":{"start":{"line":257,"column":31},"end":{"line":261,"column":17}},"line":257},"28":{"name":"buildTypeClasses","decl":{"start":{"line":269,"column":9},"end":{"line":269,"column":25}},"loc":{"start":{"line":269,"column":32},"end":{"line":329,"column":1}},"line":269},"29":{"name":"(anonymous_29)","decl":{"start":{"line":274,"column":18},"end":{"line":274,"column":19}},"loc":{"start":{"line":274,"column":29},"end":{"line":326,"column":5}},"line":274},"30":{"name":"(anonymous_30)","decl":{"start":{"line":280,"column":20},"end":{"line":280,"column":21}},"loc":{"start":{"line":280,"column":35},"end":{"line":284,"column":21}},"line":280},"31":{"name":"(anonymous_31)","decl":{"start":{"line":312,"column":20},"end":{"line":312,"column":21}},"loc":{"start":{"line":312,"column":35},"end":{"line":316,"column":21}},"line":312},"32":{"name":"buildTypeResolver","decl":{"start":{"line":331,"column":9},"end":{"line":331,"column":26}},"loc":{"start":{"line":331,"column":34},"end":{"line":360,"column":1}},"line":331},"33":{"name":"(anonymous_33)","decl":{"start":{"line":333,"column":18},"end":{"line":333,"column":19}},"loc":{"start":{"line":333,"column":29},"end":{"line":336,"column":5}},"line":333},"34":{"name":"(anonymous_34)","decl":{"start":{"line":337,"column":11},"end":{"line":337,"column":12}},"loc":{"start":{"line":337,"column":22},"end":{"line":359,"column":5}},"line":337},"35":{"name":"(anonymous_35)","decl":{"start":{"line":350,"column":34},"end":{"line":350,"column":35}},"loc":{"start":{"line":350,"column":42},"end":{"line":350,"column":53}},"line":350}},"branchMap":{"0":{"loc":{"start":{"line":16,"column":8},"end":{"line":24,"column":9}},"type":"if","locations":[{"start":{"line":16,"column":8},"end":{"line":24,"column":9}},{"start":{"line":16,"column":8},"end":{"line":24,"column":9}}],"line":16},"1":{"loc":{"start":{"line":18,"column":12},"end":{"line":23,"column":13}},"type":"if","locations":[{"start":{"line":18,"column":12},"end":{"line":23,"column":13}},{"start":{"line":18,"column":12},"end":{"line":23,"column":13}}],"line":18},"2":{"loc":{"start":{"line":39,"column":15},"end":{"line":39,"column":52}},"type":"binary-expr","locations":[{"start":{"line":39,"column":15},"end":{"line":39,"column":30}},{"start":{"line":39,"column":34},"end":{"line":39,"column":52}}],"line":39},"3":{"loc":{"start":{"line":40,"column":12},"end":{"line":42,"column":13}},"type":"if","locations":[{"start":{"line":40,"column":12},"end":{"line":42,"column":13}},{"start":{"line":40,"column":12},"end":{"line":42,"column":13}}],"line":40},"4":{"loc":{"start":{"line":40,"column":16},"end":{"line":40,"column":164}},"type":"binary-expr","locations":[{"start":{"line":40,"column":16},"end":{"line":40,"column":41}},{"start":{"line":40,"column":45},"end":{"line":40,"column":85}},{"start":{"line":40,"column":89},"end":{"line":40,"column":123}},{"start":{"line":40,"column":127},"end":{"line":40,"column":164}}],"line":40},"5":{"loc":{"start":{"line":47,"column":8},"end":{"line":55,"column":9}},"type":"if","locations":[{"start":{"line":47,"column":8},"end":{"line":55,"column":9}},{"start":{"line":47,"column":8},"end":{"line":55,"column":9}}],"line":47},"6":{"loc":{"start":{"line":49,"column":12},"end":{"line":51,"column":13}},"type":"if","locations":[{"start":{"line":49,"column":12},"end":{"line":51,"column":13}},{"start":{"line":49,"column":12},"end":{"line":51,"column":13}}],"line":49},"7":{"loc":{"start":{"line":58,"column":40},"end":{"line":58,"column":61}},"type":"binary-expr","locations":[{"start":{"line":58,"column":40},"end":{"line":58,"column":55}},{"start":{"line":58,"column":59},"end":{"line":58,"column":61}}],"line":58},"8":{"loc":{"start":{"line":58,"column":63},"end":{"line":58,"column":78}},"type":"binary-expr","locations":[{"start":{"line":58,"column":63},"end":{"line":58,"column":72}},{"start":{"line":58,"column":76},"end":{"line":58,"column":78}}],"line":58},"9":{"loc":{"start":{"line":62,"column":27},"end":{"line":62,"column":48}},"type":"binary-expr","locations":[{"start":{"line":62,"column":27},"end":{"line":62,"column":43}},{"start":{"line":62,"column":47},"end":{"line":62,"column":48}}],"line":62},"10":{"loc":{"start":{"line":63,"column":30},"end":{"line":63,"column":54}},"type":"binary-expr","locations":[{"start":{"line":63,"column":30},"end":{"line":63,"column":49}},{"start":{"line":63,"column":53},"end":{"line":63,"column":54}}],"line":63},"11":{"loc":{"start":{"line":75,"column":20},"end":{"line":75,"column":62}},"type":"cond-expr","locations":[{"start":{"line":75,"column":29},"end":{"line":75,"column":31}},{"start":{"line":75,"column":34},"end":{"line":75,"column":62}}],"line":75},"12":{"loc":{"start":{"line":77,"column":8},"end":{"line":112,"column":9}},"type":"if","locations":[{"start":{"line":77,"column":8},"end":{"line":112,"column":9}},{"start":{"line":77,"column":8},"end":{"line":112,"column":9}}],"line":77},"13":{"loc":{"start":{"line":81,"column":12},"end":{"line":89,"column":13}},"type":"if","locations":[{"start":{"line":81,"column":12},"end":{"line":89,"column":13}},{"start":{"line":81,"column":12},"end":{"line":89,"column":13}}],"line":81},"14":{"loc":{"start":{"line":84,"column":16},"end":{"line":88,"column":17}},"type":"if","locations":[{"start":{"line":84,"column":16},"end":{"line":88,"column":17}},{"start":{"line":84,"column":16},"end":{"line":88,"column":17}}],"line":84},"15":{"loc":{"start":{"line":91,"column":12},"end":{"line":111,"column":13}},"type":"if","locations":[{"start":{"line":91,"column":12},"end":{"line":111,"column":13}},{"start":{"line":91,"column":12},"end":{"line":111,"column":13}}],"line":91},"16":{"loc":{"start":{"line":91,"column":16},"end":{"line":91,"column":47}},"type":"binary-expr","locations":[{"start":{"line":91,"column":16},"end":{"line":91,"column":23}},{"start":{"line":91,"column":27},"end":{"line":91,"column":47}}],"line":91},"17":{"loc":{"start":{"line":93,"column":16},"end":{"line":98,"column":17}},"type":"if","locations":[{"start":{"line":93,"column":16},"end":{"line":98,"column":17}},{"start":{"line":93,"column":16},"end":{"line":98,"column":17}}],"line":93},"18":{"loc":{"start":{"line":93,"column":20},"end":{"line":93,"column":60}},"type":"binary-expr","locations":[{"start":{"line":93,"column":20},"end":{"line":93,"column":31}},{"start":{"line":93,"column":35},"end":{"line":93,"column":60}}],"line":93},"19":{"loc":{"start":{"line":95,"column":20},"end":{"line":97,"column":21}},"type":"if","locations":[{"start":{"line":95,"column":20},"end":{"line":97,"column":21}},{"start":{"line":95,"column":20},"end":{"line":97,"column":21}}],"line":95},"20":{"loc":{"start":{"line":100,"column":16},"end":{"line":110,"column":17}},"type":"if","locations":[{"start":{"line":100,"column":16},"end":{"line":110,"column":17}},{"start":{"line":100,"column":16},"end":{"line":110,"column":17}}],"line":100},"21":{"loc":{"start":{"line":102,"column":20},"end":{"line":109,"column":21}},"type":"if","locations":[{"start":{"line":102,"column":20},"end":{"line":109,"column":21}},{"start":{"line":102,"column":20},"end":{"line":109,"column":21}}],"line":102},"22":{"loc":{"start":{"line":102,"column":24},"end":{"line":102,"column":138}},"type":"binary-expr","locations":[{"start":{"line":102,"column":24},"end":{"line":102,"column":28}},{"start":{"line":102,"column":32},"end":{"line":102,"column":138}}],"line":102},"23":{"loc":{"start":{"line":103,"column":24},"end":{"line":105,"column":25}},"type":"if","locations":[{"start":{"line":103,"column":24},"end":{"line":105,"column":25}},{"start":{"line":103,"column":24},"end":{"line":105,"column":25}}],"line":103},"24":{"loc":{"start":{"line":106,"column":24},"end":{"line":108,"column":25}},"type":"if","locations":[{"start":{"line":106,"column":24},"end":{"line":108,"column":25}},{"start":{"line":106,"column":24},"end":{"line":108,"column":25}}],"line":106},"25":{"loc":{"start":{"line":122,"column":15},"end":{"line":122,"column":100}},"type":"cond-expr","locations":[{"start":{"line":122,"column":46},"end":{"line":122,"column":88}},{"start":{"line":122,"column":91},"end":{"line":122,"column":100}}],"line":122},"26":{"loc":{"start":{"line":125,"column":8},"end":{"line":131,"column":9}},"type":"if","locations":[{"start":{"line":125,"column":8},"end":{"line":131,"column":9}},{"start":{"line":125,"column":8},"end":{"line":131,"column":9}}],"line":125},"27":{"loc":{"start":{"line":141,"column":8},"end":{"line":143,"column":9}},"type":"if","locations":[{"start":{"line":141,"column":8},"end":{"line":143,"column":9}},{"start":{"line":141,"column":8},"end":{"line":143,"column":9}}],"line":141},"28":{"loc":{"start":{"line":149,"column":16},"end":{"line":151,"column":17}},"type":"if","locations":[{"start":{"line":149,"column":16},"end":{"line":151,"column":17}},{"start":{"line":149,"column":16},"end":{"line":151,"column":17}}],"line":149},"29":{"loc":{"start":{"line":157,"column":8},"end":{"line":159,"column":9}},"type":"if","locations":[{"start":{"line":157,"column":8},"end":{"line":159,"column":9}},{"start":{"line":157,"column":8},"end":{"line":159,"column":9}}],"line":157},"30":{"loc":{"start":{"line":160,"column":8},"end":{"line":162,"column":9}},"type":"if","locations":[{"start":{"line":160,"column":8},"end":{"line":162,"column":9}},{"start":{"line":160,"column":8},"end":{"line":162,"column":9}}],"line":160},"31":{"loc":{"start":{"line":169,"column":4},"end":{"line":171,"column":5}},"type":"if","locations":[{"start":{"line":169,"column":4},"end":{"line":171,"column":5}},{"start":{"line":169,"column":4},"end":{"line":171,"column":5}}],"line":169},"32":{"loc":{"start":{"line":172,"column":4},"end":{"line":174,"column":5}},"type":"if","locations":[{"start":{"line":172,"column":4},"end":{"line":174,"column":5}},{"start":{"line":172,"column":4},"end":{"line":174,"column":5}}],"line":172},"33":{"loc":{"start":{"line":175,"column":4},"end":{"line":177,"column":5}},"type":"if","locations":[{"start":{"line":175,"column":4},"end":{"line":177,"column":5}},{"start":{"line":175,"column":4},"end":{"line":177,"column":5}}],"line":175},"34":{"loc":{"start":{"line":178,"column":4},"end":{"line":183,"column":5}},"type":"if","locations":[{"start":{"line":178,"column":4},"end":{"line":183,"column":5}},{"start":{"line":178,"column":4},"end":{"line":183,"column":5}}],"line":178},"35":{"loc":{"start":{"line":187,"column":12},"end":{"line":189,"column":13}},"type":"if","locations":[{"start":{"line":187,"column":12},"end":{"line":189,"column":13}},{"start":{"line":187,"column":12},"end":{"line":189,"column":13}}],"line":187},"36":{"loc":{"start":{"line":226,"column":58},"end":{"line":226,"column":74}},"type":"binary-expr","locations":[{"start":{"line":226,"column":58},"end":{"line":226,"column":68}},{"start":{"line":226,"column":72},"end":{"line":226,"column":74}}],"line":226},"37":{"loc":{"start":{"line":232,"column":8},"end":{"line":234,"column":9}},"type":"if","locations":[{"start":{"line":232,"column":8},"end":{"line":234,"column":9}},{"start":{"line":232,"column":8},"end":{"line":234,"column":9}}],"line":232},"38":{"loc":{"start":{"line":250,"column":20},"end":{"line":250,"column":38}},"type":"binary-expr","locations":[{"start":{"line":250,"column":20},"end":{"line":250,"column":32}},{"start":{"line":250,"column":36},"end":{"line":250,"column":38}}],"line":250},"39":{"loc":{"start":{"line":251,"column":18},"end":{"line":251,"column":34}},"type":"binary-expr","locations":[{"start":{"line":251,"column":18},"end":{"line":251,"column":28}},{"start":{"line":251,"column":32},"end":{"line":251,"column":34}}],"line":251},"40":{"loc":{"start":{"line":272,"column":18},"end":{"line":272,"column":34}},"type":"binary-expr","locations":[{"start":{"line":272,"column":18},"end":{"line":272,"column":28}},{"start":{"line":272,"column":32},"end":{"line":272,"column":34}}],"line":272},"41":{"loc":{"start":{"line":276,"column":8},"end":{"line":325,"column":9}},"type":"if","locations":[{"start":{"line":276,"column":8},"end":{"line":325,"column":9}},{"start":{"line":276,"column":8},"end":{"line":325,"column":9}}],"line":276},"42":{"loc":{"start":{"line":288,"column":13},"end":{"line":325,"column":9}},"type":"if","locations":[{"start":{"line":288,"column":13},"end":{"line":325,"column":9}},{"start":{"line":288,"column":13},"end":{"line":325,"column":9}}],"line":288},"43":{"loc":{"start":{"line":292,"column":12},"end":{"line":305,"column":13}},"type":"if","locations":[{"start":{"line":292,"column":12},"end":{"line":305,"column":13}},{"start":{"line":292,"column":12},"end":{"line":305,"column":13}}],"line":292},"44":{"loc":{"start":{"line":298,"column":17},"end":{"line":305,"column":13}},"type":"if","locations":[{"start":{"line":298,"column":17},"end":{"line":305,"column":13}},{"start":{"line":298,"column":17},"end":{"line":305,"column":13}}],"line":298},"45":{"loc":{"start":{"line":309,"column":12},"end":{"line":324,"column":13}},"type":"if","locations":[{"start":{"line":309,"column":12},"end":{"line":324,"column":13}},{"start":{"line":309,"column":12},"end":{"line":324,"column":13}}],"line":309},"46":{"loc":{"start":{"line":338,"column":8},"end":{"line":340,"column":9}},"type":"if","locations":[{"start":{"line":338,"column":8},"end":{"line":340,"column":9}},{"start":{"line":338,"column":8},"end":{"line":340,"column":9}}],"line":338},"47":{"loc":{"start":{"line":342,"column":8},"end":{"line":351,"column":9}},"type":"if","locations":[{"start":{"line":342,"column":8},"end":{"line":351,"column":9}},{"start":{"line":342,"column":8},"end":{"line":351,"column":9}}],"line":342},"48":{"loc":{"start":{"line":344,"column":12},"end":{"line":349,"column":13}},"type":"if","locations":[{"start":{"line":344,"column":12},"end":{"line":349,"column":13}},{"start":{"line":344,"column":12},"end":{"line":349,"column":13}}],"line":344},"49":{"loc":{"start":{"line":352,"column":8},"end":{"line":354,"column":9}},"type":"if","locations":[{"start":{"line":352,"column":8},"end":{"line":354,"column":9}},{"start":{"line":352,"column":8},"end":{"line":354,"column":9}}],"line":352},"50":{"loc":{"start":{"line":355,"column":8},"end":{"line":357,"column":9}},"type":"if","locations":[{"start":{"line":355,"column":8},"end":{"line":357,"column":9}},{"start":{"line":355,"column":8},"end":{"line":357,"column":9}}],"line":355}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":3,"8":3,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":1,"97":1,"98":8,"99":0,"100":8,"101":0,"102":8,"103":0,"104":8,"105":8,"106":0,"107":8,"108":3,"109":3,"110":3,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":8,"120":8,"121":8,"122":577,"123":8,"124":8,"125":8,"126":8,"127":8,"128":8,"129":18,"130":0,"131":18,"132":0,"133":0,"134":0,"135":8,"136":1,"137":10,"138":10,"139":10,"140":10,"141":10,"142":8,"143":8,"144":4,"145":4,"146":4,"147":8,"148":10,"149":1,"150":10,"151":10,"152":10,"153":10,"154":10,"155":22,"156":22,"157":6,"158":6,"159":1,"160":1,"161":1,"162":16,"163":2,"164":2,"165":2,"166":2,"167":0,"168":0,"169":0,"170":0,"171":14,"172":14,"173":14,"174":14,"175":6,"176":6,"177":6,"178":14,"179":0,"180":10,"181":10,"182":1,"183":20,"184":20,"185":44,"186":44,"187":20,"188":45,"189":0,"190":45,"191":45,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":45,"199":6,"200":39,"201":38,"202":1,"203":1},"f":{"0":3,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":8,"17":3,"18":0,"19":0,"20":0,"21":0,"22":577,"23":18,"24":0,"25":10,"26":8,"27":4,"28":10,"29":22,"30":1,"31":6,"32":20,"33":44,"34":45,"35":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,8],"32":[0,8],"33":[0,8],"34":[8,0],"35":[3,0],"36":[8,0],"37":[0,18],"38":[10,0],"39":[10,0],"40":[10,0],"41":[6,16],"42":[2,14],"43":[2,0],"44":[0,0],"45":[14,0],"46":[0,45],"47":[0,45],"48":[0,0],"49":[6,39],"50":[38,1]},"inputSourceMap":{"version":3,"file":"C:/Users/myland/code/scryptlib/src/contract.ts","sources":["C:/Users/myland/code/scryptlib/src/contract.ts"],"names":[],"mappings":"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","sourcesContent":["import { ABICoder, Arguments, FunctionCall, Script } from './abi';\nimport { serializeState, State } from './serializer';\nimport { bsv, DEFAULT_FLAGS, resolveType, path2uri, isStructType, getStructNameByType, isArrayType, arrayTypeAndSize, stripAnsi } from './utils';\nimport { Struct, SupportedParamType, StructObject, ScryptType, VariableType, Int, Bytes, BasicScryptType, ValueType, TypeResolver, SigHashPreimage, SigHashType } from './scryptTypes';\nimport { StructEntity, ABIEntity, OpCode, CompileResult, desc2CompileResult, AliasEntity, Pos } from './compilerWrapper';\n\nexport interface TxContext {\n  tx?: any;\n  inputIndex?: number;\n  inputSatoshis?: number;\n  opReturn?: string;\n}\n\n\nexport type VerifyError = string;\n\n\nexport interface VerifyResult {\n  success: boolean;\n  error?: VerifyError;\n}\n\nexport interface ContractDescription {\n  version: number;\n  compilerVersion: string;\n  buildType: string;\n  contract: string;\n  md5: string;\n  structs: Array<StructEntity>;\n  alias: Array<AliasEntity>\n  abi: Array<ABIEntity>;\n  asm: string;\n  file: string;\n  sources: Array<string>;\n  sourceMap: Array<string>;\n}\n\nexport type AsmVarValues = { [key: string]: string }\nexport type StepIndex = number;\n\nexport class AbstractContract {\n\n  public static contractName: string;\n  public static abi: ABIEntity[];\n  public static asm: string;\n  public static abiCoder: ABICoder;\n  public static opcodes?: OpCode[];\n  public static file: string;\n  public static structs: StructEntity[];\n  public static types: Record<string, typeof ScryptType>;\n  public static asmContract: boolean;\n\n\n  scriptedConstructor: FunctionCall;\n  calls: Map<string, FunctionCall> = new Map();\n  asmArgs: AsmVarValues | null = null;\n\n  get lockingScript(): Script {\n    let lsASM = this.scriptedConstructor.toASM();\n    if (typeof this._dataPart === 'string') {\n      const dp = this._dataPart.trim();\n      if (dp) {\n        lsASM += ` OP_RETURN ${dp}`;\n      } else {\n        lsASM += ' OP_RETURN';  // note there is no space after op_return\n      }\n    }\n    return bsv.Script.fromASM(lsASM.trim());\n  }\n\n  private _txContext?: TxContext;\n\n  set txContext(txContext: TxContext) {\n    this._txContext = txContext;\n  }\n\n  get txContext(): TxContext {\n    return this._txContext;\n  }\n\n  // replace assembly variables with assembly values\n  replaceAsmVars(asmVarValues: AsmVarValues): void {\n    this.asmArgs = asmVarValues;\n    this.scriptedConstructor.init(asmVarValues);\n  }\n\n  static findSrcInfo(interpretStates: any[], opcodes: OpCode[], stepIndex: number, opcodesIndex: number): OpCode | undefined {\n    while (--stepIndex > 0 && --opcodesIndex > 0) {\n      if (opcodes[opcodesIndex].pos && opcodes[opcodesIndex].pos.file !== 'std' && opcodes[opcodesIndex].pos.line > 0 && interpretStates[stepIndex].step.fExec) {\n        return opcodes[opcodesIndex];\n      }\n    }\n  }\n\n\n  getTypeClassByType(type: string): typeof ScryptType {\n    const types: typeof ScryptType[] = Object.getPrototypeOf(this).constructor.types;\n\n    if (isStructType(type)) {\n      const structName = getStructNameByType(type);\n      if (Object.prototype.hasOwnProperty.call(types, structName)) {\n        return types[structName];\n      }\n    } else {\n      return types[type];\n    }\n  }\n\n  run_verify(unlockingScriptASM: string, txContext?: TxContext, args?: Arguments): VerifyResult {\n    const txCtx: TxContext = Object.assign({}, this._txContext || {}, txContext || {});\n\n    const us = bsv.Script.fromASM(unlockingScriptASM.trim());\n    const ls = this.lockingScript;\n    const tx = txCtx.tx;\n    const inputIndex = txCtx.inputIndex || 0;\n    const inputSatoshis = txCtx.inputSatoshis || 0;\n\n\n    bsv.Script.Interpreter.MAX_SCRIPT_ELEMENT_SIZE = Number.MAX_SAFE_INTEGER;\n    bsv.Script.Interpreter.MAXIMUM_ELEMENT_SIZE = Number.MAX_SAFE_INTEGER;\n\n\n    const bsi = bsv.Script.Interpreter();\n\n    let stepCounter: StepIndex = 0;\n    const interpretStates: { step: any, mainstack: any, altstack: any }[] = [];\n    bsi.stepListener = function (step: any, stack: any[], altstack: any[]) {\n      interpretStates.push({ mainstack: stack, altstack: altstack, step: step });\n      stepCounter++;\n    };\n\n\n    const opcodes: OpCode[] = Object.getPrototypeOf(this).constructor.opcodes;\n\n    const result = bsi.verify(us, ls, tx, inputIndex, DEFAULT_FLAGS, new bsv.crypto.BN(inputSatoshis));\n\n    let error = result ? '' : `VerifyError: ${bsi.errstr}`;\n\n\n\n    // some time there is no opcodes, such as when sourcemap flag is closeed. \n    if (opcodes) {\n      const offset = unlockingScriptASM.trim().split(' ').length;\n      // the complete script may have op_return and data, but compiled output does not have it. So we need to make sure the index is in boundary.\n\n      const lastStepIndex = stepCounter - 1;\n\n      if (typeof this._dataPart === 'string') {\n        opcodes.push({ opcode: 'OP_RETURN', stack: [] });\n        const dp = this._dataPart.trim();\n        if (dp) {\n          dp.split(' ').forEach(data => {\n            opcodes.push({ opcode: data, stack: [] });\n          });\n        }\n      }\n\n      const opcodeIndex = lastStepIndex - offset;\n\n\n      if (!result && opcodes[opcodeIndex]) {\n\n        const opcode = opcodes[opcodeIndex];\n\n        if (!opcode.pos || opcode.pos.file === 'std') {\n\n          const srcInfo = AbstractContract.findSrcInfo(interpretStates, opcodes, lastStepIndex, opcodeIndex);\n\n          if (srcInfo) {\n            opcode.pos = srcInfo.pos;\n          }\n        }\n\n        // in vscode termianal need to use [:] to jump to file line, but here need to use [#] to jump to file line in output channel.\n        if (opcode.pos) {\n          error = `VerifyError: ${bsi.errstr} \\n\\t[Go to Source](${path2uri(opcode.pos.file)}#${opcode.pos.line})  fails at ${opcode.opcode}\\n`;\n\n          if (args && ['OP_CHECKSIG', 'OP_CHECKSIGVERIFY', 'OP_CHECKMULTISIG', 'OP_CHECKMULTISIGVERIFY'].includes(opcode.opcode)) {\n            if (!txCtx) {\n              throw new Error('should provide txContext when verify');\n            } if (!tx) {\n              throw new Error('should provide txContext.tx when verify');\n            }\n          }\n        }\n      }\n    }\n\n    return {\n      success: result,\n      error: error\n    };\n  }\n\n  private _dataPart: string | undefined;\n\n  set dataPart(dataInScript: Script | undefined) {\n    throw new Error('Setter for dataPart is not available. Please use: setDataPart() instead');\n  }\n\n  get dataPart(): Script | undefined {\n    return this._dataPart !== undefined ? bsv.Script.fromASM(this._dataPart) : undefined;\n  }\n\n  setDataPart(state: State | string): void {\n    if (typeof state === 'string') {\n      // TODO: validate hex string\n      this._dataPart = state.trim();\n    } else {\n      this._dataPart = serializeState(state);\n    }\n  }\n\n  get codePart(): Script {\n    const codeASM = this.scriptedConstructor.toASM();\n    // note: do not trim the trailing space\n    return bsv.Script.fromASM(codeASM + ' OP_RETURN');\n  }\n\n  static getAsmVars(contractAsm, instAsm): AsmVarValues | null {\n    const regex = /(\\$\\S+)/g;\n    const vars = contractAsm.match(regex);\n    if (vars === null) {\n      return null;\n    }\n    const asmArray = contractAsm.split(/\\s/g);\n    const lsASMArray = instAsm.split(/\\s/g);\n    const result = {};\n    for (let i = 0; i < asmArray.length; i++) {\n      for (let j = 0; j < vars.length; j++) {\n        if (vars[j] === asmArray[i]) {\n          result[vars[j].replace('$', '')] = lsASMArray[i];\n        }\n      }\n    }\n    return result;\n  }\n\n  public arguments(pubFuncName: string): Arguments {\n    if (pubFuncName === 'constructor') {\n      return this.scriptedConstructor.args;\n    }\n\n    if (this.calls.has(pubFuncName)) {\n      return this.calls.get(pubFuncName).args;\n    }\n\n    return [];\n  }\n}\n\n\nconst invalidMethodName = ['arguments', 'setDataPart', 'run_verify', 'replaceAsmVars', 'asmVars', 'asmArguments', 'dataPart', 'lockingScript', 'txContext'];\n\nexport function buildContractClass(desc: CompileResult | ContractDescription): any {\n\n  if (!desc.contract) {\n    throw new Error('missing field `contract` in description');\n  }\n\n  if (!desc.abi) {\n    throw new Error('missing field `abi` in description');\n  }\n\n  if (!desc.asm) {\n    throw new Error('missing field `asm` in description');\n  }\n\n  if (!desc['errors']) {\n    desc = desc2CompileResult(desc as ContractDescription);\n  } else {\n    desc = desc as CompileResult;\n  }\n\n\n\n  const ContractClass = class Contract extends AbstractContract {\n    constructor(...ctorParams: SupportedParamType[]) {\n      super();\n      if (!Contract.asmContract) {\n        this.scriptedConstructor = Contract.abiCoder.encodeConstructorCall(this, Contract.asm, ...ctorParams);\n      }\n    }\n\n    //When create a contract instance using UTXO, \n    //use fromHex or fromASM because you do not know the parameters of constructor.\n\n    /**\n     * Create a contract instance using UTXO asm\n     * @param hex \n     */\n    static fromASM(asm: string) {\n      Contract.asmContract = true;\n      const obj = new this();\n      Contract.asmContract = false;\n      obj.scriptedConstructor = Contract.abiCoder.encodeConstructorCallFromASM(obj, Contract.asm, asm);\n      return obj;\n    }\n\n    /**\n     * Create a contract instance using UTXO hex\n     * @param hex \n     */\n    static fromHex(hex: string) {\n      return ContractClass.fromASM((new bsv.Script(hex)).toASM());\n    }\n\n    /**\n     * Get the parameter of the constructor and inline asm vars,\n     * all values is hex string, need convert it to number or bytes on using\n     */\n    get asmVars(): AsmVarValues | null {\n      return AbstractContract.getAsmVars(Contract.asm, this.scriptedConstructor.toASM());\n    }\n\n    get asmArguments(): AsmVarValues | null {\n      //TODO: @deprecate AbstractContract.getAsmVars , using asmArguments\n\n      return null;\n    }\n\n  };\n\n  ContractClass.contractName = desc.contract;\n  ContractClass.abi = desc.abi;\n  ContractClass.asm = desc.asm.map(item => item['opcode'].trim()).join(' ');\n  ContractClass.abiCoder = new ABICoder(desc.abi, desc.alias || []);\n  ContractClass.opcodes = desc.asm;\n  ContractClass.file = desc.file;\n  ContractClass.structs = desc.structs;\n  ContractClass.types = buildTypeClasses(desc);\n\n\n  ContractClass.abi.forEach(entity => {\n    if (invalidMethodName.indexOf(entity.name) > -1) {\n      throw new Error(`Method name [${entity.name}] is used by scryptlib now, Pelease change you contract method name!`);\n    }\n    ContractClass.prototype[entity.name] = function (...args: SupportedParamType[]): FunctionCall {\n      const call = ContractClass.abiCoder.encodePubFunctionCall(this, entity.name, args);\n      this.calls.set(entity.name, call);\n      return call;\n    };\n  });\n\n  return ContractClass;\n}\n\n\n\n/**\n * @deprecated use buildTypeClasses\n * @param desc CompileResult or ContractDescription\n */\nexport function buildStructsClass(desc: CompileResult | ContractDescription): Record<string, typeof Struct> {\n\n  const structTypes: Record<string, typeof Struct> = {};\n\n  const structs: StructEntity[] = desc.structs || [];\n  const alias: AliasEntity[] = desc.alias || [];\n  const finalTypeResolver = buildTypeResolver(alias);\n  structs.forEach(element => {\n    const name = element.name;\n\n    Object.assign(structTypes, {\n      [name]: class extends Struct {\n        constructor(o: StructObject) {\n          super(o);\n          this._typeResolver = finalTypeResolver; //we should assign this before bind\n          this.bind();\n        }\n      }\n    });\n\n    structTypes[name].structAst = element;\n  });\n\n  return structTypes;\n}\n\n\n\nexport function buildTypeClasses(desc: CompileResult | ContractDescription): Record<string, typeof ScryptType> {\n\n  const structClasses = buildStructsClass(desc);\n  const aliasTypes: Record<string, typeof ScryptType> = {};\n  const alias: AliasEntity[] = desc.alias || [];\n  const finalTypeResolver = buildTypeResolver(alias);\n  alias.forEach(element => {\n    const finalType = finalTypeResolver(element.name);\n    if (isStructType(finalType)) {\n      const type = getStructNameByType(finalType);\n      Object.assign(aliasTypes, {\n        [element.name]: class extends structClasses[type] {\n          constructor(o: StructObject) {\n            super(o);\n            this._type = element.name;\n            this._typeResolver = finalTypeResolver;\n          }\n        }\n      });\n    } else if (isArrayType(finalType)) {\n      //TODO: just return some class, but they are useless\n      const [elemTypeName, _] = arrayTypeAndSize(finalType);\n\n      const C = BasicScryptType[elemTypeName];\n      if (C) {\n        Object.assign(aliasTypes, {\n          [element.name]: class extends Array<typeof C> { }\n        });\n      } else if (isStructType(elemTypeName)) {\n        const type = getStructNameByType(elemTypeName);\n        const C = structClasses[type];\n        Object.assign(aliasTypes, {\n          [element.name]: class extends Array<typeof C> { }\n        });\n      }\n\n    } else {\n      const C = BasicScryptType[finalType];\n      if (C) {\n        const Class = C as typeof ScryptType;\n        const aliasClass = class extends Class {\n          constructor(o: ValueType) {\n            super(o);\n            this._type = element.name;\n            this._typeResolver = finalTypeResolver;\n          }\n        };\n\n        Object.assign(aliasTypes, {\n          [element.name]: aliasClass\n        });\n      } else {\n        throw new Error(`can not resolve type alias ${element.name} ${element.type}`);\n      }\n    }\n  });\n\n  Object.assign(aliasTypes, structClasses);\n\n  return aliasTypes;\n}\n\n\n\nexport function buildTypeResolver(alias: AliasEntity[]): TypeResolver {\n  const resolvedTypes: Record<string, string> = {};\n  alias.forEach(element => {\n    const finalType = resolveType(alias, element.name);\n    resolvedTypes[element.name] = finalType;\n  });\n  return (alias: string) => {\n\n    if (isStructType(alias)) {\n      alias = getStructNameByType(alias);\n    }\n\n    let arrayType = '';\n    if (isArrayType(alias)) {\n      const [elemTypeName, sizes] = arrayTypeAndSize(alias);\n\n      if (isStructType(elemTypeName)) {\n        alias = getStructNameByType(elemTypeName);\n      } else {\n        alias = elemTypeName;\n      }\n\n      arrayType = sizes.map(size => `[${size}]`).join('');\n    }\n\n\n    if (BasicScryptType[alias]) {\n      return `${alias}${arrayType}`;\n    }\n\n    if (resolvedTypes[alias]) {\n      return `${resolvedTypes[alias]}${arrayType}`;\n    }\n\n    return `struct ${alias} {}${arrayType}`;\n  };\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"05338b1293973e73390c8cb05d7714e73d18fe27"},"C:\\Users\\myland\\code\\scryptlib\\src\\serializer.ts":{"path":"C:\\Users\\myland\\code\\scryptlib\\src\\serializer.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":113}},"2":{"start":{"line":4,"column":16},"end":{"line":4,"column":34}},"3":{"start":{"line":5,"column":15},"end":{"line":5,"column":33}},"4":{"start":{"line":6,"column":15},"end":{"line":6,"column":33}},"5":{"start":{"line":7,"column":11},"end":{"line":7,"column":32}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":29}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":29}},"8":{"start":{"line":12,"column":4},"end":{"line":12,"column":41}},"9":{"start":{"line":15,"column":16},"end":{"line":15,"column":25}},"10":{"start":{"line":16,"column":4},"end":{"line":18,"column":5}},"11":{"start":{"line":17,"column":8},"end":{"line":17,"column":20}},"12":{"start":{"line":19,"column":4},"end":{"line":19,"column":58}},"13":{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},"14":{"start":{"line":23,"column":8},"end":{"line":23,"column":20}},"15":{"start":{"line":25,"column":16},"end":{"line":25,"column":40}},"16":{"start":{"line":26,"column":4},"end":{"line":26,"column":31}},"17":{"start":{"line":30,"column":4},"end":{"line":30,"column":18}},"18":{"start":{"line":33,"column":17},"end":{"line":33,"column":28}},"19":{"start":{"line":34,"column":4},"end":{"line":48,"column":5}},"20":{"start":{"line":35,"column":8},"end":{"line":35,"column":41}},"21":{"start":{"line":37,"column":9},"end":{"line":48,"column":5}},"22":{"start":{"line":38,"column":8},"end":{"line":38,"column":40}},"23":{"start":{"line":40,"column":9},"end":{"line":48,"column":5}},"24":{"start":{"line":41,"column":8},"end":{"line":41,"column":40}},"25":{"start":{"line":43,"column":9},"end":{"line":48,"column":5}},"26":{"start":{"line":44,"column":8},"end":{"line":44,"column":43}},"27":{"start":{"line":47,"column":8},"end":{"line":47,"column":42}},"28":{"start":{"line":51,"column":4},"end":{"line":53,"column":5}},"29":{"start":{"line":52,"column":8},"end":{"line":52,"column":32}},"30":{"start":{"line":54,"column":4},"end":{"line":56,"column":5}},"31":{"start":{"line":55,"column":8},"end":{"line":55,"column":31}},"32":{"start":{"line":57,"column":4},"end":{"line":62,"column":5}},"33":{"start":{"line":58,"column":8},"end":{"line":58,"column":31}},"34":{"start":{"line":61,"column":8},"end":{"line":61,"column":33}},"35":{"start":{"line":66,"column":17},"end":{"line":66,"column":19}},"36":{"start":{"line":67,"column":17},"end":{"line":67,"column":35}},"37":{"start":{"line":68,"column":4},"end":{"line":77,"column":5}},"38":{"start":{"line":69,"column":8},"end":{"line":76,"column":9}},"39":{"start":{"line":70,"column":24},"end":{"line":70,"column":63}},"40":{"start":{"line":71,"column":12},"end":{"line":71,"column":27}},"41":{"start":{"line":74,"column":24},"end":{"line":74,"column":45}},"42":{"start":{"line":75,"column":12},"end":{"line":75,"column":27}},"43":{"start":{"line":78,"column":19},"end":{"line":78,"column":49}},"44":{"start":{"line":79,"column":22},"end":{"line":79,"column":36}},"45":{"start":{"line":80,"column":21},"end":{"line":80,"column":41}},"46":{"start":{"line":82,"column":16},"end":{"line":82,"column":53}},"47":{"start":{"line":83,"column":4},"end":{"line":83,"column":38}},"48":{"start":{"line":85,"column":0},"end":{"line":85,"column":40}},"49":{"start":{"line":88,"column":8},"end":{"line":88,"column":21}},"50":{"start":{"line":91,"column":8},"end":{"line":107,"column":9}},"51":{"start":{"line":92,"column":12},"end":{"line":92,"column":29}},"52":{"start":{"line":94,"column":13},"end":{"line":107,"column":9}},"53":{"start":{"line":95,"column":12},"end":{"line":95,"column":29}},"54":{"start":{"line":97,"column":13},"end":{"line":107,"column":9}},"55":{"start":{"line":98,"column":12},"end":{"line":98,"column":30}},"56":{"start":{"line":100,"column":13},"end":{"line":107,"column":9}},"57":{"start":{"line":101,"column":12},"end":{"line":101,"column":63}},"58":{"start":{"line":104,"column":12},"end":{"line":105,"column":79}},"59":{"start":{"line":105,"column":16},"end":{"line":105,"column":79}},"60":{"start":{"line":106,"column":12},"end":{"line":106,"column":56}},"61":{"start":{"line":110,"column":8},"end":{"line":126,"column":9}},"62":{"start":{"line":111,"column":12},"end":{"line":111,"column":29}},"63":{"start":{"line":113,"column":13},"end":{"line":126,"column":9}},"64":{"start":{"line":114,"column":12},"end":{"line":114,"column":29}},"65":{"start":{"line":116,"column":13},"end":{"line":126,"column":9}},"66":{"start":{"line":117,"column":12},"end":{"line":117,"column":30}},"67":{"start":{"line":119,"column":13},"end":{"line":126,"column":9}},"68":{"start":{"line":120,"column":12},"end":{"line":120,"column":63}},"69":{"start":{"line":123,"column":12},"end":{"line":124,"column":79}},"70":{"start":{"line":124,"column":16},"end":{"line":124,"column":79}},"71":{"start":{"line":125,"column":12},"end":{"line":125,"column":48}},"72":{"start":{"line":129,"column":8},"end":{"line":129,"column":45}},"73":{"start":{"line":132,"column":8},"end":{"line":133,"column":80}},"74":{"start":{"line":133,"column":12},"end":{"line":133,"column":80}},"75":{"start":{"line":134,"column":8},"end":{"line":134,"column":43}},"76":{"start":{"line":137,"column":8},"end":{"line":139,"column":9}},"77":{"start":{"line":138,"column":12},"end":{"line":138,"column":75}},"78":{"start":{"line":140,"column":8},"end":{"line":142,"column":9}},"79":{"start":{"line":141,"column":12},"end":{"line":141,"column":22}},"80":{"start":{"line":143,"column":8},"end":{"line":143,"column":41}},"81":{"start":{"line":149,"column":4},"end":{"line":154,"column":5}},"82":{"start":{"line":150,"column":8},"end":{"line":150,"column":31}},"83":{"start":{"line":153,"column":8},"end":{"line":153,"column":35}},"84":{"start":{"line":155,"column":19},"end":{"line":155,"column":32}},"85":{"start":{"line":156,"column":19},"end":{"line":156,"column":21}},"86":{"start":{"line":157,"column":16},"end":{"line":157,"column":29}},"87":{"start":{"line":159,"column":4},"end":{"line":167,"column":5}},"88":{"start":{"line":159,"column":17},"end":{"line":159,"column":24}},"89":{"start":{"line":160,"column":26},"end":{"line":160,"column":45}},"90":{"start":{"line":161,"column":8},"end":{"line":166,"column":9}},"91":{"start":{"line":162,"column":12},"end":{"line":162,"column":18}},"92":{"start":{"line":165,"column":12},"end":{"line":165,"column":51}},"93":{"start":{"line":169,"column":4},"end":{"line":171,"column":5}},"94":{"start":{"line":170,"column":8},"end":{"line":170,"column":22}},"95":{"start":{"line":174,"column":4},"end":{"line":179,"column":5}},"96":{"start":{"line":175,"column":8},"end":{"line":175,"column":17}},"97":{"start":{"line":178,"column":8},"end":{"line":178,"column":17}},"98":{"start":{"line":180,"column":17},"end":{"line":180,"column":36}},"99":{"start":{"line":181,"column":4},"end":{"line":207,"column":5}},"100":{"start":{"line":181,"column":17},"end":{"line":181,"column":18}},"101":{"start":{"line":182,"column":20},"end":{"line":182,"column":27}},"102":{"start":{"line":183,"column":8},"end":{"line":185,"column":9}},"103":{"start":{"line":184,"column":12},"end":{"line":184,"column":18}},"104":{"start":{"line":186,"column":20},"end":{"line":186,"column":31}},"105":{"start":{"line":187,"column":8},"end":{"line":206,"column":9}},"106":{"start":{"line":188,"column":12},"end":{"line":188,"column":45}},"107":{"start":{"line":190,"column":13},"end":{"line":206,"column":9}},"108":{"start":{"line":191,"column":12},"end":{"line":191,"column":44}},"109":{"start":{"line":193,"column":13},"end":{"line":206,"column":9}},"110":{"start":{"line":194,"column":12},"end":{"line":199,"column":13}},"111":{"start":{"line":195,"column":16},"end":{"line":195,"column":48}},"112":{"start":{"line":198,"column":16},"end":{"line":198,"column":48}},"113":{"start":{"line":201,"column":13},"end":{"line":206,"column":9}},"114":{"start":{"line":202,"column":12},"end":{"line":202,"column":44}},"115":{"start":{"line":205,"column":12},"end":{"line":205,"column":41}},"116":{"start":{"line":208,"column":4},"end":{"line":208,"column":15}},"117":{"start":{"line":210,"column":0},"end":{"line":210,"column":44}}},"fnMap":{"0":{"name":"serializeBool","decl":{"start":{"line":11,"column":9},"end":{"line":11,"column":22}},"loc":{"start":{"line":11,"column":29},"end":{"line":13,"column":1}},"line":11},"1":{"name":"serializeInt","decl":{"start":{"line":14,"column":9},"end":{"line":14,"column":21}},"loc":{"start":{"line":14,"column":25},"end":{"line":20,"column":1}},"line":14},"2":{"name":"serializeString","decl":{"start":{"line":21,"column":9},"end":{"line":21,"column":24}},"loc":{"start":{"line":21,"column":30},"end":{"line":27,"column":1}},"line":21},"3":{"name":"serializeBytes","decl":{"start":{"line":29,"column":9},"end":{"line":29,"column":23}},"loc":{"start":{"line":29,"column":32},"end":{"line":31,"column":1}},"line":29},"4":{"name":"serializeWithSchema","decl":{"start":{"line":32,"column":9},"end":{"line":32,"column":28}},"loc":{"start":{"line":32,"column":61},"end":{"line":49,"column":1}},"line":32},"5":{"name":"serialize","decl":{"start":{"line":50,"column":9},"end":{"line":50,"column":18}},"loc":{"start":{"line":50,"column":22},"end":{"line":63,"column":1}},"line":50},"6":{"name":"serializeState","decl":{"start":{"line":65,"column":9},"end":{"line":65,"column":23}},"loc":{"start":{"line":65,"column":90},"end":{"line":84,"column":1}},"line":65},"7":{"name":"(anonymous_7)","decl":{"start":{"line":87,"column":4},"end":{"line":87,"column":5}},"loc":{"start":{"line":87,"column":20},"end":{"line":89,"column":5}},"line":87},"8":{"name":"(anonymous_8)","decl":{"start":{"line":90,"column":4},"end":{"line":90,"column":5}},"loc":{"start":{"line":90,"column":15},"end":{"line":108,"column":5}},"line":90},"9":{"name":"(anonymous_9)","decl":{"start":{"line":109,"column":4},"end":{"line":109,"column":5}},"loc":{"start":{"line":109,"column":15},"end":{"line":127,"column":5}},"line":109},"10":{"name":"(anonymous_10)","decl":{"start":{"line":128,"column":4},"end":{"line":128,"column":5}},"loc":{"start":{"line":128,"column":16},"end":{"line":130,"column":5}},"line":128},"11":{"name":"(anonymous_11)","decl":{"start":{"line":131,"column":4},"end":{"line":131,"column":5}},"loc":{"start":{"line":131,"column":12},"end":{"line":135,"column":5}},"line":131},"12":{"name":"(anonymous_12)","decl":{"start":{"line":136,"column":4},"end":{"line":136,"column":5}},"loc":{"start":{"line":136,"column":27},"end":{"line":144,"column":5}},"line":136},"13":{"name":"deserializeState","decl":{"start":{"line":147,"column":9},"end":{"line":147,"column":25}},"loc":{"start":{"line":147,"column":49},"end":{"line":209,"column":1}},"line":147}},"branchMap":{"0":{"loc":{"start":{"line":12,"column":11},"end":{"line":12,"column":40}},"type":"cond-expr","locations":[{"start":{"line":12,"column":18},"end":{"line":12,"column":27}},{"start":{"line":12,"column":30},"end":{"line":12,"column":40}}],"line":12},"1":{"loc":{"start":{"line":16,"column":4},"end":{"line":18,"column":5}},"type":"if","locations":[{"start":{"line":16,"column":4},"end":{"line":18,"column":5}},{"start":{"line":16,"column":4},"end":{"line":18,"column":5}}],"line":16},"2":{"loc":{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},{"start":{"line":22,"column":4},"end":{"line":24,"column":5}}],"line":22},"3":{"loc":{"start":{"line":32,"column":41},"end":{"line":32,"column":59}},"type":"default-arg","locations":[{"start":{"line":32,"column":50},"end":{"line":32,"column":59}}],"line":32},"4":{"loc":{"start":{"line":34,"column":4},"end":{"line":48,"column":5}},"type":"if","locations":[{"start":{"line":34,"column":4},"end":{"line":48,"column":5}},{"start":{"line":34,"column":4},"end":{"line":48,"column":5}}],"line":34},"5":{"loc":{"start":{"line":37,"column":9},"end":{"line":48,"column":5}},"type":"if","locations":[{"start":{"line":37,"column":9},"end":{"line":48,"column":5}},{"start":{"line":37,"column":9},"end":{"line":48,"column":5}}],"line":37},"6":{"loc":{"start":{"line":40,"column":9},"end":{"line":48,"column":5}},"type":"if","locations":[{"start":{"line":40,"column":9},"end":{"line":48,"column":5}},{"start":{"line":40,"column":9},"end":{"line":48,"column":5}}],"line":40},"7":{"loc":{"start":{"line":43,"column":9},"end":{"line":48,"column":5}},"type":"if","locations":[{"start":{"line":43,"column":9},"end":{"line":48,"column":5}},{"start":{"line":43,"column":9},"end":{"line":48,"column":5}}],"line":43},"8":{"loc":{"start":{"line":51,"column":4},"end":{"line":53,"column":5}},"type":"if","locations":[{"start":{"line":51,"column":4},"end":{"line":53,"column":5}},{"start":{"line":51,"column":4},"end":{"line":53,"column":5}}],"line":51},"9":{"loc":{"start":{"line":54,"column":4},"end":{"line":56,"column":5}},"type":"if","locations":[{"start":{"line":54,"column":4},"end":{"line":56,"column":5}},{"start":{"line":54,"column":4},"end":{"line":56,"column":5}}],"line":54},"10":{"loc":{"start":{"line":57,"column":4},"end":{"line":62,"column":5}},"type":"if","locations":[{"start":{"line":57,"column":4},"end":{"line":62,"column":5}},{"start":{"line":57,"column":4},"end":{"line":62,"column":5}}],"line":57},"11":{"loc":{"start":{"line":65,"column":31},"end":{"line":65,"column":68}},"type":"default-arg","locations":[{"start":{"line":65,"column":44},"end":{"line":65,"column":68}}],"line":65},"12":{"loc":{"start":{"line":65,"column":70},"end":{"line":65,"column":88}},"type":"default-arg","locations":[{"start":{"line":65,"column":79},"end":{"line":65,"column":88}}],"line":65},"13":{"loc":{"start":{"line":69,"column":8},"end":{"line":76,"column":9}},"type":"if","locations":[{"start":{"line":69,"column":8},"end":{"line":76,"column":9}},{"start":{"line":69,"column":8},"end":{"line":76,"column":9}}],"line":69},"14":{"loc":{"start":{"line":91,"column":8},"end":{"line":107,"column":9}},"type":"if","locations":[{"start":{"line":91,"column":8},"end":{"line":107,"column":9}},{"start":{"line":91,"column":8},"end":{"line":107,"column":9}}],"line":91},"15":{"loc":{"start":{"line":94,"column":13},"end":{"line":107,"column":9}},"type":"if","locations":[{"start":{"line":94,"column":13},"end":{"line":107,"column":9}},{"start":{"line":94,"column":13},"end":{"line":107,"column":9}}],"line":94},"16":{"loc":{"start":{"line":97,"column":13},"end":{"line":107,"column":9}},"type":"if","locations":[{"start":{"line":97,"column":13},"end":{"line":107,"column":9}},{"start":{"line":97,"column":13},"end":{"line":107,"column":9}}],"line":97},"17":{"loc":{"start":{"line":100,"column":13},"end":{"line":107,"column":9}},"type":"if","locations":[{"start":{"line":100,"column":13},"end":{"line":107,"column":9}},{"start":{"line":100,"column":13},"end":{"line":107,"column":9}}],"line":100},"18":{"loc":{"start":{"line":100,"column":17},"end":{"line":100,"column":86}},"type":"binary-expr","locations":[{"start":{"line":100,"column":17},"end":{"line":100,"column":49}},{"start":{"line":100,"column":53},"end":{"line":100,"column":86}}],"line":100},"19":{"loc":{"start":{"line":104,"column":12},"end":{"line":105,"column":79}},"type":"if","locations":[{"start":{"line":104,"column":12},"end":{"line":105,"column":79}},{"start":{"line":104,"column":12},"end":{"line":105,"column":79}}],"line":104},"20":{"loc":{"start":{"line":110,"column":8},"end":{"line":126,"column":9}},"type":"if","locations":[{"start":{"line":110,"column":8},"end":{"line":126,"column":9}},{"start":{"line":110,"column":8},"end":{"line":126,"column":9}}],"line":110},"21":{"loc":{"start":{"line":113,"column":13},"end":{"line":126,"column":9}},"type":"if","locations":[{"start":{"line":113,"column":13},"end":{"line":126,"column":9}},{"start":{"line":113,"column":13},"end":{"line":126,"column":9}}],"line":113},"22":{"loc":{"start":{"line":116,"column":13},"end":{"line":126,"column":9}},"type":"if","locations":[{"start":{"line":116,"column":13},"end":{"line":126,"column":9}},{"start":{"line":116,"column":13},"end":{"line":126,"column":9}}],"line":116},"23":{"loc":{"start":{"line":119,"column":13},"end":{"line":126,"column":9}},"type":"if","locations":[{"start":{"line":119,"column":13},"end":{"line":126,"column":9}},{"start":{"line":119,"column":13},"end":{"line":126,"column":9}}],"line":119},"24":{"loc":{"start":{"line":119,"column":17},"end":{"line":119,"column":86}},"type":"binary-expr","locations":[{"start":{"line":119,"column":17},"end":{"line":119,"column":49}},{"start":{"line":119,"column":53},"end":{"line":119,"column":86}}],"line":119},"25":{"loc":{"start":{"line":123,"column":12},"end":{"line":124,"column":79}},"type":"if","locations":[{"start":{"line":123,"column":12},"end":{"line":124,"column":79}},{"start":{"line":123,"column":12},"end":{"line":124,"column":79}}],"line":123},"26":{"loc":{"start":{"line":132,"column":8},"end":{"line":133,"column":80}},"type":"if","locations":[{"start":{"line":132,"column":8},"end":{"line":133,"column":80}},{"start":{"line":132,"column":8},"end":{"line":133,"column":80}}],"line":132},"27":{"loc":{"start":{"line":136,"column":13},"end":{"line":136,"column":25}},"type":"default-arg","locations":[{"start":{"line":136,"column":19},"end":{"line":136,"column":25}}],"line":136},"28":{"loc":{"start":{"line":137,"column":8},"end":{"line":139,"column":9}},"type":"if","locations":[{"start":{"line":137,"column":8},"end":{"line":139,"column":9}},{"start":{"line":137,"column":8},"end":{"line":139,"column":9}}],"line":137},"29":{"loc":{"start":{"line":140,"column":8},"end":{"line":142,"column":9}},"type":"if","locations":[{"start":{"line":140,"column":8},"end":{"line":142,"column":9}},{"start":{"line":140,"column":8},"end":{"line":142,"column":9}}],"line":140},"30":{"loc":{"start":{"line":147,"column":29},"end":{"line":147,"column":47}},"type":"default-arg","locations":[{"start":{"line":147,"column":38},"end":{"line":147,"column":47}}],"line":147},"31":{"loc":{"start":{"line":161,"column":8},"end":{"line":166,"column":9}},"type":"if","locations":[{"start":{"line":161,"column":8},"end":{"line":166,"column":9}},{"start":{"line":161,"column":8},"end":{"line":166,"column":9}}],"line":161},"32":{"loc":{"start":{"line":169,"column":4},"end":{"line":171,"column":5}},"type":"if","locations":[{"start":{"line":169,"column":4},"end":{"line":171,"column":5}},{"start":{"line":169,"column":4},"end":{"line":171,"column":5}}],"line":169},"33":{"loc":{"start":{"line":174,"column":4},"end":{"line":179,"column":5}},"type":"if","locations":[{"start":{"line":174,"column":4},"end":{"line":179,"column":5}},{"start":{"line":174,"column":4},"end":{"line":179,"column":5}}],"line":174},"34":{"loc":{"start":{"line":183,"column":8},"end":{"line":185,"column":9}},"type":"if","locations":[{"start":{"line":183,"column":8},"end":{"line":185,"column":9}},{"start":{"line":183,"column":8},"end":{"line":185,"column":9}}],"line":183},"35":{"loc":{"start":{"line":187,"column":8},"end":{"line":206,"column":9}},"type":"if","locations":[{"start":{"line":187,"column":8},"end":{"line":206,"column":9}},{"start":{"line":187,"column":8},"end":{"line":206,"column":9}}],"line":187},"36":{"loc":{"start":{"line":187,"column":12},"end":{"line":187,"column":57}},"type":"binary-expr","locations":[{"start":{"line":187,"column":12},"end":{"line":187,"column":29}},{"start":{"line":187,"column":33},"end":{"line":187,"column":57}}],"line":187},"37":{"loc":{"start":{"line":190,"column":13},"end":{"line":206,"column":9}},"type":"if","locations":[{"start":{"line":190,"column":13},"end":{"line":206,"column":9}},{"start":{"line":190,"column":13},"end":{"line":206,"column":9}}],"line":190},"38":{"loc":{"start":{"line":190,"column":17},"end":{"line":190,"column":60}},"type":"binary-expr","locations":[{"start":{"line":190,"column":17},"end":{"line":190,"column":33}},{"start":{"line":190,"column":37},"end":{"line":190,"column":60}}],"line":190},"39":{"loc":{"start":{"line":193,"column":13},"end":{"line":206,"column":9}},"type":"if","locations":[{"start":{"line":193,"column":13},"end":{"line":206,"column":9}},{"start":{"line":193,"column":13},"end":{"line":206,"column":9}}],"line":193},"40":{"loc":{"start":{"line":193,"column":17},"end":{"line":193,"column":60}},"type":"binary-expr","locations":[{"start":{"line":193,"column":17},"end":{"line":193,"column":33}},{"start":{"line":193,"column":37},"end":{"line":193,"column":60}}],"line":193},"41":{"loc":{"start":{"line":194,"column":12},"end":{"line":199,"column":13}},"type":"if","locations":[{"start":{"line":194,"column":12},"end":{"line":199,"column":13}},{"start":{"line":194,"column":12},"end":{"line":199,"column":13}}],"line":194},"42":{"loc":{"start":{"line":201,"column":13},"end":{"line":206,"column":9}},"type":"if","locations":[{"start":{"line":201,"column":13},"end":{"line":206,"column":9}},{"start":{"line":201,"column":13},"end":{"line":206,"column":9}}],"line":201}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":1,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":1},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0],"12":[0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0],"28":[0,0],"29":[0,0],"30":[0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/myland/code/scryptlib/src/serializer.ts","sources":["C:/Users/myland/code/scryptlib/src/serializer.ts"],"names":[],"mappings":";;;AAAA,mCAAgD;AAEhD,MAAM,MAAM,GAAG,WAAG,CAAC,MAAM,CAAC;AAC1B,MAAM,MAAM,GAAG,WAAG,CAAC,MAAM,CAAC;AAC1B,MAAM,EAAE,GAAG,WAAG,CAAC,MAAM,CAAC,EAAE,CAAC;AACzB,sFAAsF;AACzE,QAAA,gBAAgB,GAAG,CAAC,CAAC;AACrB,QAAA,gBAAgB,GAAG,CAAC,CAAC;AAElC,SAAS,aAAa,CAAC,IAAa;IAClC,OAAO,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC;AACvC,CAAC;AAED,SAAS,YAAY,CAAC,CAAkB;IACtC,MAAM,GAAG,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IACtB,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;QACd,OAAO,IAAI,CAAC;KACb;IACD,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACxD,CAAC;AAED,SAAS,eAAe,CAAC,GAAW;IAClC,IAAI,GAAG,KAAK,EAAE,EAAE;QACd,OAAO,IAAI,CAAC;KACb;IACD,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;IACrC,OAAO,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC7B,CAAC;AAED,iBAAiB;AACjB,SAAS,cAAc,CAAC,MAAc;IACpC,OAAO,MAAM,CAAC;AAChB,CAAC;AAKD,SAAS,mBAAmB,CAAC,KAAyB,EAAE,GAAoB,EAAE,SAA6B,SAAS;IAClH,MAAM,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;IACzB,IAAI,IAAI,KAAK,SAAS,EAAE;QACtB,OAAO,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;KAClC;SAAM,IAAI,IAAI,KAAK,QAAQ,EAAE;QAC5B,OAAO,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;KACjC;SAAM,IAAI,IAAI,KAAK,QAAQ,EAAE;QAC5B,OAAO,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;KACjC;SAAM,IAAI,IAAI,KAAK,QAAQ,EAAE;QAC5B,OAAO,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;KACpC;SAAM;QACL,OAAO,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;KACnC;AACH,CAAC;AAED,SAAS,SAAS,CAAC,CAAqC;IACtD,IAAI,OAAO,CAAC,KAAK,SAAS,EAAE;QAC1B,OAAO,aAAa,CAAC,CAAC,CAAC,CAAC;KACzB;IACD,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;QACzB,OAAO,YAAY,CAAC,CAAC,CAAC,CAAC;KACxB;IACD,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;QACzB,OAAO,YAAY,CAAC,CAAC,CAAC,CAAC;KACxB;SAAM;QACL,OAAO,cAAc,CAAC,CAAC,CAAC,CAAC;KAC1B;AACH,CAAC;AAED,2CAA2C;AAC3C,SAAgB,cAAc,CAAC,KAAyB,EAAE,aAAqB,wBAAgB,EAAE,SAA6B,SAAS;IACrI,MAAM,IAAI,GAAG,EAAE,CAAC;IAEhB,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAChC,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;QACtB,IAAI,MAAM,EAAE;YACV,MAAM,GAAG,GAAG,mBAAmB,CAAC,KAAK,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;YACpD,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAChB;aAAM;YACL,MAAM,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;YAClC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAChB;KACF;IAED,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IAC9C,MAAM,SAAS,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;IACjC,MAAM,QAAQ,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;IAEtC,qCAAqC;IACrC,MAAM,GAAG,GAAG,eAAO,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;IAC1C,OAAO,MAAM,CAAC,KAAK,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC;AACpC,CAAC;AArBD,wCAqBC;AAED,MAAM,OAAO;IAGX,YAAY,EAAE;QACZ,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;IACf,CAAC;IAED,QAAQ;QAEN,IAAI,IAAI,CAAC,EAAE,CAAC,SAAS,KAAK,MAAM,CAAC,IAAI,EAAE;YACrC,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC;SAClB;aAAM,IAAI,IAAI,CAAC,EAAE,CAAC,SAAS,KAAK,MAAM,CAAC,IAAI,EAAE;YAC5C,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC;SAClB;aAAM,IAAI,IAAI,CAAC,EAAE,CAAC,SAAS,KAAK,MAAM,CAAC,UAAU,EAAE;YAClD,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;SACnB;aAAM,IAAI,IAAI,CAAC,EAAE,CAAC,SAAS,IAAI,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE,CAAC,SAAS,IAAI,MAAM,CAAC,KAAK,EAAE;YAChF,OAAO,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,GAAG,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;SACpD;aAAM;YACL,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG;gBAAE,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;YACjF,OAAO,MAAM,CAAC,eAAO,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;SACrC;IAEH,CAAC;IAED,QAAQ;QACN,IAAI,IAAI,CAAC,EAAE,CAAC,SAAS,KAAK,MAAM,CAAC,IAAI,EAAE;YACrC,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC;SAClB;aAAM,IAAI,IAAI,CAAC,EAAE,CAAC,SAAS,KAAK,MAAM,CAAC,IAAI,EAAE;YAC5C,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC;SAClB;aAAM,IAAI,IAAI,CAAC,EAAE,CAAC,SAAS,KAAK,MAAM,CAAC,UAAU,EAAE;YAClD,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;SACnB;aAAM,IAAI,IAAI,CAAC,EAAE,CAAC,SAAS,IAAI,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE,CAAC,SAAS,IAAI,MAAM,CAAC,KAAK,EAAE;YAChF,OAAO,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,GAAG,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;SACpD;aAAM;YACL,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG;gBAAE,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;YACjF,OAAO,eAAO,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAW,CAAC;SACvC;IACH,CAAC;IAED,SAAS;QACP,OAAO,IAAI,CAAC,QAAQ,EAAE,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC;IACvC,CAAC;IAED,KAAK;QACH,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG;YAAE,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;QACtF,OAAO,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAED,QAAQ,CAAC,GAAG,GAAG,MAAM;QACnB,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE;YAAE,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;SAAE;QACrF,IAAI,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;YACxB,OAAO,EAAE,CAAC;SACX;QACD,OAAO,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IACnC,CAAC;CACF;AAID,yFAAyF;AACzF,SAAgB,gBAAgB,CAAC,CAAsB,EAAE,SAA6B,SAAS;IAC7F,IAAI,MAAkB,CAAC;IACvB,IAAI;QACF,MAAM,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;KACxB;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;KAC5B;IACD,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;IAC7B,MAAM,MAAM,GAAG,EAAE,CAAC;IAClB,MAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC;IAC1B,0CAA0C;IAC1C,KAAK,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;QACjC,MAAM,SAAS,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QACtC,IAAI,SAAS,KAAK,MAAM,CAAC,SAAS,EAAE;YAClC,MAAM;SACP;aAAM;YACL,MAAM,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACxC;KACF;IAED,yBAAyB;IACzB,IAAI,CAAC,MAAM,EAAE;QACX,OAAO,MAAM,CAAC;KACf;IAED,0BAA0B;IAC1B,IAAI,GAAuB,CAAC;IAC5B,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;QACzB,GAAG,GAAG,EAAE,CAAC;KACV;SAAM;QACL,GAAG,GAAG,EAAE,CAAC;KACV;IACD,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACtC,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACpB,IAAI,CAAC,GAAG,EAAE;YACR,MAAM;SACP;QACD,MAAM,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;QACxB,IAAI,GAAG,KAAK,SAAS,IAAI,OAAO,GAAG,KAAK,SAAS,EAAE;YACjD,GAAG,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;SAClC;aAAM,IAAI,GAAG,KAAK,QAAQ,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;YACtD,GAAG,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;SACjC;aAAM,IAAI,GAAG,KAAK,QAAQ,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;YACtD,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE;gBAChC,GAAG,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;aACjC;iBAAM;gBACL,GAAG,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;aACjC;SACF;aAAM,IAAI,GAAG,KAAK,QAAQ,EAAE;YAC3B,GAAG,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;SACjC;aAAM;YACL,GAAG,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;SAC9B;KACF;IAED,OAAO,GAAG,CAAC;AACb,CAAC;AAzDD,4CAyDC","sourcesContent":["import { bin2num, bsv, num2bin } from './utils';\n\nconst Script = bsv.Script;\nconst Opcode = bsv.Opcode;\nconst BN = bsv.crypto.BN;\n// number of bytes to denote state length after serialization, exclusing varint prefix\nexport const STATE_LEN_2BYTES = 2;\nexport const STATE_LEN_4BYTES = 4;\n\nfunction serializeBool(flag: boolean): string {\n  return flag ? 'OP_TRUE' : 'OP_FALSE';\n}\n\nfunction serializeInt(n: number | bigint): string {\n  const num = new BN(n);\n  if (num.eqn(0)) {\n    return '00';\n  }\n  return num.toSM({ endian: 'little' }).toString('hex');\n}\n\nfunction serializeString(str: string) {\n  if (str === '') {\n    return '00';\n  }\n  const buf = Buffer.from(str, 'utf8');\n  return buf.toString('hex');\n}\n\n// TODO: validate\nfunction serializeBytes(hexStr: string): string {\n  return hexStr;\n}\n\nexport type State = Record<string, boolean | number | bigint | string>;\nexport type StateArray = Array<boolean | number | bigint | string>;\n\nfunction serializeWithSchema(state: State | StateArray, key: string | number, schema: State | StateArray = undefined) {\n  const type = schema[key];\n  if (type === 'boolean') {\n    return serializeBool(state[key]);\n  } else if (type === 'number') {\n    return serializeInt(state[key]);\n  } else if (type === 'bigint') {\n    return serializeInt(state[key]);\n  } else if (type === 'string') {\n    return serializeString(state[key]);\n  } else {\n    return serializeBytes(state[key]);\n  }\n}\n\nfunction serialize(x: boolean | number | bigint | string) {\n  if (typeof x === 'boolean') {\n    return serializeBool(x);\n  }\n  if (typeof x === 'number') {\n    return serializeInt(x);\n  }\n  if (typeof x === 'bigint') {\n    return serializeInt(x);\n  } else {\n    return serializeBytes(x);\n  }\n}\n\n// serialize contract state into Script ASM\nexport function serializeState(state: State | StateArray, stateBytes: number = STATE_LEN_2BYTES, schema: State | StateArray = undefined): string {\n  const asms = [];\n\n  const keys = Object.keys(state);\n  for (const key of keys) {\n    if (schema) {\n      const str = serializeWithSchema(state, key, schema);\n      asms.push(str);\n    } else {\n      const str = serialize(state[key]);\n      asms.push(str);\n    }\n  }\n\n  const script = Script.fromASM(asms.join(' '));\n  const scriptHex = script.toHex();\n  const stateLen = scriptHex.length / 2;\n\n  // use fixed size to denote state len\n  const len = num2bin(stateLen, stateBytes);\n  return script.toASM() + ' ' + len;\n}\n\nclass OpState {\n  public op: any;\n\n  constructor(op) {\n    this.op = op;\n  }\n\n  toNumber(): number | string | bigint {\n\n    if (this.op.opcodenum === Opcode.OP_1) {\n      return Number(1);\n    } else if (this.op.opcodenum === Opcode.OP_0) {\n      return Number(0);\n    } else if (this.op.opcodenum === Opcode.OP_1NEGATE) {\n      return Number(-1);\n    } else if (this.op.opcodenum >= Opcode.OP_2 && this.op.opcodenum <= Opcode.OP_16) {\n      return Number(this.op.opcodenum - Opcode.OP_2 + 2);\n    } else {\n      if (!this.op.buf) throw new Error('state does not have a number representation');\n      return Number(bin2num(this.op.buf));\n    }\n\n  }\n\n  toBigInt(): bigint {\n    if (this.op.opcodenum === Opcode.OP_1) {\n      return BigInt(1);\n    } else if (this.op.opcodenum === Opcode.OP_0) {\n      return BigInt(0);\n    } else if (this.op.opcodenum === Opcode.OP_1NEGATE) {\n      return BigInt(-1);\n    } else if (this.op.opcodenum >= Opcode.OP_2 && this.op.opcodenum <= Opcode.OP_16) {\n      return BigInt(this.op.opcodenum - Opcode.OP_2 + 2);\n    } else {\n      if (!this.op.buf) throw new Error('state does not have a number representation');\n      return bin2num(this.op.buf) as bigint;\n    }\n  }\n\n  toBoolean(): boolean {\n    return this.toNumber() !== Number(0);\n  }\n\n  toHex(): string {\n    if (!this.op.buf) throw new Error('state does not have a hexadecimal representation');\n    return this.op.buf.toString('hex');\n  }\n\n  toString(arg = 'utf8') {\n    if (!this.op.buf) { throw new Error('state does not have a string representation'); }\n    if (this.op.buf[0] === 0) {\n      return '';\n    }\n    return this.op.buf.toString(arg);\n  }\n}\n\nexport type OpStateArray = Array<OpState>\n\n// deserialize Script or Script Hex or Script ASM Code to contract state array and object\nexport function deserializeState(s: string | bsv.Script, schema: State | StateArray = undefined): OpStateArray | State | StateArray {\n  let script: bsv.Script;\n  try {\n    script = new Script(s);\n  } catch (e) {\n    script = Script.fromASM(s);\n  }\n  const chunks = script.chunks;\n  const states = [];\n  const pos = chunks.length;\n  //the last opcode is length of stats, skip\n  for (let i = pos - 2; i >= 0; i--) {\n    const opcodenum = chunks[i].opcodenum;\n    if (opcodenum === Opcode.OP_RETURN) {\n      break;\n    } else {\n      states.unshift(new OpState(chunks[i]));\n    }\n  }\n\n  //deserialize to an array\n  if (!schema) {\n    return states;\n  }\n\n  //deserialize to an object\n  let ret: State | StateArray;\n  if (Array.isArray(schema)) {\n    ret = [];\n  } else {\n    ret = {};\n  }\n  const keys = Object.keys(schema);\n  for (let i = 0; i < states.length; i++) {\n    const key = keys[i];\n    if (!key) {\n      break;\n    }\n    const val = schema[key];\n    if (val === 'boolean' || typeof val === 'boolean') {\n      ret[key] = states[i].toBoolean();\n    } else if (val === 'number' || typeof val === 'number') {\n      ret[key] = states[i].toNumber();\n    } else if (val === 'bigint' || typeof val === 'bigint') {\n      if (typeof BigInt === 'function') {\n        ret[key] = states[i].toBigInt();\n      } else {\n        ret[key] = states[i].toNumber();\n      }\n    } else if (val === 'string') {\n      ret[key] = states[i].toString();\n    } else {\n      ret[key] = states[i].toHex();\n    }\n  }\n\n  return ret;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d494b9bf48b3c6978fee37ae1f5073a415b272f6"}}