"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseProvider = void 0;
class BaseProvider {
    constructor(network, name) {
        this.network = network;
        this.name = name;
    }
    getRawTx(txid) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error(`${this.name} do not support getRawTx`);
        });
    }
    broadcast(rawtx) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error(`${this.name} do not support broadcast`);
        });
    }
    getIsUtxoSpent(txId, outputIndex) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error(`${this.name} do not support getIsUtxoSpent`);
        });
    }
    getUtxos(address, queryParams) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error(`${this.name} do not support getUtxos`);
        });
    }
    getBalance(address) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error(`${this.name} do not support getBalance`);
        });
    }
    getTokenUtxos(codehash, genesis, address, queryParams) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error(`${this.name} do not support getTokenUtxos`);
        });
    }
    getTokenBalance(codehash, genesis, address) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error(`${this.name} do not support getTokenBalance`);
        });
    }
    getTokenList(address) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error(`${this.name} do not support getTokenList`);
        });
    }
    getNftUtxos(codehash, genesis, address, queryParams) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error(`${this.name} do not support getNftUtxos`);
        });
    }
    getNftUtxo(codehash, genesis, tokenIndex) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error(`${this.name} do not support getNftUtxo`);
        });
    }
    getNftCollectionList(address, queryParams) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error(`${this.name} do not support getNftCollectionList`);
        });
    }
}
exports.BaseProvider = BaseProvider;
//# sourceMappingURL=base-provider.js.map