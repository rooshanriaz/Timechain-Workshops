"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WhatsOnChainProvider = void 0;
// import { AxiosRequestConfig } from "axios";
const base_provider_1 = require("./base-provider");
const node_fetch_1 = require("node-fetch");
class WhatsOnChainProvider extends base_provider_1.BaseProvider {
    constructor(network = "mainnet") {
        super(network, "whatsonchain");
        if (network == "mainnet") {
            this.apiPrefix = "https://api.whatsonchain.com/v1/bsv/main";
        }
        else {
            this.apiPrefix = "https://api.whatsonchain.com/v1/bsv/test";
        }
    }
    getUtxos(address, queryParams) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/address/${address}/unspent`;
            let url = this.apiPrefix + path;
            let _res = yield (0, node_fetch_1.default)(url, {
                method: 'GET'
            }).then(res => {
                return res.json();
            });
            return _res.map((v) => ({
                txId: v.tx_hash,
                satoshis: v.value,
                outputIndex: v.tx_pos,
                address,
            }));
        });
    }
    getRawTx(txid) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/tx/${txid}/hex`;
            let url = this.apiPrefix + path;
            let _res = yield (0, node_fetch_1.default)(url, {
                method: 'GET'
            }).then(res => {
                return res.json();
            });
            return _res;
        });
    }
    broadcast(rawtx) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/tx/raw`;
            let url = this.apiPrefix + path;
            let _res = yield (0, node_fetch_1.default)(url, {
                method: 'POST',
                body: JSON.stringify({
                    txHex: rawtx
                })
            }).then(res => {
                return res.json();
            });
            return _res;
        });
    }
    getBalance(address) {
        return __awaiter(this, void 0, void 0, function* () {
            let path = `/address/${address}/balance`;
            let url = this.apiPrefix + path;
            let _res = yield (0, node_fetch_1.default)(url, {
                method: 'GET'
            }).then(res => {
                return res.json();
            });
            return {
                balance: _res.confirmed,
                pendingBalance: _res.unconfirmed,
                utxoCount: _res.utxoCount, //not sure
            };
        });
    }
}
exports.WhatsOnChainProvider = WhatsOnChainProvider;
//# sourceMappingURL=whatsonchain-provider.js.map